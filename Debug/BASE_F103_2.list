
BASE_F103_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003980  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08003a90  08003a90  00013a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b74  08003b74  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003b74  08003b74  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b74  08003b74  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b74  08003b74  00013b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b78  08003b78  00013b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010c0  20000074  08003bf0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001134  08003bf0  00021134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107a9  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae8  00000000  00000000  00030846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  00033330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  00034418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a05b  00000000  00000000  000353e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011163  00000000  00000000  0004f443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093edb  00000000  00000000  000605a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4481  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c28  00000000  00000000  000f44d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08003a78 	.word	0x08003a78

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08003a78 	.word	0x08003a78

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	20000144 	.word	0x20000144

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b08a      	sub	sp, #40	; 0x28
 8000184:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fb35 	bl	80007f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f867 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f8cb 	bl	8000328 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000192:	f000 f89f 	bl	80002d4 <MX_USART2_UART_Init>
  /* definition and creation of Task1 */
//  osThreadDef(Task1, task1_handler, osPriorityIdle, 0, 128);
//  Task1Handle = osThreadCreate(osThread(Task1), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
    taskCreationStatus = xTaskCreate(task1_UART, "Task-1", 200, "Hello World task 1", 2, &task1_UART_hndl);
 8000196:	f107 030c 	add.w	r3, r7, #12
 800019a:	9301      	str	r3, [sp, #4]
 800019c:	2302      	movs	r3, #2
 800019e:	9300      	str	r3, [sp, #0]
 80001a0:	4b25      	ldr	r3, [pc, #148]	; (8000238 <main+0xb8>)
 80001a2:	22c8      	movs	r2, #200	; 0xc8
 80001a4:	4925      	ldr	r1, [pc, #148]	; (800023c <main+0xbc>)
 80001a6:	4826      	ldr	r0, [pc, #152]	; (8000240 <main+0xc0>)
 80001a8:	f001 fe54 	bl	8001e54 <xTaskCreate>
 80001ac:	61f8      	str	r0, [r7, #28]

    configASSERT(taskCreationStatus == pdPASS);
 80001ae:	69fb      	ldr	r3, [r7, #28]
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d00a      	beq.n	80001ca <main+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80001b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80001b8:	f383 8811 	msr	BASEPRI, r3
 80001bc:	f3bf 8f6f 	isb	sy
 80001c0:	f3bf 8f4f 	dsb	sy
 80001c4:	61bb      	str	r3, [r7, #24]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80001c6:	bf00      	nop
 80001c8:	e7fe      	b.n	80001c8 <main+0x48>

    taskCreationStatus = xTaskCreate(task2_UART, "Task-2", 200, "Hello World task 2", 2, &task2_UART_hndl);
 80001ca:	f107 0308 	add.w	r3, r7, #8
 80001ce:	9301      	str	r3, [sp, #4]
 80001d0:	2302      	movs	r3, #2
 80001d2:	9300      	str	r3, [sp, #0]
 80001d4:	4b1b      	ldr	r3, [pc, #108]	; (8000244 <main+0xc4>)
 80001d6:	22c8      	movs	r2, #200	; 0xc8
 80001d8:	491b      	ldr	r1, [pc, #108]	; (8000248 <main+0xc8>)
 80001da:	481c      	ldr	r0, [pc, #112]	; (800024c <main+0xcc>)
 80001dc:	f001 fe3a 	bl	8001e54 <xTaskCreate>
 80001e0:	61f8      	str	r0, [r7, #28]

    configASSERT(taskCreationStatus == pdPASS);
 80001e2:	69fb      	ldr	r3, [r7, #28]
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	d00a      	beq.n	80001fe <main+0x7e>
	__asm volatile
 80001e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80001ec:	f383 8811 	msr	BASEPRI, r3
 80001f0:	f3bf 8f6f 	isb	sy
 80001f4:	f3bf 8f4f 	dsb	sy
 80001f8:	617b      	str	r3, [r7, #20]
}
 80001fa:	bf00      	nop
 80001fc:	e7fe      	b.n	80001fc <main+0x7c>

    taskCreationStatus = xTaskCreate(task_LED, "Task-LED", 200, "LED Task", 3, &task_LED_XD);
 80001fe:	1d3b      	adds	r3, r7, #4
 8000200:	9301      	str	r3, [sp, #4]
 8000202:	2303      	movs	r3, #3
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	4b12      	ldr	r3, [pc, #72]	; (8000250 <main+0xd0>)
 8000208:	22c8      	movs	r2, #200	; 0xc8
 800020a:	4912      	ldr	r1, [pc, #72]	; (8000254 <main+0xd4>)
 800020c:	4812      	ldr	r0, [pc, #72]	; (8000258 <main+0xd8>)
 800020e:	f001 fe21 	bl	8001e54 <xTaskCreate>
 8000212:	61f8      	str	r0, [r7, #28]

    configASSERT(taskCreationStatus == pdPASS);
 8000214:	69fb      	ldr	r3, [r7, #28]
 8000216:	2b01      	cmp	r3, #1
 8000218:	d00a      	beq.n	8000230 <main+0xb0>
	__asm volatile
 800021a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800021e:	f383 8811 	msr	BASEPRI, r3
 8000222:	f3bf 8f6f 	isb	sy
 8000226:	f3bf 8f4f 	dsb	sy
 800022a:	613b      	str	r3, [r7, #16]
}
 800022c:	bf00      	nop
 800022e:	e7fe      	b.n	800022e <main+0xae>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000230:	f001 fcfe 	bl	8001c30 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000234:	e7fe      	b.n	8000234 <main+0xb4>
 8000236:	bf00      	nop
 8000238:	08003a90 	.word	0x08003a90
 800023c:	08003aa4 	.word	0x08003aa4
 8000240:	080003a9 	.word	0x080003a9
 8000244:	08003aac 	.word	0x08003aac
 8000248:	08003ac0 	.word	0x08003ac0
 800024c:	080003bf 	.word	0x080003bf
 8000250:	08003ac8 	.word	0x08003ac8
 8000254:	08003ad4 	.word	0x08003ad4
 8000258:	080003d5 	.word	0x080003d5

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b090      	sub	sp, #64	; 0x40
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	f107 0318 	add.w	r3, r7, #24
 8000266:	2228      	movs	r2, #40	; 0x28
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f002 ff93 	bl	8003196 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
 800027c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027e:	2302      	movs	r3, #2
 8000280:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000282:	2301      	movs	r3, #1
 8000284:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000286:	2310      	movs	r3, #16
 8000288:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800028a:	2300      	movs	r3, #0
 800028c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028e:	f107 0318 	add.w	r3, r7, #24
 8000292:	4618      	mov	r0, r3
 8000294:	f000 fd5c 	bl	8000d50 <HAL_RCC_OscConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800029e:	f000 f8c7 	bl	8000430 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a2:	230f      	movs	r3, #15
 80002a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 ffca 	bl	8001254 <HAL_RCC_ClockConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002c6:	f000 f8b3 	bl	8000430 <Error_Handler>
  }
}
 80002ca:	bf00      	nop
 80002cc:	3740      	adds	r7, #64	; 0x40
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
	...

080002d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002d8:	4b11      	ldr	r3, [pc, #68]	; (8000320 <MX_USART2_UART_Init+0x4c>)
 80002da:	4a12      	ldr	r2, [pc, #72]	; (8000324 <MX_USART2_UART_Init+0x50>)
 80002dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80002de:	4b10      	ldr	r3, [pc, #64]	; (8000320 <MX_USART2_UART_Init+0x4c>)
 80002e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80002e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002e6:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <MX_USART2_UART_Init+0x4c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <MX_USART2_UART_Init+0x4c>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <MX_USART2_UART_Init+0x4c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002f8:	4b09      	ldr	r3, [pc, #36]	; (8000320 <MX_USART2_UART_Init+0x4c>)
 80002fa:	220c      	movs	r2, #12
 80002fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002fe:	4b08      	ldr	r3, [pc, #32]	; (8000320 <MX_USART2_UART_Init+0x4c>)
 8000300:	2200      	movs	r2, #0
 8000302:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <MX_USART2_UART_Init+0x4c>)
 8000306:	2200      	movs	r2, #0
 8000308:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800030a:	4805      	ldr	r0, [pc, #20]	; (8000320 <MX_USART2_UART_Init+0x4c>)
 800030c:	f001 fbb4 	bl	8001a78 <HAL_UART_Init>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000316:	f000 f88b 	bl	8000430 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000344 	.word	0x20000344
 8000324:	40004400 	.word	0x40004400

08000328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032e:	f107 0308 	add.w	r3, r7, #8
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800033c:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <MX_GPIO_Init+0x78>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a17      	ldr	r2, [pc, #92]	; (80003a0 <MX_GPIO_Init+0x78>)
 8000342:	f043 0310 	orr.w	r3, r3, #16
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <MX_GPIO_Init+0x78>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f003 0310 	and.w	r3, r3, #16
 8000350:	607b      	str	r3, [r7, #4]
 8000352:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000354:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <MX_GPIO_Init+0x78>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a11      	ldr	r2, [pc, #68]	; (80003a0 <MX_GPIO_Init+0x78>)
 800035a:	f043 0304 	orr.w	r3, r3, #4
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <MX_GPIO_Init+0x78>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f003 0304 	and.w	r3, r3, #4
 8000368:	603b      	str	r3, [r7, #0]
 800036a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800036c:	2200      	movs	r2, #0
 800036e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000372:	480c      	ldr	r0, [pc, #48]	; (80003a4 <MX_GPIO_Init+0x7c>)
 8000374:	f000 fcd4 	bl	8000d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800037c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037e:	2301      	movs	r3, #1
 8000380:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000382:	2300      	movs	r3, #0
 8000384:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000386:	2302      	movs	r3, #2
 8000388:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800038a:	f107 0308 	add.w	r3, r7, #8
 800038e:	4619      	mov	r1, r3
 8000390:	4804      	ldr	r0, [pc, #16]	; (80003a4 <MX_GPIO_Init+0x7c>)
 8000392:	f000 fb41 	bl	8000a18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000396:	bf00      	nop
 8000398:	3718      	adds	r7, #24
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	40021000 	.word	0x40021000
 80003a4:	40011000 	.word	0x40011000

080003a8 <task1_UART>:

/* USER CODE BEGIN 4 */

static void task1_UART(void * parameters)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n", (char*)parameters);
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f002 fffb 	bl	80033ac <puts>
		vTaskDelay(100);
 80003b6:	2064      	movs	r0, #100	; 0x64
 80003b8:	f001 fe92 	bl	80020e0 <vTaskDelay>
		printf("%s\n", (char*)parameters);
 80003bc:	e7f8      	b.n	80003b0 <task1_UART+0x8>

080003be <task2_UART>:
	}
}


static void task2_UART(void * parameters)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	b082      	sub	sp, #8
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n", (char*)parameters);
 80003c6:	6878      	ldr	r0, [r7, #4]
 80003c8:	f002 fff0 	bl	80033ac <puts>
		vTaskDelay(100);
 80003cc:	2064      	movs	r0, #100	; 0x64
 80003ce:	f001 fe87 	bl	80020e0 <vTaskDelay>
		printf("%s\n", (char*)parameters);
 80003d2:	e7f8      	b.n	80003c6 <task2_UART+0x8>

080003d4 <task_LED>:
	}

}

static void task_LED(void * parameters)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e2:	4809      	ldr	r0, [pc, #36]	; (8000408 <task_LED+0x34>)
 80003e4:	f000 fc9c 	bl	8000d20 <HAL_GPIO_WritePin>
		vTaskDelay(500);
 80003e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ec:	f001 fe78 	bl	80020e0 <vTaskDelay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003f6:	4804      	ldr	r0, [pc, #16]	; (8000408 <task_LED+0x34>)
 80003f8:	f000 fc92 	bl	8000d20 <HAL_GPIO_WritePin>
		vTaskDelay(500);
 80003fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000400:	f001 fe6e 	bl	80020e0 <vTaskDelay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000404:	e7ea      	b.n	80003dc <task_LED+0x8>
 8000406:	bf00      	nop
 8000408:	40011000 	.word	0x40011000

0800040c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a04      	ldr	r2, [pc, #16]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d101      	bne.n	8000422 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800041e:	f000 f9ff 	bl	8000820 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40000800 	.word	0x40000800

08000430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000434:	b672      	cpsid	i
}
 8000436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000438:	e7fe      	b.n	8000438 <Error_Handler+0x8>
	...

0800043c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000442:	4b11      	ldr	r3, [pc, #68]	; (8000488 <HAL_MspInit+0x4c>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	4a10      	ldr	r2, [pc, #64]	; (8000488 <HAL_MspInit+0x4c>)
 8000448:	f043 0301 	orr.w	r3, r3, #1
 800044c:	6193      	str	r3, [r2, #24]
 800044e:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <HAL_MspInit+0x4c>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	f003 0301 	and.w	r3, r3, #1
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045a:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <HAL_MspInit+0x4c>)
 800045c:	69db      	ldr	r3, [r3, #28]
 800045e:	4a0a      	ldr	r2, [pc, #40]	; (8000488 <HAL_MspInit+0x4c>)
 8000460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000464:	61d3      	str	r3, [r2, #28]
 8000466:	4b08      	ldr	r3, [pc, #32]	; (8000488 <HAL_MspInit+0x4c>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800046e:	603b      	str	r3, [r7, #0]
 8000470:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000472:	2200      	movs	r2, #0
 8000474:	210f      	movs	r1, #15
 8000476:	f06f 0001 	mvn.w	r0, #1
 800047a:	f000 faa2 	bl	80009c2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047e:	bf00      	nop
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000

0800048c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	605a      	str	r2, [r3, #4]
 800049e:	609a      	str	r2, [r3, #8]
 80004a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a1b      	ldr	r2, [pc, #108]	; (8000514 <HAL_UART_MspInit+0x88>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d12f      	bne.n	800050c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004ac:	4b1a      	ldr	r3, [pc, #104]	; (8000518 <HAL_UART_MspInit+0x8c>)
 80004ae:	69db      	ldr	r3, [r3, #28]
 80004b0:	4a19      	ldr	r2, [pc, #100]	; (8000518 <HAL_UART_MspInit+0x8c>)
 80004b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b6:	61d3      	str	r3, [r2, #28]
 80004b8:	4b17      	ldr	r3, [pc, #92]	; (8000518 <HAL_UART_MspInit+0x8c>)
 80004ba:	69db      	ldr	r3, [r3, #28]
 80004bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004c0:	60fb      	str	r3, [r7, #12]
 80004c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c4:	4b14      	ldr	r3, [pc, #80]	; (8000518 <HAL_UART_MspInit+0x8c>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	4a13      	ldr	r2, [pc, #76]	; (8000518 <HAL_UART_MspInit+0x8c>)
 80004ca:	f043 0304 	orr.w	r3, r3, #4
 80004ce:	6193      	str	r3, [r2, #24]
 80004d0:	4b11      	ldr	r3, [pc, #68]	; (8000518 <HAL_UART_MspInit+0x8c>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	f003 0304 	and.w	r3, r3, #4
 80004d8:	60bb      	str	r3, [r7, #8]
 80004da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004dc:	2304      	movs	r3, #4
 80004de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e0:	2302      	movs	r3, #2
 80004e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e4:	2303      	movs	r3, #3
 80004e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e8:	f107 0310 	add.w	r3, r7, #16
 80004ec:	4619      	mov	r1, r3
 80004ee:	480b      	ldr	r0, [pc, #44]	; (800051c <HAL_UART_MspInit+0x90>)
 80004f0:	f000 fa92 	bl	8000a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004f4:	2308      	movs	r3, #8
 80004f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fc:	2300      	movs	r3, #0
 80004fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000500:	f107 0310 	add.w	r3, r7, #16
 8000504:	4619      	mov	r1, r3
 8000506:	4805      	ldr	r0, [pc, #20]	; (800051c <HAL_UART_MspInit+0x90>)
 8000508:	f000 fa86 	bl	8000a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800050c:	bf00      	nop
 800050e:	3720      	adds	r7, #32
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40004400 	.word	0x40004400
 8000518:	40021000 	.word	0x40021000
 800051c:	40010800 	.word	0x40010800

08000520 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b08e      	sub	sp, #56	; 0x38
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000528:	2300      	movs	r3, #0
 800052a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800052c:	2300      	movs	r3, #0
 800052e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000530:	2300      	movs	r3, #0
 8000532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000536:	4b34      	ldr	r3, [pc, #208]	; (8000608 <HAL_InitTick+0xe8>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	4a33      	ldr	r2, [pc, #204]	; (8000608 <HAL_InitTick+0xe8>)
 800053c:	f043 0304 	orr.w	r3, r3, #4
 8000540:	61d3      	str	r3, [r2, #28]
 8000542:	4b31      	ldr	r3, [pc, #196]	; (8000608 <HAL_InitTick+0xe8>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	f003 0304 	and.w	r3, r3, #4
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800054e:	f107 0210 	add.w	r2, r7, #16
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	4611      	mov	r1, r2
 8000558:	4618      	mov	r0, r3
 800055a:	f000 fff5 	bl	8001548 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800055e:	6a3b      	ldr	r3, [r7, #32]
 8000560:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000564:	2b00      	cmp	r3, #0
 8000566:	d103      	bne.n	8000570 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000568:	f000 ffc6 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 800056c:	6378      	str	r0, [r7, #52]	; 0x34
 800056e:	e004      	b.n	800057a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000570:	f000 ffc2 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 8000574:	4603      	mov	r3, r0
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800057a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800057c:	4a23      	ldr	r2, [pc, #140]	; (800060c <HAL_InitTick+0xec>)
 800057e:	fba2 2303 	umull	r2, r3, r2, r3
 8000582:	0c9b      	lsrs	r3, r3, #18
 8000584:	3b01      	subs	r3, #1
 8000586:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000588:	4b21      	ldr	r3, [pc, #132]	; (8000610 <HAL_InitTick+0xf0>)
 800058a:	4a22      	ldr	r2, [pc, #136]	; (8000614 <HAL_InitTick+0xf4>)
 800058c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800058e:	4b20      	ldr	r3, [pc, #128]	; (8000610 <HAL_InitTick+0xf0>)
 8000590:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000594:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000596:	4a1e      	ldr	r2, [pc, #120]	; (8000610 <HAL_InitTick+0xf0>)
 8000598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800059a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800059c:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <HAL_InitTick+0xf0>)
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a2:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <HAL_InitTick+0xf0>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005a8:	4b19      	ldr	r3, [pc, #100]	; (8000610 <HAL_InitTick+0xf0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80005ae:	4818      	ldr	r0, [pc, #96]	; (8000610 <HAL_InitTick+0xf0>)
 80005b0:	f001 f818 	bl	80015e4 <HAL_TIM_Base_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80005ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d11b      	bne.n	80005fa <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80005c2:	4813      	ldr	r0, [pc, #76]	; (8000610 <HAL_InitTick+0xf0>)
 80005c4:	f001 f866 	bl	8001694 <HAL_TIM_Base_Start_IT>
 80005c8:	4603      	mov	r3, r0
 80005ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80005ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d111      	bne.n	80005fa <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80005d6:	201e      	movs	r0, #30
 80005d8:	f000 fa0f 	bl	80009fa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2b0f      	cmp	r3, #15
 80005e0:	d808      	bhi.n	80005f4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80005e2:	2200      	movs	r2, #0
 80005e4:	6879      	ldr	r1, [r7, #4]
 80005e6:	201e      	movs	r0, #30
 80005e8:	f000 f9eb 	bl	80009c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005ec:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <HAL_InitTick+0xf8>)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6013      	str	r3, [r2, #0]
 80005f2:	e002      	b.n	80005fa <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80005f4:	2301      	movs	r3, #1
 80005f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80005fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3738      	adds	r7, #56	; 0x38
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40021000 	.word	0x40021000
 800060c:	431bde83 	.word	0x431bde83
 8000610:	20000388 	.word	0x20000388
 8000614:	40000800 	.word	0x40000800
 8000618:	20000004 	.word	0x20000004

0800061c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <NMI_Handler+0x4>

08000622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000626:	e7fe      	b.n	8000626 <HardFault_Handler+0x4>

08000628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800062c:	e7fe      	b.n	800062c <MemManage_Handler+0x4>

0800062e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000632:	e7fe      	b.n	8000632 <BusFault_Handler+0x4>

08000634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000638:	e7fe      	b.n	8000638 <UsageFault_Handler+0x4>

0800063a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
	...

08000648 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800064c:	4802      	ldr	r0, [pc, #8]	; (8000658 <TIM4_IRQHandler+0x10>)
 800064e:	f001 f873 	bl	8001738 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000388 	.word	0x20000388

0800065c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	e00a      	b.n	8000684 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800066e:	f3af 8000 	nop.w
 8000672:	4601      	mov	r1, r0
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	1c5a      	adds	r2, r3, #1
 8000678:	60ba      	str	r2, [r7, #8]
 800067a:	b2ca      	uxtb	r2, r1
 800067c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	3301      	adds	r3, #1
 8000682:	617b      	str	r3, [r7, #20]
 8000684:	697a      	ldr	r2, [r7, #20]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	429a      	cmp	r2, r3
 800068a:	dbf0      	blt.n	800066e <_read+0x12>
  }

  return len;
 800068c:	687b      	ldr	r3, [r7, #4]
}
 800068e:	4618      	mov	r0, r3
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b086      	sub	sp, #24
 800069a:	af00      	add	r7, sp, #0
 800069c:	60f8      	str	r0, [r7, #12]
 800069e:	60b9      	str	r1, [r7, #8]
 80006a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
 80006a6:	e009      	b.n	80006bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	1c5a      	adds	r2, r3, #1
 80006ac:	60ba      	str	r2, [r7, #8]
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	3301      	adds	r3, #1
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	697a      	ldr	r2, [r7, #20]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbf1      	blt.n	80006a8 <_write+0x12>
//    ITM_SendChar(*ptr++);
  }
  return len;
 80006c4:	687b      	ldr	r3, [r7, #4]
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <_close>:

int _close(int file)
{
 80006ce:	b480      	push	{r7}
 80006d0:	b083      	sub	sp, #12
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr

080006e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006f4:	605a      	str	r2, [r3, #4]
  return 0;
 80006f6:	2300      	movs	r3, #0
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr

08000702 <_isatty>:

int _isatty(int file)
{
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800070a:	2301      	movs	r3, #1
}
 800070c:	4618      	mov	r0, r3
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr

08000716 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000716:	b480      	push	{r7}
 8000718:	b085      	sub	sp, #20
 800071a:	af00      	add	r7, sp, #0
 800071c:	60f8      	str	r0, [r7, #12]
 800071e:	60b9      	str	r1, [r7, #8]
 8000720:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000722:	2300      	movs	r3, #0
}
 8000724:	4618      	mov	r0, r3
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr
	...

08000730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000738:	4a14      	ldr	r2, [pc, #80]	; (800078c <_sbrk+0x5c>)
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <_sbrk+0x60>)
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <_sbrk+0x64>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d102      	bne.n	8000752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <_sbrk+0x64>)
 800074e:	4a12      	ldr	r2, [pc, #72]	; (8000798 <_sbrk+0x68>)
 8000750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <_sbrk+0x64>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4413      	add	r3, r2
 800075a:	693a      	ldr	r2, [r7, #16]
 800075c:	429a      	cmp	r2, r3
 800075e:	d207      	bcs.n	8000770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000760:	f002 fbf6 	bl	8002f50 <__errno>
 8000764:	4603      	mov	r3, r0
 8000766:	220c      	movs	r2, #12
 8000768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	e009      	b.n	8000784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <_sbrk+0x64>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000776:	4b07      	ldr	r3, [pc, #28]	; (8000794 <_sbrk+0x64>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4413      	add	r3, r2
 800077e:	4a05      	ldr	r2, [pc, #20]	; (8000794 <_sbrk+0x64>)
 8000780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000782:	68fb      	ldr	r3, [r7, #12]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3718      	adds	r7, #24
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20005000 	.word	0x20005000
 8000790:	00000400 	.word	0x00000400
 8000794:	200003d0 	.word	0x200003d0
 8000798:	20001138 	.word	0x20001138

0800079c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a8:	480c      	ldr	r0, [pc, #48]	; (80007dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007aa:	490d      	ldr	r1, [pc, #52]	; (80007e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007ac:	4a0d      	ldr	r2, [pc, #52]	; (80007e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b0:	e002      	b.n	80007b8 <LoopCopyDataInit>

080007b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b6:	3304      	adds	r3, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007bc:	d3f9      	bcc.n	80007b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007be:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007c0:	4c0a      	ldr	r4, [pc, #40]	; (80007ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c4:	e001      	b.n	80007ca <LoopFillZerobss>

080007c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c8:	3204      	adds	r2, #4

080007ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007cc:	d3fb      	bcc.n	80007c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007ce:	f7ff ffe5 	bl	800079c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007d2:	f002 fcb9 	bl	8003148 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007d6:	f7ff fcd3 	bl	8000180 <main>
  bx lr
 80007da:	4770      	bx	lr
  ldr r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80007e4:	08003b7c 	.word	0x08003b7c
  ldr r2, =_sbss
 80007e8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80007ec:	20001134 	.word	0x20001134

080007f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <ADC1_2_IRQHandler>
	...

080007f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <HAL_Init+0x28>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a07      	ldr	r2, [pc, #28]	; (800081c <HAL_Init+0x28>)
 80007fe:	f043 0310 	orr.w	r3, r3, #16
 8000802:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000804:	2003      	movs	r0, #3
 8000806:	f000 f8d1 	bl	80009ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800080a:	200f      	movs	r0, #15
 800080c:	f7ff fe88 	bl	8000520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000810:	f7ff fe14 	bl	800043c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40022000 	.word	0x40022000

08000820 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <HAL_IncTick+0x1c>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	4b05      	ldr	r3, [pc, #20]	; (8000840 <HAL_IncTick+0x20>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4413      	add	r3, r2
 8000830:	4a03      	ldr	r2, [pc, #12]	; (8000840 <HAL_IncTick+0x20>)
 8000832:	6013      	str	r3, [r2, #0]
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	20000008 	.word	0x20000008
 8000840:	200003d4 	.word	0x200003d4

08000844 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return uwTick;
 8000848:	4b02      	ldr	r3, [pc, #8]	; (8000854 <HAL_GetTick+0x10>)
 800084a:	681b      	ldr	r3, [r3, #0]
}
 800084c:	4618      	mov	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	200003d4 	.word	0x200003d4

08000858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <__NVIC_SetPriorityGrouping+0x44>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800086e:	68ba      	ldr	r2, [r7, #8]
 8000870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000874:	4013      	ands	r3, r2
 8000876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800088a:	4a04      	ldr	r2, [pc, #16]	; (800089c <__NVIC_SetPriorityGrouping+0x44>)
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	60d3      	str	r3, [r2, #12]
}
 8000890:	bf00      	nop
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a4:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <__NVIC_GetPriorityGrouping+0x18>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	0a1b      	lsrs	r3, r3, #8
 80008aa:	f003 0307 	and.w	r3, r3, #7
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	db0b      	blt.n	80008e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	f003 021f 	and.w	r2, r3, #31
 80008d4:	4906      	ldr	r1, [pc, #24]	; (80008f0 <__NVIC_EnableIRQ+0x34>)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	095b      	lsrs	r3, r3, #5
 80008dc:	2001      	movs	r0, #1
 80008de:	fa00 f202 	lsl.w	r2, r0, r2
 80008e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	e000e100 	.word	0xe000e100

080008f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	6039      	str	r1, [r7, #0]
 80008fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000904:	2b00      	cmp	r3, #0
 8000906:	db0a      	blt.n	800091e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	b2da      	uxtb	r2, r3
 800090c:	490c      	ldr	r1, [pc, #48]	; (8000940 <__NVIC_SetPriority+0x4c>)
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	0112      	lsls	r2, r2, #4
 8000914:	b2d2      	uxtb	r2, r2
 8000916:	440b      	add	r3, r1
 8000918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800091c:	e00a      	b.n	8000934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4908      	ldr	r1, [pc, #32]	; (8000944 <__NVIC_SetPriority+0x50>)
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	f003 030f 	and.w	r3, r3, #15
 800092a:	3b04      	subs	r3, #4
 800092c:	0112      	lsls	r2, r2, #4
 800092e:	b2d2      	uxtb	r2, r2
 8000930:	440b      	add	r3, r1
 8000932:	761a      	strb	r2, [r3, #24]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000e100 	.word	0xe000e100
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000948:	b480      	push	{r7}
 800094a:	b089      	sub	sp, #36	; 0x24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	f1c3 0307 	rsb	r3, r3, #7
 8000962:	2b04      	cmp	r3, #4
 8000964:	bf28      	it	cs
 8000966:	2304      	movcs	r3, #4
 8000968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3304      	adds	r3, #4
 800096e:	2b06      	cmp	r3, #6
 8000970:	d902      	bls.n	8000978 <NVIC_EncodePriority+0x30>
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3b03      	subs	r3, #3
 8000976:	e000      	b.n	800097a <NVIC_EncodePriority+0x32>
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097c:	f04f 32ff 	mov.w	r2, #4294967295
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	43da      	mvns	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	401a      	ands	r2, r3
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000990:	f04f 31ff 	mov.w	r1, #4294967295
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	fa01 f303 	lsl.w	r3, r1, r3
 800099a:	43d9      	mvns	r1, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a0:	4313      	orrs	r3, r2
         );
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3724      	adds	r7, #36	; 0x24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ff4f 	bl	8000858 <__NVIC_SetPriorityGrouping>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b086      	sub	sp, #24
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	4603      	mov	r3, r0
 80009ca:	60b9      	str	r1, [r7, #8]
 80009cc:	607a      	str	r2, [r7, #4]
 80009ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009d4:	f7ff ff64 	bl	80008a0 <__NVIC_GetPriorityGrouping>
 80009d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	68b9      	ldr	r1, [r7, #8]
 80009de:	6978      	ldr	r0, [r7, #20]
 80009e0:	f7ff ffb2 	bl	8000948 <NVIC_EncodePriority>
 80009e4:	4602      	mov	r2, r0
 80009e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ea:	4611      	mov	r1, r2
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff81 	bl	80008f4 <__NVIC_SetPriority>
}
 80009f2:	bf00      	nop
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	4603      	mov	r3, r0
 8000a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff57 	bl	80008bc <__NVIC_EnableIRQ>
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b08b      	sub	sp, #44	; 0x2c
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a2a:	e169      	b.n	8000d00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	69fa      	ldr	r2, [r7, #28]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	f040 8158 	bne.w	8000cfa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	4a9a      	ldr	r2, [pc, #616]	; (8000cb8 <HAL_GPIO_Init+0x2a0>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d05e      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
 8000a54:	4a98      	ldr	r2, [pc, #608]	; (8000cb8 <HAL_GPIO_Init+0x2a0>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d875      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a5a:	4a98      	ldr	r2, [pc, #608]	; (8000cbc <HAL_GPIO_Init+0x2a4>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d058      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
 8000a60:	4a96      	ldr	r2, [pc, #600]	; (8000cbc <HAL_GPIO_Init+0x2a4>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d86f      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a66:	4a96      	ldr	r2, [pc, #600]	; (8000cc0 <HAL_GPIO_Init+0x2a8>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d052      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
 8000a6c:	4a94      	ldr	r2, [pc, #592]	; (8000cc0 <HAL_GPIO_Init+0x2a8>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d869      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a72:	4a94      	ldr	r2, [pc, #592]	; (8000cc4 <HAL_GPIO_Init+0x2ac>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d04c      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
 8000a78:	4a92      	ldr	r2, [pc, #584]	; (8000cc4 <HAL_GPIO_Init+0x2ac>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d863      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a7e:	4a92      	ldr	r2, [pc, #584]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d046      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
 8000a84:	4a90      	ldr	r2, [pc, #576]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d85d      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a8a:	2b12      	cmp	r3, #18
 8000a8c:	d82a      	bhi.n	8000ae4 <HAL_GPIO_Init+0xcc>
 8000a8e:	2b12      	cmp	r3, #18
 8000a90:	d859      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a92:	a201      	add	r2, pc, #4	; (adr r2, 8000a98 <HAL_GPIO_Init+0x80>)
 8000a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a98:	08000b13 	.word	0x08000b13
 8000a9c:	08000aed 	.word	0x08000aed
 8000aa0:	08000aff 	.word	0x08000aff
 8000aa4:	08000b41 	.word	0x08000b41
 8000aa8:	08000b47 	.word	0x08000b47
 8000aac:	08000b47 	.word	0x08000b47
 8000ab0:	08000b47 	.word	0x08000b47
 8000ab4:	08000b47 	.word	0x08000b47
 8000ab8:	08000b47 	.word	0x08000b47
 8000abc:	08000b47 	.word	0x08000b47
 8000ac0:	08000b47 	.word	0x08000b47
 8000ac4:	08000b47 	.word	0x08000b47
 8000ac8:	08000b47 	.word	0x08000b47
 8000acc:	08000b47 	.word	0x08000b47
 8000ad0:	08000b47 	.word	0x08000b47
 8000ad4:	08000b47 	.word	0x08000b47
 8000ad8:	08000b47 	.word	0x08000b47
 8000adc:	08000af5 	.word	0x08000af5
 8000ae0:	08000b09 	.word	0x08000b09
 8000ae4:	4a79      	ldr	r2, [pc, #484]	; (8000ccc <HAL_GPIO_Init+0x2b4>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d013      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aea:	e02c      	b.n	8000b46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	623b      	str	r3, [r7, #32]
          break;
 8000af2:	e029      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	3304      	adds	r3, #4
 8000afa:	623b      	str	r3, [r7, #32]
          break;
 8000afc:	e024      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	3308      	adds	r3, #8
 8000b04:	623b      	str	r3, [r7, #32]
          break;
 8000b06:	e01f      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	330c      	adds	r3, #12
 8000b0e:	623b      	str	r3, [r7, #32]
          break;
 8000b10:	e01a      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d102      	bne.n	8000b20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b1a:	2304      	movs	r3, #4
 8000b1c:	623b      	str	r3, [r7, #32]
          break;
 8000b1e:	e013      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d105      	bne.n	8000b34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b28:	2308      	movs	r3, #8
 8000b2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	69fa      	ldr	r2, [r7, #28]
 8000b30:	611a      	str	r2, [r3, #16]
          break;
 8000b32:	e009      	b.n	8000b48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b34:	2308      	movs	r3, #8
 8000b36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	69fa      	ldr	r2, [r7, #28]
 8000b3c:	615a      	str	r2, [r3, #20]
          break;
 8000b3e:	e003      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
          break;
 8000b44:	e000      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          break;
 8000b46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	2bff      	cmp	r3, #255	; 0xff
 8000b4c:	d801      	bhi.n	8000b52 <HAL_GPIO_Init+0x13a>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	e001      	b.n	8000b56 <HAL_GPIO_Init+0x13e>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	3304      	adds	r3, #4
 8000b56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	2bff      	cmp	r3, #255	; 0xff
 8000b5c:	d802      	bhi.n	8000b64 <HAL_GPIO_Init+0x14c>
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	e002      	b.n	8000b6a <HAL_GPIO_Init+0x152>
 8000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b66:	3b08      	subs	r3, #8
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	210f      	movs	r1, #15
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	fa01 f303 	lsl.w	r3, r1, r3
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	6a39      	ldr	r1, [r7, #32]
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	fa01 f303 	lsl.w	r3, r1, r3
 8000b84:	431a      	orrs	r2, r3
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f000 80b1 	beq.w	8000cfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b98:	4b4d      	ldr	r3, [pc, #308]	; (8000cd0 <HAL_GPIO_Init+0x2b8>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a4c      	ldr	r2, [pc, #304]	; (8000cd0 <HAL_GPIO_Init+0x2b8>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b4a      	ldr	r3, [pc, #296]	; (8000cd0 <HAL_GPIO_Init+0x2b8>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bb0:	4a48      	ldr	r2, [pc, #288]	; (8000cd4 <HAL_GPIO_Init+0x2bc>)
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb4:	089b      	lsrs	r3, r3, #2
 8000bb6:	3302      	adds	r3, #2
 8000bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc0:	f003 0303 	and.w	r3, r3, #3
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	220f      	movs	r2, #15
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a40      	ldr	r2, [pc, #256]	; (8000cd8 <HAL_GPIO_Init+0x2c0>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d013      	beq.n	8000c04 <HAL_GPIO_Init+0x1ec>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a3f      	ldr	r2, [pc, #252]	; (8000cdc <HAL_GPIO_Init+0x2c4>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d00d      	beq.n	8000c00 <HAL_GPIO_Init+0x1e8>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a3e      	ldr	r2, [pc, #248]	; (8000ce0 <HAL_GPIO_Init+0x2c8>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d007      	beq.n	8000bfc <HAL_GPIO_Init+0x1e4>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a3d      	ldr	r2, [pc, #244]	; (8000ce4 <HAL_GPIO_Init+0x2cc>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d101      	bne.n	8000bf8 <HAL_GPIO_Init+0x1e0>
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	e006      	b.n	8000c06 <HAL_GPIO_Init+0x1ee>
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	e004      	b.n	8000c06 <HAL_GPIO_Init+0x1ee>
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	e002      	b.n	8000c06 <HAL_GPIO_Init+0x1ee>
 8000c00:	2301      	movs	r3, #1
 8000c02:	e000      	b.n	8000c06 <HAL_GPIO_Init+0x1ee>
 8000c04:	2300      	movs	r3, #0
 8000c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c08:	f002 0203 	and.w	r2, r2, #3
 8000c0c:	0092      	lsls	r2, r2, #2
 8000c0e:	4093      	lsls	r3, r2
 8000c10:	68fa      	ldr	r2, [r7, #12]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c16:	492f      	ldr	r1, [pc, #188]	; (8000cd4 <HAL_GPIO_Init+0x2bc>)
 8000c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1a:	089b      	lsrs	r3, r3, #2
 8000c1c:	3302      	adds	r3, #2
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d006      	beq.n	8000c3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c30:	4b2d      	ldr	r3, [pc, #180]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	492c      	ldr	r1, [pc, #176]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	600b      	str	r3, [r1, #0]
 8000c3c:	e006      	b.n	8000c4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	43db      	mvns	r3, r3
 8000c46:	4928      	ldr	r1, [pc, #160]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c48:	4013      	ands	r3, r2
 8000c4a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d006      	beq.n	8000c66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c58:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	4922      	ldr	r1, [pc, #136]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	604b      	str	r3, [r1, #4]
 8000c64:	e006      	b.n	8000c74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c66:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c68:	685a      	ldr	r2, [r3, #4]
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	491e      	ldr	r1, [pc, #120]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c70:	4013      	ands	r3, r2
 8000c72:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d006      	beq.n	8000c8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	4918      	ldr	r1, [pc, #96]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	608b      	str	r3, [r1, #8]
 8000c8c:	e006      	b.n	8000c9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c90:	689a      	ldr	r2, [r3, #8]
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	43db      	mvns	r3, r3
 8000c96:	4914      	ldr	r1, [pc, #80]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c98:	4013      	ands	r3, r2
 8000c9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d021      	beq.n	8000cec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000caa:	68da      	ldr	r2, [r3, #12]
 8000cac:	490e      	ldr	r1, [pc, #56]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	60cb      	str	r3, [r1, #12]
 8000cb4:	e021      	b.n	8000cfa <HAL_GPIO_Init+0x2e2>
 8000cb6:	bf00      	nop
 8000cb8:	10320000 	.word	0x10320000
 8000cbc:	10310000 	.word	0x10310000
 8000cc0:	10220000 	.word	0x10220000
 8000cc4:	10210000 	.word	0x10210000
 8000cc8:	10120000 	.word	0x10120000
 8000ccc:	10110000 	.word	0x10110000
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	40010000 	.word	0x40010000
 8000cd8:	40010800 	.word	0x40010800
 8000cdc:	40010c00 	.word	0x40010c00
 8000ce0:	40011000 	.word	0x40011000
 8000ce4:	40011400 	.word	0x40011400
 8000ce8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <HAL_GPIO_Init+0x304>)
 8000cee:	68da      	ldr	r2, [r3, #12]
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	4909      	ldr	r1, [pc, #36]	; (8000d1c <HAL_GPIO_Init+0x304>)
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d06:	fa22 f303 	lsr.w	r3, r2, r3
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f47f ae8e 	bne.w	8000a2c <HAL_GPIO_Init+0x14>
  }
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	372c      	adds	r7, #44	; 0x2c
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	40010400 	.word	0x40010400

08000d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	807b      	strh	r3, [r7, #2]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d30:	787b      	ldrb	r3, [r7, #1]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d003      	beq.n	8000d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d36:	887a      	ldrh	r2, [r7, #2]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d3c:	e003      	b.n	8000d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d3e:	887b      	ldrh	r3, [r7, #2]
 8000d40:	041a      	lsls	r2, r3, #16
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	611a      	str	r2, [r3, #16]
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e272      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 8087 	beq.w	8000e7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d70:	4b92      	ldr	r3, [pc, #584]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 030c 	and.w	r3, r3, #12
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	d00c      	beq.n	8000d96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d7c:	4b8f      	ldr	r3, [pc, #572]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 030c 	and.w	r3, r3, #12
 8000d84:	2b08      	cmp	r3, #8
 8000d86:	d112      	bne.n	8000dae <HAL_RCC_OscConfig+0x5e>
 8000d88:	4b8c      	ldr	r3, [pc, #560]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d94:	d10b      	bne.n	8000dae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d96:	4b89      	ldr	r3, [pc, #548]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d06c      	beq.n	8000e7c <HAL_RCC_OscConfig+0x12c>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d168      	bne.n	8000e7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e24c      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000db6:	d106      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x76>
 8000db8:	4b80      	ldr	r3, [pc, #512]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a7f      	ldr	r2, [pc, #508]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	e02e      	b.n	8000e24 <HAL_RCC_OscConfig+0xd4>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d10c      	bne.n	8000de8 <HAL_RCC_OscConfig+0x98>
 8000dce:	4b7b      	ldr	r3, [pc, #492]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a7a      	ldr	r2, [pc, #488]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	4b78      	ldr	r3, [pc, #480]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a77      	ldr	r2, [pc, #476]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	e01d      	b.n	8000e24 <HAL_RCC_OscConfig+0xd4>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000df0:	d10c      	bne.n	8000e0c <HAL_RCC_OscConfig+0xbc>
 8000df2:	4b72      	ldr	r3, [pc, #456]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a71      	ldr	r2, [pc, #452]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	4b6f      	ldr	r3, [pc, #444]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a6e      	ldr	r2, [pc, #440]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	e00b      	b.n	8000e24 <HAL_RCC_OscConfig+0xd4>
 8000e0c:	4b6b      	ldr	r3, [pc, #428]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a6a      	ldr	r2, [pc, #424]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	4b68      	ldr	r3, [pc, #416]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a67      	ldr	r2, [pc, #412]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d013      	beq.n	8000e54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2c:	f7ff fd0a 	bl	8000844 <HAL_GetTick>
 8000e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e32:	e008      	b.n	8000e46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e34:	f7ff fd06 	bl	8000844 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b64      	cmp	r3, #100	; 0x64
 8000e40:	d901      	bls.n	8000e46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e200      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e46:	4b5d      	ldr	r3, [pc, #372]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d0f0      	beq.n	8000e34 <HAL_RCC_OscConfig+0xe4>
 8000e52:	e014      	b.n	8000e7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e54:	f7ff fcf6 	bl	8000844 <HAL_GetTick>
 8000e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e5a:	e008      	b.n	8000e6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e5c:	f7ff fcf2 	bl	8000844 <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b64      	cmp	r3, #100	; 0x64
 8000e68:	d901      	bls.n	8000e6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e1ec      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e6e:	4b53      	ldr	r3, [pc, #332]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1f0      	bne.n	8000e5c <HAL_RCC_OscConfig+0x10c>
 8000e7a:	e000      	b.n	8000e7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d063      	beq.n	8000f52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e8a:	4b4c      	ldr	r3, [pc, #304]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 030c 	and.w	r3, r3, #12
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d00b      	beq.n	8000eae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e96:	4b49      	ldr	r3, [pc, #292]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 030c 	and.w	r3, r3, #12
 8000e9e:	2b08      	cmp	r3, #8
 8000ea0:	d11c      	bne.n	8000edc <HAL_RCC_OscConfig+0x18c>
 8000ea2:	4b46      	ldr	r3, [pc, #280]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d116      	bne.n	8000edc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eae:	4b43      	ldr	r3, [pc, #268]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d005      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x176>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d001      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e1c0      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec6:	4b3d      	ldr	r3, [pc, #244]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	4939      	ldr	r1, [pc, #228]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eda:	e03a      	b.n	8000f52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	691b      	ldr	r3, [r3, #16]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d020      	beq.n	8000f26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ee4:	4b36      	ldr	r3, [pc, #216]	; (8000fc0 <HAL_RCC_OscConfig+0x270>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eea:	f7ff fcab 	bl	8000844 <HAL_GetTick>
 8000eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef0:	e008      	b.n	8000f04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ef2:	f7ff fca7 	bl	8000844 <HAL_GetTick>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d901      	bls.n	8000f04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e1a1      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f04:	4b2d      	ldr	r3, [pc, #180]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0f0      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f10:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	4927      	ldr	r1, [pc, #156]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f20:	4313      	orrs	r3, r2
 8000f22:	600b      	str	r3, [r1, #0]
 8000f24:	e015      	b.n	8000f52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f26:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <HAL_RCC_OscConfig+0x270>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2c:	f7ff fc8a 	bl	8000844 <HAL_GetTick>
 8000f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f32:	e008      	b.n	8000f46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f34:	f7ff fc86 	bl	8000844 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d901      	bls.n	8000f46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e180      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d1f0      	bne.n	8000f34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d03a      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d019      	beq.n	8000f9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <HAL_RCC_OscConfig+0x274>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f6c:	f7ff fc6a 	bl	8000844 <HAL_GetTick>
 8000f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f72:	e008      	b.n	8000f86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f74:	f7ff fc66 	bl	8000844 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e160      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d0f0      	beq.n	8000f74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f92:	2001      	movs	r0, #1
 8000f94:	f000 fb08 	bl	80015a8 <RCC_Delay>
 8000f98:	e01c      	b.n	8000fd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_RCC_OscConfig+0x274>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa0:	f7ff fc50 	bl	8000844 <HAL_GetTick>
 8000fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa6:	e00f      	b.n	8000fc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fa8:	f7ff fc4c 	bl	8000844 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d908      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e146      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	42420000 	.word	0x42420000
 8000fc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc8:	4b92      	ldr	r3, [pc, #584]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8000fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1e9      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f000 80a6 	beq.w	800112e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fe6:	4b8b      	ldr	r3, [pc, #556]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10d      	bne.n	800100e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ff2:	4b88      	ldr	r3, [pc, #544]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	4a87      	ldr	r2, [pc, #540]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	61d3      	str	r3, [r2, #28]
 8000ffe:	4b85      	ldr	r3, [pc, #532]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800100a:	2301      	movs	r3, #1
 800100c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800100e:	4b82      	ldr	r3, [pc, #520]	; (8001218 <HAL_RCC_OscConfig+0x4c8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001016:	2b00      	cmp	r3, #0
 8001018:	d118      	bne.n	800104c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800101a:	4b7f      	ldr	r3, [pc, #508]	; (8001218 <HAL_RCC_OscConfig+0x4c8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a7e      	ldr	r2, [pc, #504]	; (8001218 <HAL_RCC_OscConfig+0x4c8>)
 8001020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001026:	f7ff fc0d 	bl	8000844 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800102e:	f7ff fc09 	bl	8000844 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b64      	cmp	r3, #100	; 0x64
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e103      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001040:	4b75      	ldr	r3, [pc, #468]	; (8001218 <HAL_RCC_OscConfig+0x4c8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0f0      	beq.n	800102e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d106      	bne.n	8001062 <HAL_RCC_OscConfig+0x312>
 8001054:	4b6f      	ldr	r3, [pc, #444]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	4a6e      	ldr	r2, [pc, #440]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6213      	str	r3, [r2, #32]
 8001060:	e02d      	b.n	80010be <HAL_RCC_OscConfig+0x36e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d10c      	bne.n	8001084 <HAL_RCC_OscConfig+0x334>
 800106a:	4b6a      	ldr	r3, [pc, #424]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	4a69      	ldr	r2, [pc, #420]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001070:	f023 0301 	bic.w	r3, r3, #1
 8001074:	6213      	str	r3, [r2, #32]
 8001076:	4b67      	ldr	r3, [pc, #412]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	4a66      	ldr	r2, [pc, #408]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 800107c:	f023 0304 	bic.w	r3, r3, #4
 8001080:	6213      	str	r3, [r2, #32]
 8001082:	e01c      	b.n	80010be <HAL_RCC_OscConfig+0x36e>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	2b05      	cmp	r3, #5
 800108a:	d10c      	bne.n	80010a6 <HAL_RCC_OscConfig+0x356>
 800108c:	4b61      	ldr	r3, [pc, #388]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	4a60      	ldr	r2, [pc, #384]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001092:	f043 0304 	orr.w	r3, r3, #4
 8001096:	6213      	str	r3, [r2, #32]
 8001098:	4b5e      	ldr	r3, [pc, #376]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	4a5d      	ldr	r2, [pc, #372]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6213      	str	r3, [r2, #32]
 80010a4:	e00b      	b.n	80010be <HAL_RCC_OscConfig+0x36e>
 80010a6:	4b5b      	ldr	r3, [pc, #364]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	4a5a      	ldr	r2, [pc, #360]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 80010ac:	f023 0301 	bic.w	r3, r3, #1
 80010b0:	6213      	str	r3, [r2, #32]
 80010b2:	4b58      	ldr	r3, [pc, #352]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	4a57      	ldr	r2, [pc, #348]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 80010b8:	f023 0304 	bic.w	r3, r3, #4
 80010bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d015      	beq.n	80010f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c6:	f7ff fbbd 	bl	8000844 <HAL_GetTick>
 80010ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010cc:	e00a      	b.n	80010e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ce:	f7ff fbb9 	bl	8000844 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010dc:	4293      	cmp	r3, r2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e0b1      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e4:	4b4b      	ldr	r3, [pc, #300]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0ee      	beq.n	80010ce <HAL_RCC_OscConfig+0x37e>
 80010f0:	e014      	b.n	800111c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f2:	f7ff fba7 	bl	8000844 <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010f8:	e00a      	b.n	8001110 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010fa:	f7ff fba3 	bl	8000844 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	f241 3288 	movw	r2, #5000	; 0x1388
 8001108:	4293      	cmp	r3, r2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e09b      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001110:	4b40      	ldr	r3, [pc, #256]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1ee      	bne.n	80010fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800111c:	7dfb      	ldrb	r3, [r7, #23]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d105      	bne.n	800112e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001122:	4b3c      	ldr	r3, [pc, #240]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	4a3b      	ldr	r2, [pc, #236]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800112c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 8087 	beq.w	8001246 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001138:	4b36      	ldr	r3, [pc, #216]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 030c 	and.w	r3, r3, #12
 8001140:	2b08      	cmp	r3, #8
 8001142:	d061      	beq.n	8001208 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69db      	ldr	r3, [r3, #28]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d146      	bne.n	80011da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800114c:	4b33      	ldr	r3, [pc, #204]	; (800121c <HAL_RCC_OscConfig+0x4cc>)
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001152:	f7ff fb77 	bl	8000844 <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800115a:	f7ff fb73 	bl	8000844 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e06d      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116c:	4b29      	ldr	r3, [pc, #164]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1f0      	bne.n	800115a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001180:	d108      	bne.n	8001194 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001182:	4b24      	ldr	r3, [pc, #144]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	4921      	ldr	r1, [pc, #132]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001190:	4313      	orrs	r3, r2
 8001192:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001194:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a19      	ldr	r1, [r3, #32]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a4:	430b      	orrs	r3, r1
 80011a6:	491b      	ldr	r1, [pc, #108]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	4313      	orrs	r3, r2
 80011aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <HAL_RCC_OscConfig+0x4cc>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b2:	f7ff fb47 	bl	8000844 <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ba:	f7ff fb43 	bl	8000844 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e03d      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f0      	beq.n	80011ba <HAL_RCC_OscConfig+0x46a>
 80011d8:	e035      	b.n	8001246 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <HAL_RCC_OscConfig+0x4cc>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e0:	f7ff fb30 	bl	8000844 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011e8:	f7ff fb2c 	bl	8000844 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e026      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f0      	bne.n	80011e8 <HAL_RCC_OscConfig+0x498>
 8001206:	e01e      	b.n	8001246 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d107      	bne.n	8001220 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e019      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
 8001214:	40021000 	.word	0x40021000
 8001218:	40007000 	.word	0x40007000
 800121c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HAL_RCC_OscConfig+0x500>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	429a      	cmp	r2, r3
 8001232:	d106      	bne.n	8001242 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800123e:	429a      	cmp	r2, r3
 8001240:	d001      	beq.n	8001246 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40021000 	.word	0x40021000

08001254 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e0d0      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001268:	4b6a      	ldr	r3, [pc, #424]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d910      	bls.n	8001298 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001276:	4b67      	ldr	r3, [pc, #412]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 0207 	bic.w	r2, r3, #7
 800127e:	4965      	ldr	r1, [pc, #404]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	4313      	orrs	r3, r2
 8001284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001286:	4b63      	ldr	r3, [pc, #396]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	d001      	beq.n	8001298 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e0b8      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d020      	beq.n	80012e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d005      	beq.n	80012bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012b0:	4b59      	ldr	r3, [pc, #356]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	4a58      	ldr	r2, [pc, #352]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012c8:	4b53      	ldr	r3, [pc, #332]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	4a52      	ldr	r2, [pc, #328]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012d4:	4b50      	ldr	r3, [pc, #320]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	494d      	ldr	r1, [pc, #308]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d040      	beq.n	8001374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d107      	bne.n	800130a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	4b47      	ldr	r3, [pc, #284]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d115      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e07f      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d107      	bne.n	8001322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001312:	4b41      	ldr	r3, [pc, #260]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d109      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e073      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001322:	4b3d      	ldr	r3, [pc, #244]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e06b      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001332:	4b39      	ldr	r3, [pc, #228]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f023 0203 	bic.w	r2, r3, #3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	4936      	ldr	r1, [pc, #216]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 8001340:	4313      	orrs	r3, r2
 8001342:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001344:	f7ff fa7e 	bl	8000844 <HAL_GetTick>
 8001348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800134a:	e00a      	b.n	8001362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800134c:	f7ff fa7a 	bl	8000844 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	f241 3288 	movw	r2, #5000	; 0x1388
 800135a:	4293      	cmp	r3, r2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e053      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001362:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 020c 	and.w	r2, r3, #12
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	429a      	cmp	r2, r3
 8001372:	d1eb      	bne.n	800134c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001374:	4b27      	ldr	r3, [pc, #156]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	d210      	bcs.n	80013a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001382:	4b24      	ldr	r3, [pc, #144]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f023 0207 	bic.w	r2, r3, #7
 800138a:	4922      	ldr	r1, [pc, #136]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	4313      	orrs	r3, r2
 8001390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d001      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e032      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	4916      	ldr	r1, [pc, #88]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d009      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	490e      	ldr	r1, [pc, #56]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013e2:	f000 f821 	bl	8001428 <HAL_RCC_GetSysClockFreq>
 80013e6:	4602      	mov	r2, r0
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	490a      	ldr	r1, [pc, #40]	; (800141c <HAL_RCC_ClockConfig+0x1c8>)
 80013f4:	5ccb      	ldrb	r3, [r1, r3]
 80013f6:	fa22 f303 	lsr.w	r3, r2, r3
 80013fa:	4a09      	ldr	r2, [pc, #36]	; (8001420 <HAL_RCC_ClockConfig+0x1cc>)
 80013fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_RCC_ClockConfig+0x1d0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f88c 	bl	8000520 <HAL_InitTick>

  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40022000 	.word	0x40022000
 8001418:	40021000 	.word	0x40021000
 800141c:	08003af8 	.word	0x08003af8
 8001420:	20000000 	.word	0x20000000
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001428:	b490      	push	{r4, r7}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800142e:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001430:	1d3c      	adds	r4, r7, #4
 8001432:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001434:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001438:	f240 2301 	movw	r3, #513	; 0x201
 800143c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001452:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	2b04      	cmp	r3, #4
 8001460:	d002      	beq.n	8001468 <HAL_RCC_GetSysClockFreq+0x40>
 8001462:	2b08      	cmp	r3, #8
 8001464:	d003      	beq.n	800146e <HAL_RCC_GetSysClockFreq+0x46>
 8001466:	e02b      	b.n	80014c0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001468:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800146a:	623b      	str	r3, [r7, #32]
      break;
 800146c:	e02b      	b.n	80014c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	0c9b      	lsrs	r3, r3, #18
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	3328      	adds	r3, #40	; 0x28
 8001478:	443b      	add	r3, r7
 800147a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800147e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d012      	beq.n	80014b0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800148a:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	0c5b      	lsrs	r3, r3, #17
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	3328      	adds	r3, #40	; 0x28
 8001496:	443b      	add	r3, r7
 8001498:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800149c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80014a2:	fb03 f202 	mul.w	r2, r3, r2
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
 80014ae:	e004      	b.n	80014ba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014b4:	fb02 f303 	mul.w	r3, r2, r3
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	623b      	str	r3, [r7, #32]
      break;
 80014be:	e002      	b.n	80014c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80014c2:	623b      	str	r3, [r7, #32]
      break;
 80014c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014c6:	6a3b      	ldr	r3, [r7, #32]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3728      	adds	r7, #40	; 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc90      	pop	{r4, r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	08003ae0 	.word	0x08003ae0
 80014d8:	40021000 	.word	0x40021000
 80014dc:	007a1200 	.word	0x007a1200
 80014e0:	003d0900 	.word	0x003d0900

080014e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014e8:	4b02      	ldr	r3, [pc, #8]	; (80014f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	20000000 	.word	0x20000000

080014f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014fc:	f7ff fff2 	bl	80014e4 <HAL_RCC_GetHCLKFreq>
 8001500:	4602      	mov	r2, r0
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	0a1b      	lsrs	r3, r3, #8
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	4903      	ldr	r1, [pc, #12]	; (800151c <HAL_RCC_GetPCLK1Freq+0x24>)
 800150e:	5ccb      	ldrb	r3, [r1, r3]
 8001510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001514:	4618      	mov	r0, r3
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021000 	.word	0x40021000
 800151c:	08003b08 	.word	0x08003b08

08001520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001524:	f7ff ffde 	bl	80014e4 <HAL_RCC_GetHCLKFreq>
 8001528:	4602      	mov	r2, r0
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	0adb      	lsrs	r3, r3, #11
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	4903      	ldr	r1, [pc, #12]	; (8001544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001536:	5ccb      	ldrb	r3, [r1, r3]
 8001538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800153c:	4618      	mov	r0, r3
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40021000 	.word	0x40021000
 8001544:	08003b08 	.word	0x08003b08

08001548 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	220f      	movs	r2, #15
 8001556:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_RCC_GetClockConfig+0x58>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0203 	and.w	r2, r3, #3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_RCC_GetClockConfig+0x58>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_RCC_GetClockConfig+0x58>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_RCC_GetClockConfig+0x58>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	08db      	lsrs	r3, r3, #3
 8001582:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_RCC_GetClockConfig+0x5c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0207 	and.w	r2, r3, #7
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40022000 	.word	0x40022000

080015a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <RCC_Delay+0x34>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <RCC_Delay+0x38>)
 80015b6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ba:	0a5b      	lsrs	r3, r3, #9
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015c4:	bf00      	nop
  }
  while (Delay --);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1e5a      	subs	r2, r3, #1
 80015ca:	60fa      	str	r2, [r7, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1f9      	bne.n	80015c4 <RCC_Delay+0x1c>
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	20000000 	.word	0x20000000
 80015e0:	10624dd3 	.word	0x10624dd3

080015e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e041      	b.n	800167a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d106      	bne.n	8001610 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f839 	bl	8001682 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2202      	movs	r2, #2
 8001614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3304      	adds	r3, #4
 8001620:	4619      	mov	r1, r3
 8001622:	4610      	mov	r0, r2
 8001624:	f000 f9b4 	bl	8001990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d001      	beq.n	80016ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e03a      	b.n	8001722 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2202      	movs	r2, #2
 80016b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0201 	orr.w	r2, r2, #1
 80016c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a18      	ldr	r2, [pc, #96]	; (800172c <HAL_TIM_Base_Start_IT+0x98>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d00e      	beq.n	80016ec <HAL_TIM_Base_Start_IT+0x58>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d6:	d009      	beq.n	80016ec <HAL_TIM_Base_Start_IT+0x58>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a14      	ldr	r2, [pc, #80]	; (8001730 <HAL_TIM_Base_Start_IT+0x9c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d004      	beq.n	80016ec <HAL_TIM_Base_Start_IT+0x58>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a13      	ldr	r2, [pc, #76]	; (8001734 <HAL_TIM_Base_Start_IT+0xa0>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d111      	bne.n	8001710 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d010      	beq.n	8001720 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f042 0201 	orr.w	r2, r2, #1
 800170c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800170e:	e007      	b.n	8001720 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0201 	orr.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	40012c00 	.word	0x40012c00
 8001730:	40000400 	.word	0x40000400
 8001734:	40000800 	.word	0x40000800

08001738 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b02      	cmp	r3, #2
 800174c:	d122      	bne.n	8001794 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b02      	cmp	r3, #2
 800175a:	d11b      	bne.n	8001794 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f06f 0202 	mvn.w	r2, #2
 8001764:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f8ed 	bl	800195a <HAL_TIM_IC_CaptureCallback>
 8001780:	e005      	b.n	800178e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f8e0 	bl	8001948 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f8ef 	bl	800196c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d122      	bne.n	80017e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d11b      	bne.n	80017e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f06f 0204 	mvn.w	r2, #4
 80017b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2202      	movs	r2, #2
 80017be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f8c3 	bl	800195a <HAL_TIM_IC_CaptureCallback>
 80017d4:	e005      	b.n	80017e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 f8b6 	bl	8001948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 f8c5 	bl	800196c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d122      	bne.n	800183c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b08      	cmp	r3, #8
 8001802:	d11b      	bne.n	800183c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f06f 0208 	mvn.w	r2, #8
 800180c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2204      	movs	r2, #4
 8001812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f899 	bl	800195a <HAL_TIM_IC_CaptureCallback>
 8001828:	e005      	b.n	8001836 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f88c 	bl	8001948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f89b 	bl	800196c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	f003 0310 	and.w	r3, r3, #16
 8001846:	2b10      	cmp	r3, #16
 8001848:	d122      	bne.n	8001890 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f003 0310 	and.w	r3, r3, #16
 8001854:	2b10      	cmp	r3, #16
 8001856:	d11b      	bne.n	8001890 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f06f 0210 	mvn.w	r2, #16
 8001860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2208      	movs	r2, #8
 8001866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f86f 	bl	800195a <HAL_TIM_IC_CaptureCallback>
 800187c:	e005      	b.n	800188a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f862 	bl	8001948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 f871 	bl	800196c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b01      	cmp	r3, #1
 800189c:	d10e      	bne.n	80018bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d107      	bne.n	80018bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f06f 0201 	mvn.w	r2, #1
 80018b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7fe fda8 	bl	800040c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c6:	2b80      	cmp	r3, #128	; 0x80
 80018c8:	d10e      	bne.n	80018e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d4:	2b80      	cmp	r3, #128	; 0x80
 80018d6:	d107      	bne.n	80018e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f8bf 	bl	8001a66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f2:	2b40      	cmp	r3, #64	; 0x40
 80018f4:	d10e      	bne.n	8001914 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001900:	2b40      	cmp	r3, #64	; 0x40
 8001902:	d107      	bne.n	8001914 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800190c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f835 	bl	800197e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	f003 0320 	and.w	r3, r3, #32
 800191e:	2b20      	cmp	r3, #32
 8001920:	d10e      	bne.n	8001940 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f003 0320 	and.w	r3, r3, #32
 800192c:	2b20      	cmp	r3, #32
 800192e:	d107      	bne.n	8001940 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f06f 0220 	mvn.w	r2, #32
 8001938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f88a 	bl	8001a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr

0800197e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a29      	ldr	r2, [pc, #164]	; (8001a48 <TIM_Base_SetConfig+0xb8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d00b      	beq.n	80019c0 <TIM_Base_SetConfig+0x30>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ae:	d007      	beq.n	80019c0 <TIM_Base_SetConfig+0x30>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a26      	ldr	r2, [pc, #152]	; (8001a4c <TIM_Base_SetConfig+0xbc>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d003      	beq.n	80019c0 <TIM_Base_SetConfig+0x30>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a25      	ldr	r2, [pc, #148]	; (8001a50 <TIM_Base_SetConfig+0xc0>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d108      	bne.n	80019d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a1c      	ldr	r2, [pc, #112]	; (8001a48 <TIM_Base_SetConfig+0xb8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d00b      	beq.n	80019f2 <TIM_Base_SetConfig+0x62>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e0:	d007      	beq.n	80019f2 <TIM_Base_SetConfig+0x62>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a19      	ldr	r2, [pc, #100]	; (8001a4c <TIM_Base_SetConfig+0xbc>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d003      	beq.n	80019f2 <TIM_Base_SetConfig+0x62>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a18      	ldr	r2, [pc, #96]	; (8001a50 <TIM_Base_SetConfig+0xc0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d108      	bne.n	8001a04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a07      	ldr	r2, [pc, #28]	; (8001a48 <TIM_Base_SetConfig+0xb8>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d103      	bne.n	8001a38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	691a      	ldr	r2, [r3, #16]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	615a      	str	r2, [r3, #20]
}
 8001a3e:	bf00      	nop
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr
 8001a48:	40012c00 	.word	0x40012c00
 8001a4c:	40000400 	.word	0x40000400
 8001a50:	40000800 	.word	0x40000800

08001a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr

08001a66 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e03f      	b.n	8001b0a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d106      	bne.n	8001aa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7fe fcf4 	bl	800048c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2224      	movs	r2, #36	; 0x24
 8001aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001aba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f829 	bl	8001b14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	691a      	ldr	r2, [r3, #16]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ad0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	695a      	ldr	r2, [r3, #20]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ae0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68da      	ldr	r2, [r3, #12]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001af0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2220      	movs	r2, #32
 8001afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2220      	movs	r2, #32
 8001b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001b4e:	f023 030c 	bic.w	r3, r3, #12
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6812      	ldr	r2, [r2, #0]
 8001b56:	68b9      	ldr	r1, [r7, #8]
 8001b58:	430b      	orrs	r3, r1
 8001b5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	699a      	ldr	r2, [r3, #24]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a2c      	ldr	r2, [pc, #176]	; (8001c28 <UART_SetConfig+0x114>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d103      	bne.n	8001b84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001b7c:	f7ff fcd0 	bl	8001520 <HAL_RCC_GetPCLK2Freq>
 8001b80:	60f8      	str	r0, [r7, #12]
 8001b82:	e002      	b.n	8001b8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001b84:	f7ff fcb8 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 8001b88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	009a      	lsls	r2, r3, #2
 8001b94:	441a      	add	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba0:	4a22      	ldr	r2, [pc, #136]	; (8001c2c <UART_SetConfig+0x118>)
 8001ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba6:	095b      	lsrs	r3, r3, #5
 8001ba8:	0119      	lsls	r1, r3, #4
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	009a      	lsls	r2, r3, #2
 8001bb4:	441a      	add	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bc0:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <UART_SetConfig+0x118>)
 8001bc2:	fba3 0302 	umull	r0, r3, r3, r2
 8001bc6:	095b      	lsrs	r3, r3, #5
 8001bc8:	2064      	movs	r0, #100	; 0x64
 8001bca:	fb00 f303 	mul.w	r3, r0, r3
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	011b      	lsls	r3, r3, #4
 8001bd2:	3332      	adds	r3, #50	; 0x32
 8001bd4:	4a15      	ldr	r2, [pc, #84]	; (8001c2c <UART_SetConfig+0x118>)
 8001bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bda:	095b      	lsrs	r3, r3, #5
 8001bdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001be0:	4419      	add	r1, r3
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	009a      	lsls	r2, r3, #2
 8001bec:	441a      	add	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <UART_SetConfig+0x118>)
 8001bfa:	fba3 0302 	umull	r0, r3, r3, r2
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2064      	movs	r0, #100	; 0x64
 8001c02:	fb00 f303 	mul.w	r3, r0, r3
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	3332      	adds	r3, #50	; 0x32
 8001c0c:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <UART_SetConfig+0x118>)
 8001c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c12:	095b      	lsrs	r3, r3, #5
 8001c14:	f003 020f 	and.w	r2, r3, #15
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	440a      	add	r2, r1
 8001c1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001c20:	bf00      	nop
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40013800 	.word	0x40013800
 8001c2c:	51eb851f 	.word	0x51eb851f

08001c30 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001c34:	f000 fa88 	bl	8002148 <vTaskStartScheduler>
  
  return osOK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f103 0208 	add.w	r2, r3, #8
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f04f 32ff 	mov.w	r2, #4294967295
 8001c56:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f103 0208 	add.w	r2, r3, #8
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f103 0208 	add.w	r2, r3, #8
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	601a      	str	r2, [r3, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr

08001cda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b085      	sub	sp, #20
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf0:	d103      	bne.n	8001cfa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	e00c      	b.n	8001d14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3308      	adds	r3, #8
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	e002      	b.n	8001d08 <vListInsert+0x2e>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d2f6      	bcs.n	8001d02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	601a      	str	r2, [r3, #0]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b085      	sub	sp, #20
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6892      	ldr	r2, [r2, #8]
 8001d60:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6852      	ldr	r2, [r2, #4]
 8001d6a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d103      	bne.n	8001d7e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	1e5a      	subs	r2, r3, #1
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08e      	sub	sp, #56	; 0x38
 8001da0:	af04      	add	r7, sp, #16
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10a      	bne.n	8001dc6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8001db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db4:	f383 8811 	msr	BASEPRI, r3
 8001db8:	f3bf 8f6f 	isb	sy
 8001dbc:	f3bf 8f4f 	dsb	sy
 8001dc0:	623b      	str	r3, [r7, #32]
}
 8001dc2:	bf00      	nop
 8001dc4:	e7fe      	b.n	8001dc4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10a      	bne.n	8001de2 <xTaskCreateStatic+0x46>
	__asm volatile
 8001dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dd0:	f383 8811 	msr	BASEPRI, r3
 8001dd4:	f3bf 8f6f 	isb	sy
 8001dd8:	f3bf 8f4f 	dsb	sy
 8001ddc:	61fb      	str	r3, [r7, #28]
}
 8001dde:	bf00      	nop
 8001de0:	e7fe      	b.n	8001de0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001de2:	23b4      	movs	r3, #180	; 0xb4
 8001de4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	2bb4      	cmp	r3, #180	; 0xb4
 8001dea:	d00a      	beq.n	8001e02 <xTaskCreateStatic+0x66>
	__asm volatile
 8001dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df0:	f383 8811 	msr	BASEPRI, r3
 8001df4:	f3bf 8f6f 	isb	sy
 8001df8:	f3bf 8f4f 	dsb	sy
 8001dfc:	61bb      	str	r3, [r7, #24]
}
 8001dfe:	bf00      	nop
 8001e00:	e7fe      	b.n	8001e00 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d01e      	beq.n	8001e46 <xTaskCreateStatic+0xaa>
 8001e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d01b      	beq.n	8001e46 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e16:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001e20:	2300      	movs	r3, #0
 8001e22:	9303      	str	r3, [sp, #12]
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	9302      	str	r3, [sp, #8]
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	9301      	str	r3, [sp, #4]
 8001e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	68b9      	ldr	r1, [r7, #8]
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f000 f851 	bl	8001ee0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001e3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e40:	f000 f8e4 	bl	800200c <prvAddNewTaskToReadyList>
 8001e44:	e001      	b.n	8001e4a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001e4a:	697b      	ldr	r3, [r7, #20]
	}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3728      	adds	r7, #40	; 0x28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08c      	sub	sp, #48	; 0x30
 8001e58:	af04      	add	r7, sp, #16
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	4613      	mov	r3, r2
 8001e62:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e64:	88fb      	ldrh	r3, [r7, #6]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 fe99 	bl	8002ba0 <pvPortMalloc>
 8001e6e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00e      	beq.n	8001e94 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001e76:	20b4      	movs	r0, #180	; 0xb4
 8001e78:	f000 fe92 	bl	8002ba0 <pvPortMalloc>
 8001e7c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	631a      	str	r2, [r3, #48]	; 0x30
 8001e8a:	e005      	b.n	8001e98 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001e8c:	6978      	ldr	r0, [r7, #20]
 8001e8e:	f000 ff4b 	bl	8002d28 <vPortFree>
 8001e92:	e001      	b.n	8001e98 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d017      	beq.n	8001ece <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001ea6:	88fa      	ldrh	r2, [r7, #6]
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	9303      	str	r3, [sp, #12]
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	9302      	str	r3, [sp, #8]
 8001eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb2:	9301      	str	r3, [sp, #4]
 8001eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68b9      	ldr	r1, [r7, #8]
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 f80f 	bl	8001ee0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001ec2:	69f8      	ldr	r0, [r7, #28]
 8001ec4:	f000 f8a2 	bl	800200c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	61bb      	str	r3, [r7, #24]
 8001ecc:	e002      	b.n	8001ed4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001ed4:	69bb      	ldr	r3, [r7, #24]
	}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3720      	adds	r7, #32
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
 8001eec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	f023 0307 	bic.w	r3, r3, #7
 8001f06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00a      	beq.n	8001f28 <prvInitialiseNewTask+0x48>
	__asm volatile
 8001f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f16:	f383 8811 	msr	BASEPRI, r3
 8001f1a:	f3bf 8f6f 	isb	sy
 8001f1e:	f3bf 8f4f 	dsb	sy
 8001f22:	617b      	str	r3, [r7, #20]
}
 8001f24:	bf00      	nop
 8001f26:	e7fe      	b.n	8001f26 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61fb      	str	r3, [r7, #28]
 8001f2c:	e012      	b.n	8001f54 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	4413      	add	r3, r2
 8001f34:	7819      	ldrb	r1, [r3, #0]
 8001f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3334      	adds	r3, #52	; 0x34
 8001f3e:	460a      	mov	r2, r1
 8001f40:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	4413      	add	r3, r2
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d006      	beq.n	8001f5c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3301      	adds	r3, #1
 8001f52:	61fb      	str	r3, [r7, #28]
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	2b0f      	cmp	r3, #15
 8001f58:	d9e9      	bls.n	8001f2e <prvInitialiseNewTask+0x4e>
 8001f5a:	e000      	b.n	8001f5e <prvInitialiseNewTask+0x7e>
		{
			break;
 8001f5c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f68:	2b06      	cmp	r3, #6
 8001f6a:	d901      	bls.n	8001f70 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001f6c:	2306      	movs	r3, #6
 8001f6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f7a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f7e:	2200      	movs	r2, #0
 8001f80:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f84:	3304      	adds	r3, #4
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fe78 	bl	8001c7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8e:	3318      	adds	r3, #24
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff fe73 	bl	8001c7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9e:	f1c3 0207 	rsb	r2, r3, #7
 8001fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001faa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbe:	334c      	adds	r3, #76	; 0x4c
 8001fc0:	2260      	movs	r2, #96	; 0x60
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f001 f8e6 	bl	8003196 <memset>
 8001fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fcc:	4a0c      	ldr	r2, [pc, #48]	; (8002000 <prvInitialiseNewTask+0x120>)
 8001fce:	651a      	str	r2, [r3, #80]	; 0x50
 8001fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd2:	4a0c      	ldr	r2, [pc, #48]	; (8002004 <prvInitialiseNewTask+0x124>)
 8001fd4:	655a      	str	r2, [r3, #84]	; 0x54
 8001fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd8:	4a0b      	ldr	r2, [pc, #44]	; (8002008 <prvInitialiseNewTask+0x128>)
 8001fda:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	68f9      	ldr	r1, [r7, #12]
 8001fe0:	69b8      	ldr	r0, [r7, #24]
 8001fe2:	f000 fc29 	bl	8002838 <pxPortInitialiseStack>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fea:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ff6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001ff8:	bf00      	nop
 8001ffa:	3720      	adds	r7, #32
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	08003b30 	.word	0x08003b30
 8002004:	08003b50 	.word	0x08003b50
 8002008:	08003b10 	.word	0x08003b10

0800200c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002014:	f000 fd02 	bl	8002a1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002018:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <prvAddNewTaskToReadyList+0xb8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	3301      	adds	r3, #1
 800201e:	4a29      	ldr	r2, [pc, #164]	; (80020c4 <prvAddNewTaskToReadyList+0xb8>)
 8002020:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002022:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <prvAddNewTaskToReadyList+0xbc>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d109      	bne.n	800203e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800202a:	4a27      	ldr	r2, [pc, #156]	; (80020c8 <prvAddNewTaskToReadyList+0xbc>)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002030:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <prvAddNewTaskToReadyList+0xb8>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d110      	bne.n	800205a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002038:	f000 fad2 	bl	80025e0 <prvInitialiseTaskLists>
 800203c:	e00d      	b.n	800205a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800203e:	4b23      	ldr	r3, [pc, #140]	; (80020cc <prvAddNewTaskToReadyList+0xc0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d109      	bne.n	800205a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002046:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <prvAddNewTaskToReadyList+0xbc>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002050:	429a      	cmp	r2, r3
 8002052:	d802      	bhi.n	800205a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002054:	4a1c      	ldr	r2, [pc, #112]	; (80020c8 <prvAddNewTaskToReadyList+0xbc>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800205a:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <prvAddNewTaskToReadyList+0xc4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	3301      	adds	r3, #1
 8002060:	4a1b      	ldr	r2, [pc, #108]	; (80020d0 <prvAddNewTaskToReadyList+0xc4>)
 8002062:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	2201      	movs	r2, #1
 800206a:	409a      	lsls	r2, r3
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <prvAddNewTaskToReadyList+0xc8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4313      	orrs	r3, r2
 8002072:	4a18      	ldr	r2, [pc, #96]	; (80020d4 <prvAddNewTaskToReadyList+0xc8>)
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4a15      	ldr	r2, [pc, #84]	; (80020d8 <prvAddNewTaskToReadyList+0xcc>)
 8002084:	441a      	add	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3304      	adds	r3, #4
 800208a:	4619      	mov	r1, r3
 800208c:	4610      	mov	r0, r2
 800208e:	f7ff fe01 	bl	8001c94 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002092:	f000 fcf3 	bl	8002a7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002096:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <prvAddNewTaskToReadyList+0xc0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00e      	beq.n	80020bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <prvAddNewTaskToReadyList+0xbc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d207      	bcs.n	80020bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80020ac:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <prvAddNewTaskToReadyList+0xd0>)
 80020ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	f3bf 8f4f 	dsb	sy
 80020b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	200004d8 	.word	0x200004d8
 80020c8:	200003d8 	.word	0x200003d8
 80020cc:	200004e4 	.word	0x200004e4
 80020d0:	200004f4 	.word	0x200004f4
 80020d4:	200004e0 	.word	0x200004e0
 80020d8:	200003dc 	.word	0x200003dc
 80020dc:	e000ed04 	.word	0xe000ed04

080020e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d017      	beq.n	8002122 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80020f2:	4b13      	ldr	r3, [pc, #76]	; (8002140 <vTaskDelay+0x60>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00a      	beq.n	8002110 <vTaskDelay+0x30>
	__asm volatile
 80020fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020fe:	f383 8811 	msr	BASEPRI, r3
 8002102:	f3bf 8f6f 	isb	sy
 8002106:	f3bf 8f4f 	dsb	sy
 800210a:	60bb      	str	r3, [r7, #8]
}
 800210c:	bf00      	nop
 800210e:	e7fe      	b.n	800210e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002110:	f000 f884 	bl	800221c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002114:	2100      	movs	r1, #0
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 fb28 	bl	800276c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800211c:	f000 f88c 	bl	8002238 <xTaskResumeAll>
 8002120:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d107      	bne.n	8002138 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <vTaskDelay+0x64>)
 800212a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	f3bf 8f4f 	dsb	sy
 8002134:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002138:	bf00      	nop
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20000500 	.word	0x20000500
 8002144:	e000ed04 	.word	0xe000ed04

08002148 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	; 0x28
 800214c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002152:	2300      	movs	r3, #0
 8002154:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002156:	463a      	mov	r2, r7
 8002158:	1d39      	adds	r1, r7, #4
 800215a:	f107 0308 	add.w	r3, r7, #8
 800215e:	4618      	mov	r0, r3
 8002160:	f7fd fff6 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002164:	6839      	ldr	r1, [r7, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	9202      	str	r2, [sp, #8]
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	2300      	movs	r3, #0
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	2300      	movs	r3, #0
 8002174:	460a      	mov	r2, r1
 8002176:	4921      	ldr	r1, [pc, #132]	; (80021fc <vTaskStartScheduler+0xb4>)
 8002178:	4821      	ldr	r0, [pc, #132]	; (8002200 <vTaskStartScheduler+0xb8>)
 800217a:	f7ff fe0f 	bl	8001d9c <xTaskCreateStatic>
 800217e:	4603      	mov	r3, r0
 8002180:	4a20      	ldr	r2, [pc, #128]	; (8002204 <vTaskStartScheduler+0xbc>)
 8002182:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002184:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <vTaskStartScheduler+0xbc>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800218c:	2301      	movs	r3, #1
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	e001      	b.n	8002196 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d11b      	bne.n	80021d4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800219c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a0:	f383 8811 	msr	BASEPRI, r3
 80021a4:	f3bf 8f6f 	isb	sy
 80021a8:	f3bf 8f4f 	dsb	sy
 80021ac:	613b      	str	r3, [r7, #16]
}
 80021ae:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80021b0:	4b15      	ldr	r3, [pc, #84]	; (8002208 <vTaskStartScheduler+0xc0>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	334c      	adds	r3, #76	; 0x4c
 80021b6:	4a15      	ldr	r2, [pc, #84]	; (800220c <vTaskStartScheduler+0xc4>)
 80021b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80021ba:	4b15      	ldr	r3, [pc, #84]	; (8002210 <vTaskStartScheduler+0xc8>)
 80021bc:	f04f 32ff 	mov.w	r2, #4294967295
 80021c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80021c2:	4b14      	ldr	r3, [pc, #80]	; (8002214 <vTaskStartScheduler+0xcc>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80021c8:	4b13      	ldr	r3, [pc, #76]	; (8002218 <vTaskStartScheduler+0xd0>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80021ce:	f000 fbb3 	bl	8002938 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80021d2:	e00e      	b.n	80021f2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021da:	d10a      	bne.n	80021f2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80021dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e0:	f383 8811 	msr	BASEPRI, r3
 80021e4:	f3bf 8f6f 	isb	sy
 80021e8:	f3bf 8f4f 	dsb	sy
 80021ec:	60fb      	str	r3, [r7, #12]
}
 80021ee:	bf00      	nop
 80021f0:	e7fe      	b.n	80021f0 <vTaskStartScheduler+0xa8>
}
 80021f2:	bf00      	nop
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	08003af0 	.word	0x08003af0
 8002200:	080025b1 	.word	0x080025b1
 8002204:	200004fc 	.word	0x200004fc
 8002208:	200003d8 	.word	0x200003d8
 800220c:	20000010 	.word	0x20000010
 8002210:	200004f8 	.word	0x200004f8
 8002214:	200004e4 	.word	0x200004e4
 8002218:	200004dc 	.word	0x200004dc

0800221c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002220:	4b04      	ldr	r3, [pc, #16]	; (8002234 <vTaskSuspendAll+0x18>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	3301      	adds	r3, #1
 8002226:	4a03      	ldr	r2, [pc, #12]	; (8002234 <vTaskSuspendAll+0x18>)
 8002228:	6013      	str	r3, [r2, #0]
}
 800222a:	bf00      	nop
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	20000500 	.word	0x20000500

08002238 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002246:	4b41      	ldr	r3, [pc, #260]	; (800234c <xTaskResumeAll+0x114>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10a      	bne.n	8002264 <xTaskResumeAll+0x2c>
	__asm volatile
 800224e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002252:	f383 8811 	msr	BASEPRI, r3
 8002256:	f3bf 8f6f 	isb	sy
 800225a:	f3bf 8f4f 	dsb	sy
 800225e:	603b      	str	r3, [r7, #0]
}
 8002260:	bf00      	nop
 8002262:	e7fe      	b.n	8002262 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002264:	f000 fbda 	bl	8002a1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002268:	4b38      	ldr	r3, [pc, #224]	; (800234c <xTaskResumeAll+0x114>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	3b01      	subs	r3, #1
 800226e:	4a37      	ldr	r2, [pc, #220]	; (800234c <xTaskResumeAll+0x114>)
 8002270:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002272:	4b36      	ldr	r3, [pc, #216]	; (800234c <xTaskResumeAll+0x114>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d161      	bne.n	800233e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800227a:	4b35      	ldr	r3, [pc, #212]	; (8002350 <xTaskResumeAll+0x118>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d05d      	beq.n	800233e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002282:	e02e      	b.n	80022e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002284:	4b33      	ldr	r3, [pc, #204]	; (8002354 <xTaskResumeAll+0x11c>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	3318      	adds	r3, #24
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fd5a 	bl	8001d4a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	3304      	adds	r3, #4
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fd55 	bl	8001d4a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	2201      	movs	r2, #1
 80022a6:	409a      	lsls	r2, r3
 80022a8:	4b2b      	ldr	r3, [pc, #172]	; (8002358 <xTaskResumeAll+0x120>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	4a2a      	ldr	r2, [pc, #168]	; (8002358 <xTaskResumeAll+0x120>)
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4a27      	ldr	r2, [pc, #156]	; (800235c <xTaskResumeAll+0x124>)
 80022c0:	441a      	add	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	3304      	adds	r3, #4
 80022c6:	4619      	mov	r1, r3
 80022c8:	4610      	mov	r0, r2
 80022ca:	f7ff fce3 	bl	8001c94 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d2:	4b23      	ldr	r3, [pc, #140]	; (8002360 <xTaskResumeAll+0x128>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d8:	429a      	cmp	r2, r3
 80022da:	d302      	bcc.n	80022e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80022dc:	4b21      	ldr	r3, [pc, #132]	; (8002364 <xTaskResumeAll+0x12c>)
 80022de:	2201      	movs	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80022e2:	4b1c      	ldr	r3, [pc, #112]	; (8002354 <xTaskResumeAll+0x11c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1cc      	bne.n	8002284 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80022f0:	f000 fa18 	bl	8002724 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80022f4:	4b1c      	ldr	r3, [pc, #112]	; (8002368 <xTaskResumeAll+0x130>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d010      	beq.n	8002322 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002300:	f000 f836 	bl	8002370 <xTaskIncrementTick>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800230a:	4b16      	ldr	r3, [pc, #88]	; (8002364 <xTaskResumeAll+0x12c>)
 800230c:	2201      	movs	r2, #1
 800230e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3b01      	subs	r3, #1
 8002314:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f1      	bne.n	8002300 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800231c:	4b12      	ldr	r3, [pc, #72]	; (8002368 <xTaskResumeAll+0x130>)
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <xTaskResumeAll+0x12c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d009      	beq.n	800233e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800232a:	2301      	movs	r3, #1
 800232c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800232e:	4b0f      	ldr	r3, [pc, #60]	; (800236c <xTaskResumeAll+0x134>)
 8002330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	f3bf 8f4f 	dsb	sy
 800233a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800233e:	f000 fb9d 	bl	8002a7c <vPortExitCritical>

	return xAlreadyYielded;
 8002342:	68bb      	ldr	r3, [r7, #8]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000500 	.word	0x20000500
 8002350:	200004d8 	.word	0x200004d8
 8002354:	20000498 	.word	0x20000498
 8002358:	200004e0 	.word	0x200004e0
 800235c:	200003dc 	.word	0x200003dc
 8002360:	200003d8 	.word	0x200003d8
 8002364:	200004ec 	.word	0x200004ec
 8002368:	200004e8 	.word	0x200004e8
 800236c:	e000ed04 	.word	0xe000ed04

08002370 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800237a:	4b51      	ldr	r3, [pc, #324]	; (80024c0 <xTaskIncrementTick+0x150>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	f040 808d 	bne.w	800249e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002384:	4b4f      	ldr	r3, [pc, #316]	; (80024c4 <xTaskIncrementTick+0x154>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	3301      	adds	r3, #1
 800238a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800238c:	4a4d      	ldr	r2, [pc, #308]	; (80024c4 <xTaskIncrementTick+0x154>)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d120      	bne.n	80023da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002398:	4b4b      	ldr	r3, [pc, #300]	; (80024c8 <xTaskIncrementTick+0x158>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00a      	beq.n	80023b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80023a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a6:	f383 8811 	msr	BASEPRI, r3
 80023aa:	f3bf 8f6f 	isb	sy
 80023ae:	f3bf 8f4f 	dsb	sy
 80023b2:	603b      	str	r3, [r7, #0]
}
 80023b4:	bf00      	nop
 80023b6:	e7fe      	b.n	80023b6 <xTaskIncrementTick+0x46>
 80023b8:	4b43      	ldr	r3, [pc, #268]	; (80024c8 <xTaskIncrementTick+0x158>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	4b43      	ldr	r3, [pc, #268]	; (80024cc <xTaskIncrementTick+0x15c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a41      	ldr	r2, [pc, #260]	; (80024c8 <xTaskIncrementTick+0x158>)
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	4a41      	ldr	r2, [pc, #260]	; (80024cc <xTaskIncrementTick+0x15c>)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	4b40      	ldr	r3, [pc, #256]	; (80024d0 <xTaskIncrementTick+0x160>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	3301      	adds	r3, #1
 80023d2:	4a3f      	ldr	r2, [pc, #252]	; (80024d0 <xTaskIncrementTick+0x160>)
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	f000 f9a5 	bl	8002724 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80023da:	4b3e      	ldr	r3, [pc, #248]	; (80024d4 <xTaskIncrementTick+0x164>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d34d      	bcc.n	8002480 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023e4:	4b38      	ldr	r3, [pc, #224]	; (80024c8 <xTaskIncrementTick+0x158>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <xTaskIncrementTick+0x82>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <xTaskIncrementTick+0x84>
 80023f2:	2300      	movs	r3, #0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d004      	beq.n	8002402 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023f8:	4b36      	ldr	r3, [pc, #216]	; (80024d4 <xTaskIncrementTick+0x164>)
 80023fa:	f04f 32ff 	mov.w	r2, #4294967295
 80023fe:	601a      	str	r2, [r3, #0]
					break;
 8002400:	e03e      	b.n	8002480 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002402:	4b31      	ldr	r3, [pc, #196]	; (80024c8 <xTaskIncrementTick+0x158>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	429a      	cmp	r2, r3
 8002418:	d203      	bcs.n	8002422 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800241a:	4a2e      	ldr	r2, [pc, #184]	; (80024d4 <xTaskIncrementTick+0x164>)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6013      	str	r3, [r2, #0]
						break;
 8002420:	e02e      	b.n	8002480 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	3304      	adds	r3, #4
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fc8f 	bl	8001d4a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002430:	2b00      	cmp	r3, #0
 8002432:	d004      	beq.n	800243e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	3318      	adds	r3, #24
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fc86 	bl	8001d4a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002442:	2201      	movs	r2, #1
 8002444:	409a      	lsls	r2, r3
 8002446:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <xTaskIncrementTick+0x168>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4313      	orrs	r3, r2
 800244c:	4a22      	ldr	r2, [pc, #136]	; (80024d8 <xTaskIncrementTick+0x168>)
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4a1f      	ldr	r2, [pc, #124]	; (80024dc <xTaskIncrementTick+0x16c>)
 800245e:	441a      	add	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	3304      	adds	r3, #4
 8002464:	4619      	mov	r1, r3
 8002466:	4610      	mov	r0, r2
 8002468:	f7ff fc14 	bl	8001c94 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002470:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <xTaskIncrementTick+0x170>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	429a      	cmp	r2, r3
 8002478:	d3b4      	bcc.n	80023e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800247a:	2301      	movs	r3, #1
 800247c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800247e:	e7b1      	b.n	80023e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002480:	4b17      	ldr	r3, [pc, #92]	; (80024e0 <xTaskIncrementTick+0x170>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002486:	4915      	ldr	r1, [pc, #84]	; (80024dc <xTaskIncrementTick+0x16c>)
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d907      	bls.n	80024a8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002498:	2301      	movs	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	e004      	b.n	80024a8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800249e:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <xTaskIncrementTick+0x174>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	3301      	adds	r3, #1
 80024a4:	4a0f      	ldr	r2, [pc, #60]	; (80024e4 <xTaskIncrementTick+0x174>)
 80024a6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80024a8:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <xTaskIncrementTick+0x178>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80024b0:	2301      	movs	r3, #1
 80024b2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80024b4:	697b      	ldr	r3, [r7, #20]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000500 	.word	0x20000500
 80024c4:	200004dc 	.word	0x200004dc
 80024c8:	20000490 	.word	0x20000490
 80024cc:	20000494 	.word	0x20000494
 80024d0:	200004f0 	.word	0x200004f0
 80024d4:	200004f8 	.word	0x200004f8
 80024d8:	200004e0 	.word	0x200004e0
 80024dc:	200003dc 	.word	0x200003dc
 80024e0:	200003d8 	.word	0x200003d8
 80024e4:	200004e8 	.word	0x200004e8
 80024e8:	200004ec 	.word	0x200004ec

080024ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80024ec:	b480      	push	{r7}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80024f2:	4b29      	ldr	r3, [pc, #164]	; (8002598 <vTaskSwitchContext+0xac>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80024fa:	4b28      	ldr	r3, [pc, #160]	; (800259c <vTaskSwitchContext+0xb0>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002500:	e044      	b.n	800258c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8002502:	4b26      	ldr	r3, [pc, #152]	; (800259c <vTaskSwitchContext+0xb0>)
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002508:	4b25      	ldr	r3, [pc, #148]	; (80025a0 <vTaskSwitchContext+0xb4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	fab3 f383 	clz	r3, r3
 8002514:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002516:	7afb      	ldrb	r3, [r7, #11]
 8002518:	f1c3 031f 	rsb	r3, r3, #31
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	4921      	ldr	r1, [pc, #132]	; (80025a4 <vTaskSwitchContext+0xb8>)
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10a      	bne.n	8002548 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002536:	f383 8811 	msr	BASEPRI, r3
 800253a:	f3bf 8f6f 	isb	sy
 800253e:	f3bf 8f4f 	dsb	sy
 8002542:	607b      	str	r3, [r7, #4]
}
 8002544:	bf00      	nop
 8002546:	e7fe      	b.n	8002546 <vTaskSwitchContext+0x5a>
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4a14      	ldr	r2, [pc, #80]	; (80025a4 <vTaskSwitchContext+0xb8>)
 8002554:	4413      	add	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	3308      	adds	r3, #8
 800256a:	429a      	cmp	r2, r3
 800256c:	d104      	bne.n	8002578 <vTaskSwitchContext+0x8c>
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	605a      	str	r2, [r3, #4]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <vTaskSwitchContext+0xbc>)
 8002580:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <vTaskSwitchContext+0xbc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	334c      	adds	r3, #76	; 0x4c
 8002588:	4a08      	ldr	r2, [pc, #32]	; (80025ac <vTaskSwitchContext+0xc0>)
 800258a:	6013      	str	r3, [r2, #0]
}
 800258c:	bf00      	nop
 800258e:	371c      	adds	r7, #28
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	20000500 	.word	0x20000500
 800259c:	200004ec 	.word	0x200004ec
 80025a0:	200004e0 	.word	0x200004e0
 80025a4:	200003dc 	.word	0x200003dc
 80025a8:	200003d8 	.word	0x200003d8
 80025ac:	20000010 	.word	0x20000010

080025b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80025b8:	f000 f852 	bl	8002660 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <prvIdleTask+0x28>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d9f9      	bls.n	80025b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80025c4:	4b05      	ldr	r3, [pc, #20]	; (80025dc <prvIdleTask+0x2c>)
 80025c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	f3bf 8f4f 	dsb	sy
 80025d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80025d4:	e7f0      	b.n	80025b8 <prvIdleTask+0x8>
 80025d6:	bf00      	nop
 80025d8:	200003dc 	.word	0x200003dc
 80025dc:	e000ed04 	.word	0xe000ed04

080025e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80025e6:	2300      	movs	r3, #0
 80025e8:	607b      	str	r3, [r7, #4]
 80025ea:	e00c      	b.n	8002606 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4a12      	ldr	r2, [pc, #72]	; (8002640 <prvInitialiseTaskLists+0x60>)
 80025f8:	4413      	add	r3, r2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fb1f 	bl	8001c3e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3301      	adds	r3, #1
 8002604:	607b      	str	r3, [r7, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b06      	cmp	r3, #6
 800260a:	d9ef      	bls.n	80025ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800260c:	480d      	ldr	r0, [pc, #52]	; (8002644 <prvInitialiseTaskLists+0x64>)
 800260e:	f7ff fb16 	bl	8001c3e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002612:	480d      	ldr	r0, [pc, #52]	; (8002648 <prvInitialiseTaskLists+0x68>)
 8002614:	f7ff fb13 	bl	8001c3e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002618:	480c      	ldr	r0, [pc, #48]	; (800264c <prvInitialiseTaskLists+0x6c>)
 800261a:	f7ff fb10 	bl	8001c3e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800261e:	480c      	ldr	r0, [pc, #48]	; (8002650 <prvInitialiseTaskLists+0x70>)
 8002620:	f7ff fb0d 	bl	8001c3e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002624:	480b      	ldr	r0, [pc, #44]	; (8002654 <prvInitialiseTaskLists+0x74>)
 8002626:	f7ff fb0a 	bl	8001c3e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800262a:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <prvInitialiseTaskLists+0x78>)
 800262c:	4a05      	ldr	r2, [pc, #20]	; (8002644 <prvInitialiseTaskLists+0x64>)
 800262e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002630:	4b0a      	ldr	r3, [pc, #40]	; (800265c <prvInitialiseTaskLists+0x7c>)
 8002632:	4a05      	ldr	r2, [pc, #20]	; (8002648 <prvInitialiseTaskLists+0x68>)
 8002634:	601a      	str	r2, [r3, #0]
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	200003dc 	.word	0x200003dc
 8002644:	20000468 	.word	0x20000468
 8002648:	2000047c 	.word	0x2000047c
 800264c:	20000498 	.word	0x20000498
 8002650:	200004ac 	.word	0x200004ac
 8002654:	200004c4 	.word	0x200004c4
 8002658:	20000490 	.word	0x20000490
 800265c:	20000494 	.word	0x20000494

08002660 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002666:	e019      	b.n	800269c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002668:	f000 f9d8 	bl	8002a1c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800266c:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <prvCheckTasksWaitingTermination+0x50>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3304      	adds	r3, #4
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fb66 	bl	8001d4a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800267e:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <prvCheckTasksWaitingTermination+0x54>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	3b01      	subs	r3, #1
 8002684:	4a0b      	ldr	r2, [pc, #44]	; (80026b4 <prvCheckTasksWaitingTermination+0x54>)
 8002686:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <prvCheckTasksWaitingTermination+0x58>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	3b01      	subs	r3, #1
 800268e:	4a0a      	ldr	r2, [pc, #40]	; (80026b8 <prvCheckTasksWaitingTermination+0x58>)
 8002690:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002692:	f000 f9f3 	bl	8002a7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f810 	bl	80026bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <prvCheckTasksWaitingTermination+0x58>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1e1      	bne.n	8002668 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80026a4:	bf00      	nop
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	200004ac 	.word	0x200004ac
 80026b4:	200004d8 	.word	0x200004d8
 80026b8:	200004c0 	.word	0x200004c0

080026bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	334c      	adds	r3, #76	; 0x4c
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 fe85 	bl	80033d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d108      	bne.n	80026ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 fb23 	bl	8002d28 <vPortFree>
				vPortFree( pxTCB );
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 fb20 	bl	8002d28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80026e8:	e018      	b.n	800271c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d103      	bne.n	80026fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 fb17 	bl	8002d28 <vPortFree>
	}
 80026fa:	e00f      	b.n	800271c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002702:	2b02      	cmp	r3, #2
 8002704:	d00a      	beq.n	800271c <prvDeleteTCB+0x60>
	__asm volatile
 8002706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800270a:	f383 8811 	msr	BASEPRI, r3
 800270e:	f3bf 8f6f 	isb	sy
 8002712:	f3bf 8f4f 	dsb	sy
 8002716:	60fb      	str	r3, [r7, #12]
}
 8002718:	bf00      	nop
 800271a:	e7fe      	b.n	800271a <prvDeleteTCB+0x5e>
	}
 800271c:	bf00      	nop
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800272a:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <prvResetNextTaskUnblockTime+0x40>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <prvResetNextTaskUnblockTime+0x14>
 8002734:	2301      	movs	r3, #1
 8002736:	e000      	b.n	800273a <prvResetNextTaskUnblockTime+0x16>
 8002738:	2300      	movs	r3, #0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d004      	beq.n	8002748 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800273e:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <prvResetNextTaskUnblockTime+0x44>)
 8002740:	f04f 32ff 	mov.w	r2, #4294967295
 8002744:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002746:	e008      	b.n	800275a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <prvResetNextTaskUnblockTime+0x40>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	4a04      	ldr	r2, [pc, #16]	; (8002768 <prvResetNextTaskUnblockTime+0x44>)
 8002758:	6013      	str	r3, [r2, #0]
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr
 8002764:	20000490 	.word	0x20000490
 8002768:	200004f8 	.word	0x200004f8

0800276c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002776:	4b29      	ldr	r3, [pc, #164]	; (800281c <prvAddCurrentTaskToDelayedList+0xb0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800277c:	4b28      	ldr	r3, [pc, #160]	; (8002820 <prvAddCurrentTaskToDelayedList+0xb4>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	3304      	adds	r3, #4
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fae1 	bl	8001d4a <uxListRemove>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10b      	bne.n	80027a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800278e:	4b24      	ldr	r3, [pc, #144]	; (8002820 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	2201      	movs	r2, #1
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43da      	mvns	r2, r3
 800279c:	4b21      	ldr	r3, [pc, #132]	; (8002824 <prvAddCurrentTaskToDelayedList+0xb8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4013      	ands	r3, r2
 80027a2:	4a20      	ldr	r2, [pc, #128]	; (8002824 <prvAddCurrentTaskToDelayedList+0xb8>)
 80027a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ac:	d10a      	bne.n	80027c4 <prvAddCurrentTaskToDelayedList+0x58>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d007      	beq.n	80027c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027b4:	4b1a      	ldr	r3, [pc, #104]	; (8002820 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	3304      	adds	r3, #4
 80027ba:	4619      	mov	r1, r3
 80027bc:	481a      	ldr	r0, [pc, #104]	; (8002828 <prvAddCurrentTaskToDelayedList+0xbc>)
 80027be:	f7ff fa69 	bl	8001c94 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80027c2:	e026      	b.n	8002812 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4413      	add	r3, r2
 80027ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80027cc:	4b14      	ldr	r3, [pc, #80]	; (8002820 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d209      	bcs.n	80027f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027dc:	4b13      	ldr	r3, [pc, #76]	; (800282c <prvAddCurrentTaskToDelayedList+0xc0>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	3304      	adds	r3, #4
 80027e6:	4619      	mov	r1, r3
 80027e8:	4610      	mov	r0, r2
 80027ea:	f7ff fa76 	bl	8001cda <vListInsert>
}
 80027ee:	e010      	b.n	8002812 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027f0:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <prvAddCurrentTaskToDelayedList+0xc4>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	3304      	adds	r3, #4
 80027fa:	4619      	mov	r1, r3
 80027fc:	4610      	mov	r0, r2
 80027fe:	f7ff fa6c 	bl	8001cda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002802:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	429a      	cmp	r2, r3
 800280a:	d202      	bcs.n	8002812 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800280c:	4a09      	ldr	r2, [pc, #36]	; (8002834 <prvAddCurrentTaskToDelayedList+0xc8>)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	6013      	str	r3, [r2, #0]
}
 8002812:	bf00      	nop
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	200004dc 	.word	0x200004dc
 8002820:	200003d8 	.word	0x200003d8
 8002824:	200004e0 	.word	0x200004e0
 8002828:	200004c4 	.word	0x200004c4
 800282c:	20000494 	.word	0x20000494
 8002830:	20000490 	.word	0x20000490
 8002834:	200004f8 	.word	0x200004f8

08002838 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	3b04      	subs	r3, #4
 8002848:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002850:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	3b04      	subs	r3, #4
 8002856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f023 0201 	bic.w	r2, r3, #1
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	3b04      	subs	r3, #4
 8002866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002868:	4a08      	ldr	r2, [pc, #32]	; (800288c <pxPortInitialiseStack+0x54>)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	3b14      	subs	r3, #20
 8002872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	3b20      	subs	r3, #32
 800287e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002880:	68fb      	ldr	r3, [r7, #12]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr
 800288c:	08002891 	.word	0x08002891

08002890 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002896:	2300      	movs	r3, #0
 8002898:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800289a:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <prvTaskExitError+0x54>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a2:	d00a      	beq.n	80028ba <prvTaskExitError+0x2a>
	__asm volatile
 80028a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a8:	f383 8811 	msr	BASEPRI, r3
 80028ac:	f3bf 8f6f 	isb	sy
 80028b0:	f3bf 8f4f 	dsb	sy
 80028b4:	60fb      	str	r3, [r7, #12]
}
 80028b6:	bf00      	nop
 80028b8:	e7fe      	b.n	80028b8 <prvTaskExitError+0x28>
	__asm volatile
 80028ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028be:	f383 8811 	msr	BASEPRI, r3
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	60bb      	str	r3, [r7, #8]
}
 80028cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80028ce:	bf00      	nop
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0fc      	beq.n	80028d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80028d6:	bf00      	nop
 80028d8:	bf00      	nop
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	2000000c 	.word	0x2000000c
	...

080028f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80028f0:	4b07      	ldr	r3, [pc, #28]	; (8002910 <pxCurrentTCBConst2>)
 80028f2:	6819      	ldr	r1, [r3, #0]
 80028f4:	6808      	ldr	r0, [r1, #0]
 80028f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80028fa:	f380 8809 	msr	PSP, r0
 80028fe:	f3bf 8f6f 	isb	sy
 8002902:	f04f 0000 	mov.w	r0, #0
 8002906:	f380 8811 	msr	BASEPRI, r0
 800290a:	f04e 0e0d 	orr.w	lr, lr, #13
 800290e:	4770      	bx	lr

08002910 <pxCurrentTCBConst2>:
 8002910:	200003d8 	.word	0x200003d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002914:	bf00      	nop
 8002916:	bf00      	nop

08002918 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002918:	4806      	ldr	r0, [pc, #24]	; (8002934 <prvPortStartFirstTask+0x1c>)
 800291a:	6800      	ldr	r0, [r0, #0]
 800291c:	6800      	ldr	r0, [r0, #0]
 800291e:	f380 8808 	msr	MSP, r0
 8002922:	b662      	cpsie	i
 8002924:	b661      	cpsie	f
 8002926:	f3bf 8f4f 	dsb	sy
 800292a:	f3bf 8f6f 	isb	sy
 800292e:	df00      	svc	0
 8002930:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002932:	bf00      	nop
 8002934:	e000ed08 	.word	0xe000ed08

08002938 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800293e:	4b32      	ldr	r3, [pc, #200]	; (8002a08 <xPortStartScheduler+0xd0>)
 8002940:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	b2db      	uxtb	r3, r3
 8002948:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	22ff      	movs	r2, #255	; 0xff
 800294e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002960:	b2da      	uxtb	r2, r3
 8002962:	4b2a      	ldr	r3, [pc, #168]	; (8002a0c <xPortStartScheduler+0xd4>)
 8002964:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002966:	4b2a      	ldr	r3, [pc, #168]	; (8002a10 <xPortStartScheduler+0xd8>)
 8002968:	2207      	movs	r2, #7
 800296a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800296c:	e009      	b.n	8002982 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800296e:	4b28      	ldr	r3, [pc, #160]	; (8002a10 <xPortStartScheduler+0xd8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	3b01      	subs	r3, #1
 8002974:	4a26      	ldr	r2, [pc, #152]	; (8002a10 <xPortStartScheduler+0xd8>)
 8002976:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002978:	78fb      	ldrb	r3, [r7, #3]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	b2db      	uxtb	r3, r3
 8002980:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002982:	78fb      	ldrb	r3, [r7, #3]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298a:	2b80      	cmp	r3, #128	; 0x80
 800298c:	d0ef      	beq.n	800296e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800298e:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <xPortStartScheduler+0xd8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f1c3 0307 	rsb	r3, r3, #7
 8002996:	2b04      	cmp	r3, #4
 8002998:	d00a      	beq.n	80029b0 <xPortStartScheduler+0x78>
	__asm volatile
 800299a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299e:	f383 8811 	msr	BASEPRI, r3
 80029a2:	f3bf 8f6f 	isb	sy
 80029a6:	f3bf 8f4f 	dsb	sy
 80029aa:	60bb      	str	r3, [r7, #8]
}
 80029ac:	bf00      	nop
 80029ae:	e7fe      	b.n	80029ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80029b0:	4b17      	ldr	r3, [pc, #92]	; (8002a10 <xPortStartScheduler+0xd8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	021b      	lsls	r3, r3, #8
 80029b6:	4a16      	ldr	r2, [pc, #88]	; (8002a10 <xPortStartScheduler+0xd8>)
 80029b8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80029ba:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <xPortStartScheduler+0xd8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029c2:	4a13      	ldr	r2, [pc, #76]	; (8002a10 <xPortStartScheduler+0xd8>)
 80029c4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80029ce:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <xPortStartScheduler+0xdc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a10      	ldr	r2, [pc, #64]	; (8002a14 <xPortStartScheduler+0xdc>)
 80029d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80029da:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <xPortStartScheduler+0xdc>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a0d      	ldr	r2, [pc, #52]	; (8002a14 <xPortStartScheduler+0xdc>)
 80029e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80029e4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80029e6:	f000 f8b9 	bl	8002b5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80029ea:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <xPortStartScheduler+0xe0>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80029f0:	f7ff ff92 	bl	8002918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80029f4:	f7ff fd7a 	bl	80024ec <vTaskSwitchContext>
	prvTaskExitError();
 80029f8:	f7ff ff4a 	bl	8002890 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	e000e400 	.word	0xe000e400
 8002a0c:	20000504 	.word	0x20000504
 8002a10:	20000508 	.word	0x20000508
 8002a14:	e000ed20 	.word	0xe000ed20
 8002a18:	2000000c 	.word	0x2000000c

08002a1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
	__asm volatile
 8002a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a26:	f383 8811 	msr	BASEPRI, r3
 8002a2a:	f3bf 8f6f 	isb	sy
 8002a2e:	f3bf 8f4f 	dsb	sy
 8002a32:	607b      	str	r3, [r7, #4]
}
 8002a34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002a36:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <vPortEnterCritical+0x58>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	4a0d      	ldr	r2, [pc, #52]	; (8002a74 <vPortEnterCritical+0x58>)
 8002a3e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <vPortEnterCritical+0x58>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d10f      	bne.n	8002a68 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <vPortEnterCritical+0x5c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <vPortEnterCritical+0x4c>
	__asm volatile
 8002a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a56:	f383 8811 	msr	BASEPRI, r3
 8002a5a:	f3bf 8f6f 	isb	sy
 8002a5e:	f3bf 8f4f 	dsb	sy
 8002a62:	603b      	str	r3, [r7, #0]
}
 8002a64:	bf00      	nop
 8002a66:	e7fe      	b.n	8002a66 <vPortEnterCritical+0x4a>
	}
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	2000000c 	.word	0x2000000c
 8002a78:	e000ed04 	.word	0xe000ed04

08002a7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <vPortExitCritical+0x4c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10a      	bne.n	8002aa0 <vPortExitCritical+0x24>
	__asm volatile
 8002a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8e:	f383 8811 	msr	BASEPRI, r3
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	f3bf 8f4f 	dsb	sy
 8002a9a:	607b      	str	r3, [r7, #4]
}
 8002a9c:	bf00      	nop
 8002a9e:	e7fe      	b.n	8002a9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002aa0:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <vPortExitCritical+0x4c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	4a08      	ldr	r2, [pc, #32]	; (8002ac8 <vPortExitCritical+0x4c>)
 8002aa8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002aaa:	4b07      	ldr	r3, [pc, #28]	; (8002ac8 <vPortExitCritical+0x4c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d105      	bne.n	8002abe <vPortExitCritical+0x42>
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002abc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr
 8002ac8:	2000000c 	.word	0x2000000c
 8002acc:	00000000 	.word	0x00000000

08002ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002ad0:	f3ef 8009 	mrs	r0, PSP
 8002ad4:	f3bf 8f6f 	isb	sy
 8002ad8:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <pxCurrentTCBConst>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002ae0:	6010      	str	r0, [r2, #0]
 8002ae2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002ae6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002aea:	f380 8811 	msr	BASEPRI, r0
 8002aee:	f7ff fcfd 	bl	80024ec <vTaskSwitchContext>
 8002af2:	f04f 0000 	mov.w	r0, #0
 8002af6:	f380 8811 	msr	BASEPRI, r0
 8002afa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002afe:	6819      	ldr	r1, [r3, #0]
 8002b00:	6808      	ldr	r0, [r1, #0]
 8002b02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002b06:	f380 8809 	msr	PSP, r0
 8002b0a:	f3bf 8f6f 	isb	sy
 8002b0e:	4770      	bx	lr

08002b10 <pxCurrentTCBConst>:
 8002b10:	200003d8 	.word	0x200003d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002b14:	bf00      	nop
 8002b16:	bf00      	nop

08002b18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8002b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b22:	f383 8811 	msr	BASEPRI, r3
 8002b26:	f3bf 8f6f 	isb	sy
 8002b2a:	f3bf 8f4f 	dsb	sy
 8002b2e:	607b      	str	r3, [r7, #4]
}
 8002b30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002b32:	f7ff fc1d 	bl	8002370 <xTaskIncrementTick>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <SysTick_Handler+0x40>)
 8002b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	2300      	movs	r3, #0
 8002b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	f383 8811 	msr	BASEPRI, r3
}
 8002b4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002b50:	bf00      	nop
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	e000ed04 	.word	0xe000ed04

08002b5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002b60:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <vPortSetupTimerInterrupt+0x30>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002b66:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <vPortSetupTimerInterrupt+0x34>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002b6c:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <vPortSetupTimerInterrupt+0x38>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a09      	ldr	r2, [pc, #36]	; (8002b98 <vPortSetupTimerInterrupt+0x3c>)
 8002b72:	fba2 2303 	umull	r2, r3, r2, r3
 8002b76:	099b      	lsrs	r3, r3, #6
 8002b78:	4a08      	ldr	r2, [pc, #32]	; (8002b9c <vPortSetupTimerInterrupt+0x40>)
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002b7e:	4b03      	ldr	r3, [pc, #12]	; (8002b8c <vPortSetupTimerInterrupt+0x30>)
 8002b80:	2207      	movs	r2, #7
 8002b82:	601a      	str	r2, [r3, #0]
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr
 8002b8c:	e000e010 	.word	0xe000e010
 8002b90:	e000e018 	.word	0xe000e018
 8002b94:	20000000 	.word	0x20000000
 8002b98:	10624dd3 	.word	0x10624dd3
 8002b9c:	e000e014 	.word	0xe000e014

08002ba0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	; 0x28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002bac:	f7ff fb36 	bl	800221c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002bb0:	4b58      	ldr	r3, [pc, #352]	; (8002d14 <pvPortMalloc+0x174>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002bb8:	f000 f910 	bl	8002ddc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002bbc:	4b56      	ldr	r3, [pc, #344]	; (8002d18 <pvPortMalloc+0x178>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f040 808e 	bne.w	8002ce6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d01d      	beq.n	8002c0c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002bd0:	2208      	movs	r2, #8
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d014      	beq.n	8002c0c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f023 0307 	bic.w	r3, r3, #7
 8002be8:	3308      	adds	r3, #8
 8002bea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <pvPortMalloc+0x6c>
	__asm volatile
 8002bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfa:	f383 8811 	msr	BASEPRI, r3
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	617b      	str	r3, [r7, #20]
}
 8002c08:	bf00      	nop
 8002c0a:	e7fe      	b.n	8002c0a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d069      	beq.n	8002ce6 <pvPortMalloc+0x146>
 8002c12:	4b42      	ldr	r3, [pc, #264]	; (8002d1c <pvPortMalloc+0x17c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d864      	bhi.n	8002ce6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002c1c:	4b40      	ldr	r3, [pc, #256]	; (8002d20 <pvPortMalloc+0x180>)
 8002c1e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002c20:	4b3f      	ldr	r3, [pc, #252]	; (8002d20 <pvPortMalloc+0x180>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002c26:	e004      	b.n	8002c32 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d903      	bls.n	8002c44 <pvPortMalloc+0xa4>
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f1      	bne.n	8002c28 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002c44:	4b33      	ldr	r3, [pc, #204]	; (8002d14 <pvPortMalloc+0x174>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d04b      	beq.n	8002ce6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2208      	movs	r2, #8
 8002c54:	4413      	add	r3, r2
 8002c56:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	1ad2      	subs	r2, r2, r3
 8002c68:	2308      	movs	r3, #8
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d91f      	bls.n	8002cb0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00a      	beq.n	8002c98 <pvPortMalloc+0xf8>
	__asm volatile
 8002c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c86:	f383 8811 	msr	BASEPRI, r3
 8002c8a:	f3bf 8f6f 	isb	sy
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	613b      	str	r3, [r7, #16]
}
 8002c94:	bf00      	nop
 8002c96:	e7fe      	b.n	8002c96 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	1ad2      	subs	r2, r2, r3
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002caa:	69b8      	ldr	r0, [r7, #24]
 8002cac:	f000 f8f8 	bl	8002ea0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002cb0:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <pvPortMalloc+0x17c>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	4a18      	ldr	r2, [pc, #96]	; (8002d1c <pvPortMalloc+0x17c>)
 8002cbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002cbe:	4b17      	ldr	r3, [pc, #92]	; (8002d1c <pvPortMalloc+0x17c>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <pvPortMalloc+0x184>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d203      	bcs.n	8002cd2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002cca:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <pvPortMalloc+0x17c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a15      	ldr	r2, [pc, #84]	; (8002d24 <pvPortMalloc+0x184>)
 8002cd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <pvPortMalloc+0x178>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002ce6:	f7ff faa7 	bl	8002238 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <pvPortMalloc+0x16a>
	__asm volatile
 8002cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf8:	f383 8811 	msr	BASEPRI, r3
 8002cfc:	f3bf 8f6f 	isb	sy
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	60fb      	str	r3, [r7, #12]
}
 8002d06:	bf00      	nop
 8002d08:	e7fe      	b.n	8002d08 <pvPortMalloc+0x168>
	return pvReturn;
 8002d0a:	69fb      	ldr	r3, [r7, #28]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3728      	adds	r7, #40	; 0x28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20001114 	.word	0x20001114
 8002d18:	20001120 	.word	0x20001120
 8002d1c:	20001118 	.word	0x20001118
 8002d20:	2000110c 	.word	0x2000110c
 8002d24:	2000111c 	.word	0x2000111c

08002d28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d048      	beq.n	8002dcc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002d3a:	2308      	movs	r3, #8
 8002d3c:	425b      	negs	r3, r3
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	4413      	add	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <vPortFree+0xac>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10a      	bne.n	8002d6c <vPortFree+0x44>
	__asm volatile
 8002d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5a:	f383 8811 	msr	BASEPRI, r3
 8002d5e:	f3bf 8f6f 	isb	sy
 8002d62:	f3bf 8f4f 	dsb	sy
 8002d66:	60fb      	str	r3, [r7, #12]
}
 8002d68:	bf00      	nop
 8002d6a:	e7fe      	b.n	8002d6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <vPortFree+0x62>
	__asm volatile
 8002d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d78:	f383 8811 	msr	BASEPRI, r3
 8002d7c:	f3bf 8f6f 	isb	sy
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	60bb      	str	r3, [r7, #8]
}
 8002d86:	bf00      	nop
 8002d88:	e7fe      	b.n	8002d88 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <vPortFree+0xac>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d019      	beq.n	8002dcc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d115      	bne.n	8002dcc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <vPortFree+0xac>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	43db      	mvns	r3, r3
 8002daa:	401a      	ands	r2, r3
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002db0:	f7ff fa34 	bl	800221c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	4b07      	ldr	r3, [pc, #28]	; (8002dd8 <vPortFree+0xb0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	4a06      	ldr	r2, [pc, #24]	; (8002dd8 <vPortFree+0xb0>)
 8002dc0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002dc2:	6938      	ldr	r0, [r7, #16]
 8002dc4:	f000 f86c 	bl	8002ea0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002dc8:	f7ff fa36 	bl	8002238 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002dcc:	bf00      	nop
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20001120 	.word	0x20001120
 8002dd8:	20001118 	.word	0x20001118

08002ddc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002de2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002de6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002de8:	4b27      	ldr	r3, [pc, #156]	; (8002e88 <prvHeapInit+0xac>)
 8002dea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00c      	beq.n	8002e10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	3307      	adds	r3, #7
 8002dfa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0307 	bic.w	r3, r3, #7
 8002e02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	4a1f      	ldr	r2, [pc, #124]	; (8002e88 <prvHeapInit+0xac>)
 8002e0c:	4413      	add	r3, r2
 8002e0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002e14:	4a1d      	ldr	r2, [pc, #116]	; (8002e8c <prvHeapInit+0xb0>)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002e1a:	4b1c      	ldr	r3, [pc, #112]	; (8002e8c <prvHeapInit+0xb0>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	4413      	add	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002e28:	2208      	movs	r2, #8
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1a9b      	subs	r3, r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f023 0307 	bic.w	r3, r3, #7
 8002e36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4a15      	ldr	r2, [pc, #84]	; (8002e90 <prvHeapInit+0xb4>)
 8002e3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002e3e:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <prvHeapInit+0xb4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2200      	movs	r2, #0
 8002e44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002e46:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <prvHeapInit+0xb4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	1ad2      	subs	r2, r2, r3
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <prvHeapInit+0xb4>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	4a0a      	ldr	r2, [pc, #40]	; (8002e94 <prvHeapInit+0xb8>)
 8002e6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4a09      	ldr	r2, [pc, #36]	; (8002e98 <prvHeapInit+0xbc>)
 8002e72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002e74:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <prvHeapInit+0xc0>)
 8002e76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002e7a:	601a      	str	r2, [r3, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	2000050c 	.word	0x2000050c
 8002e8c:	2000110c 	.word	0x2000110c
 8002e90:	20001114 	.word	0x20001114
 8002e94:	2000111c 	.word	0x2000111c
 8002e98:	20001118 	.word	0x20001118
 8002e9c:	20001120 	.word	0x20001120

08002ea0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002ea8:	4b27      	ldr	r3, [pc, #156]	; (8002f48 <prvInsertBlockIntoFreeList+0xa8>)
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	e002      	b.n	8002eb4 <prvInsertBlockIntoFreeList+0x14>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d8f7      	bhi.n	8002eae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	4413      	add	r3, r2
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d108      	bne.n	8002ee2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	441a      	add	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	441a      	add	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d118      	bne.n	8002f28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <prvInsertBlockIntoFreeList+0xac>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d00d      	beq.n	8002f1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	441a      	add	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	e008      	b.n	8002f30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002f1e:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <prvInsertBlockIntoFreeList+0xac>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	e003      	b.n	8002f30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d002      	beq.n	8002f3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f3e:	bf00      	nop
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr
 8002f48:	2000110c 	.word	0x2000110c
 8002f4c:	20001114 	.word	0x20001114

08002f50 <__errno>:
 8002f50:	4b01      	ldr	r3, [pc, #4]	; (8002f58 <__errno+0x8>)
 8002f52:	6818      	ldr	r0, [r3, #0]
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	20000010 	.word	0x20000010

08002f5c <std>:
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	b510      	push	{r4, lr}
 8002f60:	4604      	mov	r4, r0
 8002f62:	e9c0 3300 	strd	r3, r3, [r0]
 8002f66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f6a:	6083      	str	r3, [r0, #8]
 8002f6c:	8181      	strh	r1, [r0, #12]
 8002f6e:	6643      	str	r3, [r0, #100]	; 0x64
 8002f70:	81c2      	strh	r2, [r0, #14]
 8002f72:	6183      	str	r3, [r0, #24]
 8002f74:	4619      	mov	r1, r3
 8002f76:	2208      	movs	r2, #8
 8002f78:	305c      	adds	r0, #92	; 0x5c
 8002f7a:	f000 f90c 	bl	8003196 <memset>
 8002f7e:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <std+0x38>)
 8002f80:	6224      	str	r4, [r4, #32]
 8002f82:	6263      	str	r3, [r4, #36]	; 0x24
 8002f84:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <std+0x3c>)
 8002f86:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f88:	4b04      	ldr	r3, [pc, #16]	; (8002f9c <std+0x40>)
 8002f8a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f8c:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <std+0x44>)
 8002f8e:	6323      	str	r3, [r4, #48]	; 0x30
 8002f90:	bd10      	pop	{r4, pc}
 8002f92:	bf00      	nop
 8002f94:	080034b1 	.word	0x080034b1
 8002f98:	080034d3 	.word	0x080034d3
 8002f9c:	0800350b 	.word	0x0800350b
 8002fa0:	0800352f 	.word	0x0800352f

08002fa4 <_cleanup_r>:
 8002fa4:	4901      	ldr	r1, [pc, #4]	; (8002fac <_cleanup_r+0x8>)
 8002fa6:	f000 b8af 	b.w	8003108 <_fwalk_reent>
 8002faa:	bf00      	nop
 8002fac:	08003801 	.word	0x08003801

08002fb0 <__sfmoreglue>:
 8002fb0:	2268      	movs	r2, #104	; 0x68
 8002fb2:	b570      	push	{r4, r5, r6, lr}
 8002fb4:	1e4d      	subs	r5, r1, #1
 8002fb6:	4355      	muls	r5, r2
 8002fb8:	460e      	mov	r6, r1
 8002fba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002fbe:	f000 f913 	bl	80031e8 <_malloc_r>
 8002fc2:	4604      	mov	r4, r0
 8002fc4:	b140      	cbz	r0, 8002fd8 <__sfmoreglue+0x28>
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	e9c0 1600 	strd	r1, r6, [r0]
 8002fcc:	300c      	adds	r0, #12
 8002fce:	60a0      	str	r0, [r4, #8]
 8002fd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002fd4:	f000 f8df 	bl	8003196 <memset>
 8002fd8:	4620      	mov	r0, r4
 8002fda:	bd70      	pop	{r4, r5, r6, pc}

08002fdc <__sfp_lock_acquire>:
 8002fdc:	4801      	ldr	r0, [pc, #4]	; (8002fe4 <__sfp_lock_acquire+0x8>)
 8002fde:	f000 b8d8 	b.w	8003192 <__retarget_lock_acquire_recursive>
 8002fe2:	bf00      	nop
 8002fe4:	20001125 	.word	0x20001125

08002fe8 <__sfp_lock_release>:
 8002fe8:	4801      	ldr	r0, [pc, #4]	; (8002ff0 <__sfp_lock_release+0x8>)
 8002fea:	f000 b8d3 	b.w	8003194 <__retarget_lock_release_recursive>
 8002fee:	bf00      	nop
 8002ff0:	20001125 	.word	0x20001125

08002ff4 <__sinit_lock_acquire>:
 8002ff4:	4801      	ldr	r0, [pc, #4]	; (8002ffc <__sinit_lock_acquire+0x8>)
 8002ff6:	f000 b8cc 	b.w	8003192 <__retarget_lock_acquire_recursive>
 8002ffa:	bf00      	nop
 8002ffc:	20001126 	.word	0x20001126

08003000 <__sinit_lock_release>:
 8003000:	4801      	ldr	r0, [pc, #4]	; (8003008 <__sinit_lock_release+0x8>)
 8003002:	f000 b8c7 	b.w	8003194 <__retarget_lock_release_recursive>
 8003006:	bf00      	nop
 8003008:	20001126 	.word	0x20001126

0800300c <__sinit>:
 800300c:	b510      	push	{r4, lr}
 800300e:	4604      	mov	r4, r0
 8003010:	f7ff fff0 	bl	8002ff4 <__sinit_lock_acquire>
 8003014:	69a3      	ldr	r3, [r4, #24]
 8003016:	b11b      	cbz	r3, 8003020 <__sinit+0x14>
 8003018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800301c:	f7ff bff0 	b.w	8003000 <__sinit_lock_release>
 8003020:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003024:	6523      	str	r3, [r4, #80]	; 0x50
 8003026:	4b13      	ldr	r3, [pc, #76]	; (8003074 <__sinit+0x68>)
 8003028:	4a13      	ldr	r2, [pc, #76]	; (8003078 <__sinit+0x6c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	62a2      	str	r2, [r4, #40]	; 0x28
 800302e:	42a3      	cmp	r3, r4
 8003030:	bf08      	it	eq
 8003032:	2301      	moveq	r3, #1
 8003034:	4620      	mov	r0, r4
 8003036:	bf08      	it	eq
 8003038:	61a3      	streq	r3, [r4, #24]
 800303a:	f000 f81f 	bl	800307c <__sfp>
 800303e:	6060      	str	r0, [r4, #4]
 8003040:	4620      	mov	r0, r4
 8003042:	f000 f81b 	bl	800307c <__sfp>
 8003046:	60a0      	str	r0, [r4, #8]
 8003048:	4620      	mov	r0, r4
 800304a:	f000 f817 	bl	800307c <__sfp>
 800304e:	2200      	movs	r2, #0
 8003050:	2104      	movs	r1, #4
 8003052:	60e0      	str	r0, [r4, #12]
 8003054:	6860      	ldr	r0, [r4, #4]
 8003056:	f7ff ff81 	bl	8002f5c <std>
 800305a:	2201      	movs	r2, #1
 800305c:	2109      	movs	r1, #9
 800305e:	68a0      	ldr	r0, [r4, #8]
 8003060:	f7ff ff7c 	bl	8002f5c <std>
 8003064:	2202      	movs	r2, #2
 8003066:	2112      	movs	r1, #18
 8003068:	68e0      	ldr	r0, [r4, #12]
 800306a:	f7ff ff77 	bl	8002f5c <std>
 800306e:	2301      	movs	r3, #1
 8003070:	61a3      	str	r3, [r4, #24]
 8003072:	e7d1      	b.n	8003018 <__sinit+0xc>
 8003074:	08003b70 	.word	0x08003b70
 8003078:	08002fa5 	.word	0x08002fa5

0800307c <__sfp>:
 800307c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307e:	4607      	mov	r7, r0
 8003080:	f7ff ffac 	bl	8002fdc <__sfp_lock_acquire>
 8003084:	4b1e      	ldr	r3, [pc, #120]	; (8003100 <__sfp+0x84>)
 8003086:	681e      	ldr	r6, [r3, #0]
 8003088:	69b3      	ldr	r3, [r6, #24]
 800308a:	b913      	cbnz	r3, 8003092 <__sfp+0x16>
 800308c:	4630      	mov	r0, r6
 800308e:	f7ff ffbd 	bl	800300c <__sinit>
 8003092:	3648      	adds	r6, #72	; 0x48
 8003094:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003098:	3b01      	subs	r3, #1
 800309a:	d503      	bpl.n	80030a4 <__sfp+0x28>
 800309c:	6833      	ldr	r3, [r6, #0]
 800309e:	b30b      	cbz	r3, 80030e4 <__sfp+0x68>
 80030a0:	6836      	ldr	r6, [r6, #0]
 80030a2:	e7f7      	b.n	8003094 <__sfp+0x18>
 80030a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80030a8:	b9d5      	cbnz	r5, 80030e0 <__sfp+0x64>
 80030aa:	4b16      	ldr	r3, [pc, #88]	; (8003104 <__sfp+0x88>)
 80030ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80030b0:	60e3      	str	r3, [r4, #12]
 80030b2:	6665      	str	r5, [r4, #100]	; 0x64
 80030b4:	f000 f86c 	bl	8003190 <__retarget_lock_init_recursive>
 80030b8:	f7ff ff96 	bl	8002fe8 <__sfp_lock_release>
 80030bc:	2208      	movs	r2, #8
 80030be:	4629      	mov	r1, r5
 80030c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80030c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80030c8:	6025      	str	r5, [r4, #0]
 80030ca:	61a5      	str	r5, [r4, #24]
 80030cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80030d0:	f000 f861 	bl	8003196 <memset>
 80030d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80030d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80030dc:	4620      	mov	r0, r4
 80030de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030e0:	3468      	adds	r4, #104	; 0x68
 80030e2:	e7d9      	b.n	8003098 <__sfp+0x1c>
 80030e4:	2104      	movs	r1, #4
 80030e6:	4638      	mov	r0, r7
 80030e8:	f7ff ff62 	bl	8002fb0 <__sfmoreglue>
 80030ec:	4604      	mov	r4, r0
 80030ee:	6030      	str	r0, [r6, #0]
 80030f0:	2800      	cmp	r0, #0
 80030f2:	d1d5      	bne.n	80030a0 <__sfp+0x24>
 80030f4:	f7ff ff78 	bl	8002fe8 <__sfp_lock_release>
 80030f8:	230c      	movs	r3, #12
 80030fa:	603b      	str	r3, [r7, #0]
 80030fc:	e7ee      	b.n	80030dc <__sfp+0x60>
 80030fe:	bf00      	nop
 8003100:	08003b70 	.word	0x08003b70
 8003104:	ffff0001 	.word	0xffff0001

08003108 <_fwalk_reent>:
 8003108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800310c:	4606      	mov	r6, r0
 800310e:	4688      	mov	r8, r1
 8003110:	2700      	movs	r7, #0
 8003112:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003116:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800311a:	f1b9 0901 	subs.w	r9, r9, #1
 800311e:	d505      	bpl.n	800312c <_fwalk_reent+0x24>
 8003120:	6824      	ldr	r4, [r4, #0]
 8003122:	2c00      	cmp	r4, #0
 8003124:	d1f7      	bne.n	8003116 <_fwalk_reent+0xe>
 8003126:	4638      	mov	r0, r7
 8003128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800312c:	89ab      	ldrh	r3, [r5, #12]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d907      	bls.n	8003142 <_fwalk_reent+0x3a>
 8003132:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003136:	3301      	adds	r3, #1
 8003138:	d003      	beq.n	8003142 <_fwalk_reent+0x3a>
 800313a:	4629      	mov	r1, r5
 800313c:	4630      	mov	r0, r6
 800313e:	47c0      	blx	r8
 8003140:	4307      	orrs	r7, r0
 8003142:	3568      	adds	r5, #104	; 0x68
 8003144:	e7e9      	b.n	800311a <_fwalk_reent+0x12>
	...

08003148 <__libc_init_array>:
 8003148:	b570      	push	{r4, r5, r6, lr}
 800314a:	2600      	movs	r6, #0
 800314c:	4d0c      	ldr	r5, [pc, #48]	; (8003180 <__libc_init_array+0x38>)
 800314e:	4c0d      	ldr	r4, [pc, #52]	; (8003184 <__libc_init_array+0x3c>)
 8003150:	1b64      	subs	r4, r4, r5
 8003152:	10a4      	asrs	r4, r4, #2
 8003154:	42a6      	cmp	r6, r4
 8003156:	d109      	bne.n	800316c <__libc_init_array+0x24>
 8003158:	f000 fc8e 	bl	8003a78 <_init>
 800315c:	2600      	movs	r6, #0
 800315e:	4d0a      	ldr	r5, [pc, #40]	; (8003188 <__libc_init_array+0x40>)
 8003160:	4c0a      	ldr	r4, [pc, #40]	; (800318c <__libc_init_array+0x44>)
 8003162:	1b64      	subs	r4, r4, r5
 8003164:	10a4      	asrs	r4, r4, #2
 8003166:	42a6      	cmp	r6, r4
 8003168:	d105      	bne.n	8003176 <__libc_init_array+0x2e>
 800316a:	bd70      	pop	{r4, r5, r6, pc}
 800316c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003170:	4798      	blx	r3
 8003172:	3601      	adds	r6, #1
 8003174:	e7ee      	b.n	8003154 <__libc_init_array+0xc>
 8003176:	f855 3b04 	ldr.w	r3, [r5], #4
 800317a:	4798      	blx	r3
 800317c:	3601      	adds	r6, #1
 800317e:	e7f2      	b.n	8003166 <__libc_init_array+0x1e>
 8003180:	08003b74 	.word	0x08003b74
 8003184:	08003b74 	.word	0x08003b74
 8003188:	08003b74 	.word	0x08003b74
 800318c:	08003b78 	.word	0x08003b78

08003190 <__retarget_lock_init_recursive>:
 8003190:	4770      	bx	lr

08003192 <__retarget_lock_acquire_recursive>:
 8003192:	4770      	bx	lr

08003194 <__retarget_lock_release_recursive>:
 8003194:	4770      	bx	lr

08003196 <memset>:
 8003196:	4603      	mov	r3, r0
 8003198:	4402      	add	r2, r0
 800319a:	4293      	cmp	r3, r2
 800319c:	d100      	bne.n	80031a0 <memset+0xa>
 800319e:	4770      	bx	lr
 80031a0:	f803 1b01 	strb.w	r1, [r3], #1
 80031a4:	e7f9      	b.n	800319a <memset+0x4>
	...

080031a8 <sbrk_aligned>:
 80031a8:	b570      	push	{r4, r5, r6, lr}
 80031aa:	4e0e      	ldr	r6, [pc, #56]	; (80031e4 <sbrk_aligned+0x3c>)
 80031ac:	460c      	mov	r4, r1
 80031ae:	6831      	ldr	r1, [r6, #0]
 80031b0:	4605      	mov	r5, r0
 80031b2:	b911      	cbnz	r1, 80031ba <sbrk_aligned+0x12>
 80031b4:	f000 f96c 	bl	8003490 <_sbrk_r>
 80031b8:	6030      	str	r0, [r6, #0]
 80031ba:	4621      	mov	r1, r4
 80031bc:	4628      	mov	r0, r5
 80031be:	f000 f967 	bl	8003490 <_sbrk_r>
 80031c2:	1c43      	adds	r3, r0, #1
 80031c4:	d00a      	beq.n	80031dc <sbrk_aligned+0x34>
 80031c6:	1cc4      	adds	r4, r0, #3
 80031c8:	f024 0403 	bic.w	r4, r4, #3
 80031cc:	42a0      	cmp	r0, r4
 80031ce:	d007      	beq.n	80031e0 <sbrk_aligned+0x38>
 80031d0:	1a21      	subs	r1, r4, r0
 80031d2:	4628      	mov	r0, r5
 80031d4:	f000 f95c 	bl	8003490 <_sbrk_r>
 80031d8:	3001      	adds	r0, #1
 80031da:	d101      	bne.n	80031e0 <sbrk_aligned+0x38>
 80031dc:	f04f 34ff 	mov.w	r4, #4294967295
 80031e0:	4620      	mov	r0, r4
 80031e2:	bd70      	pop	{r4, r5, r6, pc}
 80031e4:	2000112c 	.word	0x2000112c

080031e8 <_malloc_r>:
 80031e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031ec:	1ccd      	adds	r5, r1, #3
 80031ee:	f025 0503 	bic.w	r5, r5, #3
 80031f2:	3508      	adds	r5, #8
 80031f4:	2d0c      	cmp	r5, #12
 80031f6:	bf38      	it	cc
 80031f8:	250c      	movcc	r5, #12
 80031fa:	2d00      	cmp	r5, #0
 80031fc:	4607      	mov	r7, r0
 80031fe:	db01      	blt.n	8003204 <_malloc_r+0x1c>
 8003200:	42a9      	cmp	r1, r5
 8003202:	d905      	bls.n	8003210 <_malloc_r+0x28>
 8003204:	230c      	movs	r3, #12
 8003206:	2600      	movs	r6, #0
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	4630      	mov	r0, r6
 800320c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003210:	4e2e      	ldr	r6, [pc, #184]	; (80032cc <_malloc_r+0xe4>)
 8003212:	f000 fba9 	bl	8003968 <__malloc_lock>
 8003216:	6833      	ldr	r3, [r6, #0]
 8003218:	461c      	mov	r4, r3
 800321a:	bb34      	cbnz	r4, 800326a <_malloc_r+0x82>
 800321c:	4629      	mov	r1, r5
 800321e:	4638      	mov	r0, r7
 8003220:	f7ff ffc2 	bl	80031a8 <sbrk_aligned>
 8003224:	1c43      	adds	r3, r0, #1
 8003226:	4604      	mov	r4, r0
 8003228:	d14d      	bne.n	80032c6 <_malloc_r+0xde>
 800322a:	6834      	ldr	r4, [r6, #0]
 800322c:	4626      	mov	r6, r4
 800322e:	2e00      	cmp	r6, #0
 8003230:	d140      	bne.n	80032b4 <_malloc_r+0xcc>
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	4631      	mov	r1, r6
 8003236:	4638      	mov	r0, r7
 8003238:	eb04 0803 	add.w	r8, r4, r3
 800323c:	f000 f928 	bl	8003490 <_sbrk_r>
 8003240:	4580      	cmp	r8, r0
 8003242:	d13a      	bne.n	80032ba <_malloc_r+0xd2>
 8003244:	6821      	ldr	r1, [r4, #0]
 8003246:	3503      	adds	r5, #3
 8003248:	1a6d      	subs	r5, r5, r1
 800324a:	f025 0503 	bic.w	r5, r5, #3
 800324e:	3508      	adds	r5, #8
 8003250:	2d0c      	cmp	r5, #12
 8003252:	bf38      	it	cc
 8003254:	250c      	movcc	r5, #12
 8003256:	4638      	mov	r0, r7
 8003258:	4629      	mov	r1, r5
 800325a:	f7ff ffa5 	bl	80031a8 <sbrk_aligned>
 800325e:	3001      	adds	r0, #1
 8003260:	d02b      	beq.n	80032ba <_malloc_r+0xd2>
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	442b      	add	r3, r5
 8003266:	6023      	str	r3, [r4, #0]
 8003268:	e00e      	b.n	8003288 <_malloc_r+0xa0>
 800326a:	6822      	ldr	r2, [r4, #0]
 800326c:	1b52      	subs	r2, r2, r5
 800326e:	d41e      	bmi.n	80032ae <_malloc_r+0xc6>
 8003270:	2a0b      	cmp	r2, #11
 8003272:	d916      	bls.n	80032a2 <_malloc_r+0xba>
 8003274:	1961      	adds	r1, r4, r5
 8003276:	42a3      	cmp	r3, r4
 8003278:	6025      	str	r5, [r4, #0]
 800327a:	bf18      	it	ne
 800327c:	6059      	strne	r1, [r3, #4]
 800327e:	6863      	ldr	r3, [r4, #4]
 8003280:	bf08      	it	eq
 8003282:	6031      	streq	r1, [r6, #0]
 8003284:	5162      	str	r2, [r4, r5]
 8003286:	604b      	str	r3, [r1, #4]
 8003288:	4638      	mov	r0, r7
 800328a:	f104 060b 	add.w	r6, r4, #11
 800328e:	f000 fb71 	bl	8003974 <__malloc_unlock>
 8003292:	f026 0607 	bic.w	r6, r6, #7
 8003296:	1d23      	adds	r3, r4, #4
 8003298:	1af2      	subs	r2, r6, r3
 800329a:	d0b6      	beq.n	800320a <_malloc_r+0x22>
 800329c:	1b9b      	subs	r3, r3, r6
 800329e:	50a3      	str	r3, [r4, r2]
 80032a0:	e7b3      	b.n	800320a <_malloc_r+0x22>
 80032a2:	6862      	ldr	r2, [r4, #4]
 80032a4:	42a3      	cmp	r3, r4
 80032a6:	bf0c      	ite	eq
 80032a8:	6032      	streq	r2, [r6, #0]
 80032aa:	605a      	strne	r2, [r3, #4]
 80032ac:	e7ec      	b.n	8003288 <_malloc_r+0xa0>
 80032ae:	4623      	mov	r3, r4
 80032b0:	6864      	ldr	r4, [r4, #4]
 80032b2:	e7b2      	b.n	800321a <_malloc_r+0x32>
 80032b4:	4634      	mov	r4, r6
 80032b6:	6876      	ldr	r6, [r6, #4]
 80032b8:	e7b9      	b.n	800322e <_malloc_r+0x46>
 80032ba:	230c      	movs	r3, #12
 80032bc:	4638      	mov	r0, r7
 80032be:	603b      	str	r3, [r7, #0]
 80032c0:	f000 fb58 	bl	8003974 <__malloc_unlock>
 80032c4:	e7a1      	b.n	800320a <_malloc_r+0x22>
 80032c6:	6025      	str	r5, [r4, #0]
 80032c8:	e7de      	b.n	8003288 <_malloc_r+0xa0>
 80032ca:	bf00      	nop
 80032cc:	20001128 	.word	0x20001128

080032d0 <_puts_r>:
 80032d0:	b570      	push	{r4, r5, r6, lr}
 80032d2:	460e      	mov	r6, r1
 80032d4:	4605      	mov	r5, r0
 80032d6:	b118      	cbz	r0, 80032e0 <_puts_r+0x10>
 80032d8:	6983      	ldr	r3, [r0, #24]
 80032da:	b90b      	cbnz	r3, 80032e0 <_puts_r+0x10>
 80032dc:	f7ff fe96 	bl	800300c <__sinit>
 80032e0:	69ab      	ldr	r3, [r5, #24]
 80032e2:	68ac      	ldr	r4, [r5, #8]
 80032e4:	b913      	cbnz	r3, 80032ec <_puts_r+0x1c>
 80032e6:	4628      	mov	r0, r5
 80032e8:	f7ff fe90 	bl	800300c <__sinit>
 80032ec:	4b2c      	ldr	r3, [pc, #176]	; (80033a0 <_puts_r+0xd0>)
 80032ee:	429c      	cmp	r4, r3
 80032f0:	d120      	bne.n	8003334 <_puts_r+0x64>
 80032f2:	686c      	ldr	r4, [r5, #4]
 80032f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032f6:	07db      	lsls	r3, r3, #31
 80032f8:	d405      	bmi.n	8003306 <_puts_r+0x36>
 80032fa:	89a3      	ldrh	r3, [r4, #12]
 80032fc:	0598      	lsls	r0, r3, #22
 80032fe:	d402      	bmi.n	8003306 <_puts_r+0x36>
 8003300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003302:	f7ff ff46 	bl	8003192 <__retarget_lock_acquire_recursive>
 8003306:	89a3      	ldrh	r3, [r4, #12]
 8003308:	0719      	lsls	r1, r3, #28
 800330a:	d51d      	bpl.n	8003348 <_puts_r+0x78>
 800330c:	6923      	ldr	r3, [r4, #16]
 800330e:	b1db      	cbz	r3, 8003348 <_puts_r+0x78>
 8003310:	3e01      	subs	r6, #1
 8003312:	68a3      	ldr	r3, [r4, #8]
 8003314:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003318:	3b01      	subs	r3, #1
 800331a:	60a3      	str	r3, [r4, #8]
 800331c:	bb39      	cbnz	r1, 800336e <_puts_r+0x9e>
 800331e:	2b00      	cmp	r3, #0
 8003320:	da38      	bge.n	8003394 <_puts_r+0xc4>
 8003322:	4622      	mov	r2, r4
 8003324:	210a      	movs	r1, #10
 8003326:	4628      	mov	r0, r5
 8003328:	f000 f906 	bl	8003538 <__swbuf_r>
 800332c:	3001      	adds	r0, #1
 800332e:	d011      	beq.n	8003354 <_puts_r+0x84>
 8003330:	250a      	movs	r5, #10
 8003332:	e011      	b.n	8003358 <_puts_r+0x88>
 8003334:	4b1b      	ldr	r3, [pc, #108]	; (80033a4 <_puts_r+0xd4>)
 8003336:	429c      	cmp	r4, r3
 8003338:	d101      	bne.n	800333e <_puts_r+0x6e>
 800333a:	68ac      	ldr	r4, [r5, #8]
 800333c:	e7da      	b.n	80032f4 <_puts_r+0x24>
 800333e:	4b1a      	ldr	r3, [pc, #104]	; (80033a8 <_puts_r+0xd8>)
 8003340:	429c      	cmp	r4, r3
 8003342:	bf08      	it	eq
 8003344:	68ec      	ldreq	r4, [r5, #12]
 8003346:	e7d5      	b.n	80032f4 <_puts_r+0x24>
 8003348:	4621      	mov	r1, r4
 800334a:	4628      	mov	r0, r5
 800334c:	f000 f958 	bl	8003600 <__swsetup_r>
 8003350:	2800      	cmp	r0, #0
 8003352:	d0dd      	beq.n	8003310 <_puts_r+0x40>
 8003354:	f04f 35ff 	mov.w	r5, #4294967295
 8003358:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800335a:	07da      	lsls	r2, r3, #31
 800335c:	d405      	bmi.n	800336a <_puts_r+0x9a>
 800335e:	89a3      	ldrh	r3, [r4, #12]
 8003360:	059b      	lsls	r3, r3, #22
 8003362:	d402      	bmi.n	800336a <_puts_r+0x9a>
 8003364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003366:	f7ff ff15 	bl	8003194 <__retarget_lock_release_recursive>
 800336a:	4628      	mov	r0, r5
 800336c:	bd70      	pop	{r4, r5, r6, pc}
 800336e:	2b00      	cmp	r3, #0
 8003370:	da04      	bge.n	800337c <_puts_r+0xac>
 8003372:	69a2      	ldr	r2, [r4, #24]
 8003374:	429a      	cmp	r2, r3
 8003376:	dc06      	bgt.n	8003386 <_puts_r+0xb6>
 8003378:	290a      	cmp	r1, #10
 800337a:	d004      	beq.n	8003386 <_puts_r+0xb6>
 800337c:	6823      	ldr	r3, [r4, #0]
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	6022      	str	r2, [r4, #0]
 8003382:	7019      	strb	r1, [r3, #0]
 8003384:	e7c5      	b.n	8003312 <_puts_r+0x42>
 8003386:	4622      	mov	r2, r4
 8003388:	4628      	mov	r0, r5
 800338a:	f000 f8d5 	bl	8003538 <__swbuf_r>
 800338e:	3001      	adds	r0, #1
 8003390:	d1bf      	bne.n	8003312 <_puts_r+0x42>
 8003392:	e7df      	b.n	8003354 <_puts_r+0x84>
 8003394:	250a      	movs	r5, #10
 8003396:	6823      	ldr	r3, [r4, #0]
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	6022      	str	r2, [r4, #0]
 800339c:	701d      	strb	r5, [r3, #0]
 800339e:	e7db      	b.n	8003358 <_puts_r+0x88>
 80033a0:	08003b30 	.word	0x08003b30
 80033a4:	08003b50 	.word	0x08003b50
 80033a8:	08003b10 	.word	0x08003b10

080033ac <puts>:
 80033ac:	4b02      	ldr	r3, [pc, #8]	; (80033b8 <puts+0xc>)
 80033ae:	4601      	mov	r1, r0
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	f7ff bf8d 	b.w	80032d0 <_puts_r>
 80033b6:	bf00      	nop
 80033b8:	20000010 	.word	0x20000010

080033bc <cleanup_glue>:
 80033bc:	b538      	push	{r3, r4, r5, lr}
 80033be:	460c      	mov	r4, r1
 80033c0:	6809      	ldr	r1, [r1, #0]
 80033c2:	4605      	mov	r5, r0
 80033c4:	b109      	cbz	r1, 80033ca <cleanup_glue+0xe>
 80033c6:	f7ff fff9 	bl	80033bc <cleanup_glue>
 80033ca:	4621      	mov	r1, r4
 80033cc:	4628      	mov	r0, r5
 80033ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033d2:	f000 bad5 	b.w	8003980 <_free_r>
	...

080033d8 <_reclaim_reent>:
 80033d8:	4b2c      	ldr	r3, [pc, #176]	; (800348c <_reclaim_reent+0xb4>)
 80033da:	b570      	push	{r4, r5, r6, lr}
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4604      	mov	r4, r0
 80033e0:	4283      	cmp	r3, r0
 80033e2:	d051      	beq.n	8003488 <_reclaim_reent+0xb0>
 80033e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80033e6:	b143      	cbz	r3, 80033fa <_reclaim_reent+0x22>
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d14a      	bne.n	8003484 <_reclaim_reent+0xac>
 80033ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033f0:	6819      	ldr	r1, [r3, #0]
 80033f2:	b111      	cbz	r1, 80033fa <_reclaim_reent+0x22>
 80033f4:	4620      	mov	r0, r4
 80033f6:	f000 fac3 	bl	8003980 <_free_r>
 80033fa:	6961      	ldr	r1, [r4, #20]
 80033fc:	b111      	cbz	r1, 8003404 <_reclaim_reent+0x2c>
 80033fe:	4620      	mov	r0, r4
 8003400:	f000 fabe 	bl	8003980 <_free_r>
 8003404:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003406:	b111      	cbz	r1, 800340e <_reclaim_reent+0x36>
 8003408:	4620      	mov	r0, r4
 800340a:	f000 fab9 	bl	8003980 <_free_r>
 800340e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003410:	b111      	cbz	r1, 8003418 <_reclaim_reent+0x40>
 8003412:	4620      	mov	r0, r4
 8003414:	f000 fab4 	bl	8003980 <_free_r>
 8003418:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800341a:	b111      	cbz	r1, 8003422 <_reclaim_reent+0x4a>
 800341c:	4620      	mov	r0, r4
 800341e:	f000 faaf 	bl	8003980 <_free_r>
 8003422:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003424:	b111      	cbz	r1, 800342c <_reclaim_reent+0x54>
 8003426:	4620      	mov	r0, r4
 8003428:	f000 faaa 	bl	8003980 <_free_r>
 800342c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800342e:	b111      	cbz	r1, 8003436 <_reclaim_reent+0x5e>
 8003430:	4620      	mov	r0, r4
 8003432:	f000 faa5 	bl	8003980 <_free_r>
 8003436:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003438:	b111      	cbz	r1, 8003440 <_reclaim_reent+0x68>
 800343a:	4620      	mov	r0, r4
 800343c:	f000 faa0 	bl	8003980 <_free_r>
 8003440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003442:	b111      	cbz	r1, 800344a <_reclaim_reent+0x72>
 8003444:	4620      	mov	r0, r4
 8003446:	f000 fa9b 	bl	8003980 <_free_r>
 800344a:	69a3      	ldr	r3, [r4, #24]
 800344c:	b1e3      	cbz	r3, 8003488 <_reclaim_reent+0xb0>
 800344e:	4620      	mov	r0, r4
 8003450:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003452:	4798      	blx	r3
 8003454:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003456:	b1b9      	cbz	r1, 8003488 <_reclaim_reent+0xb0>
 8003458:	4620      	mov	r0, r4
 800345a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800345e:	f7ff bfad 	b.w	80033bc <cleanup_glue>
 8003462:	5949      	ldr	r1, [r1, r5]
 8003464:	b941      	cbnz	r1, 8003478 <_reclaim_reent+0xa0>
 8003466:	3504      	adds	r5, #4
 8003468:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800346a:	2d80      	cmp	r5, #128	; 0x80
 800346c:	68d9      	ldr	r1, [r3, #12]
 800346e:	d1f8      	bne.n	8003462 <_reclaim_reent+0x8a>
 8003470:	4620      	mov	r0, r4
 8003472:	f000 fa85 	bl	8003980 <_free_r>
 8003476:	e7ba      	b.n	80033ee <_reclaim_reent+0x16>
 8003478:	680e      	ldr	r6, [r1, #0]
 800347a:	4620      	mov	r0, r4
 800347c:	f000 fa80 	bl	8003980 <_free_r>
 8003480:	4631      	mov	r1, r6
 8003482:	e7ef      	b.n	8003464 <_reclaim_reent+0x8c>
 8003484:	2500      	movs	r5, #0
 8003486:	e7ef      	b.n	8003468 <_reclaim_reent+0x90>
 8003488:	bd70      	pop	{r4, r5, r6, pc}
 800348a:	bf00      	nop
 800348c:	20000010 	.word	0x20000010

08003490 <_sbrk_r>:
 8003490:	b538      	push	{r3, r4, r5, lr}
 8003492:	2300      	movs	r3, #0
 8003494:	4d05      	ldr	r5, [pc, #20]	; (80034ac <_sbrk_r+0x1c>)
 8003496:	4604      	mov	r4, r0
 8003498:	4608      	mov	r0, r1
 800349a:	602b      	str	r3, [r5, #0]
 800349c:	f7fd f948 	bl	8000730 <_sbrk>
 80034a0:	1c43      	adds	r3, r0, #1
 80034a2:	d102      	bne.n	80034aa <_sbrk_r+0x1a>
 80034a4:	682b      	ldr	r3, [r5, #0]
 80034a6:	b103      	cbz	r3, 80034aa <_sbrk_r+0x1a>
 80034a8:	6023      	str	r3, [r4, #0]
 80034aa:	bd38      	pop	{r3, r4, r5, pc}
 80034ac:	20001130 	.word	0x20001130

080034b0 <__sread>:
 80034b0:	b510      	push	{r4, lr}
 80034b2:	460c      	mov	r4, r1
 80034b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034b8:	f000 faaa 	bl	8003a10 <_read_r>
 80034bc:	2800      	cmp	r0, #0
 80034be:	bfab      	itete	ge
 80034c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80034c2:	89a3      	ldrhlt	r3, [r4, #12]
 80034c4:	181b      	addge	r3, r3, r0
 80034c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80034ca:	bfac      	ite	ge
 80034cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80034ce:	81a3      	strhlt	r3, [r4, #12]
 80034d0:	bd10      	pop	{r4, pc}

080034d2 <__swrite>:
 80034d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034d6:	461f      	mov	r7, r3
 80034d8:	898b      	ldrh	r3, [r1, #12]
 80034da:	4605      	mov	r5, r0
 80034dc:	05db      	lsls	r3, r3, #23
 80034de:	460c      	mov	r4, r1
 80034e0:	4616      	mov	r6, r2
 80034e2:	d505      	bpl.n	80034f0 <__swrite+0x1e>
 80034e4:	2302      	movs	r3, #2
 80034e6:	2200      	movs	r2, #0
 80034e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034ec:	f000 f9c4 	bl	8003878 <_lseek_r>
 80034f0:	89a3      	ldrh	r3, [r4, #12]
 80034f2:	4632      	mov	r2, r6
 80034f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034f8:	81a3      	strh	r3, [r4, #12]
 80034fa:	4628      	mov	r0, r5
 80034fc:	463b      	mov	r3, r7
 80034fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003506:	f000 b869 	b.w	80035dc <_write_r>

0800350a <__sseek>:
 800350a:	b510      	push	{r4, lr}
 800350c:	460c      	mov	r4, r1
 800350e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003512:	f000 f9b1 	bl	8003878 <_lseek_r>
 8003516:	1c43      	adds	r3, r0, #1
 8003518:	89a3      	ldrh	r3, [r4, #12]
 800351a:	bf15      	itete	ne
 800351c:	6560      	strne	r0, [r4, #84]	; 0x54
 800351e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003522:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003526:	81a3      	strheq	r3, [r4, #12]
 8003528:	bf18      	it	ne
 800352a:	81a3      	strhne	r3, [r4, #12]
 800352c:	bd10      	pop	{r4, pc}

0800352e <__sclose>:
 800352e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003532:	f000 b8d3 	b.w	80036dc <_close_r>
	...

08003538 <__swbuf_r>:
 8003538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353a:	460e      	mov	r6, r1
 800353c:	4614      	mov	r4, r2
 800353e:	4605      	mov	r5, r0
 8003540:	b118      	cbz	r0, 800354a <__swbuf_r+0x12>
 8003542:	6983      	ldr	r3, [r0, #24]
 8003544:	b90b      	cbnz	r3, 800354a <__swbuf_r+0x12>
 8003546:	f7ff fd61 	bl	800300c <__sinit>
 800354a:	4b21      	ldr	r3, [pc, #132]	; (80035d0 <__swbuf_r+0x98>)
 800354c:	429c      	cmp	r4, r3
 800354e:	d12b      	bne.n	80035a8 <__swbuf_r+0x70>
 8003550:	686c      	ldr	r4, [r5, #4]
 8003552:	69a3      	ldr	r3, [r4, #24]
 8003554:	60a3      	str	r3, [r4, #8]
 8003556:	89a3      	ldrh	r3, [r4, #12]
 8003558:	071a      	lsls	r2, r3, #28
 800355a:	d52f      	bpl.n	80035bc <__swbuf_r+0x84>
 800355c:	6923      	ldr	r3, [r4, #16]
 800355e:	b36b      	cbz	r3, 80035bc <__swbuf_r+0x84>
 8003560:	6923      	ldr	r3, [r4, #16]
 8003562:	6820      	ldr	r0, [r4, #0]
 8003564:	b2f6      	uxtb	r6, r6
 8003566:	1ac0      	subs	r0, r0, r3
 8003568:	6963      	ldr	r3, [r4, #20]
 800356a:	4637      	mov	r7, r6
 800356c:	4283      	cmp	r3, r0
 800356e:	dc04      	bgt.n	800357a <__swbuf_r+0x42>
 8003570:	4621      	mov	r1, r4
 8003572:	4628      	mov	r0, r5
 8003574:	f000 f944 	bl	8003800 <_fflush_r>
 8003578:	bb30      	cbnz	r0, 80035c8 <__swbuf_r+0x90>
 800357a:	68a3      	ldr	r3, [r4, #8]
 800357c:	3001      	adds	r0, #1
 800357e:	3b01      	subs	r3, #1
 8003580:	60a3      	str	r3, [r4, #8]
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	6022      	str	r2, [r4, #0]
 8003588:	701e      	strb	r6, [r3, #0]
 800358a:	6963      	ldr	r3, [r4, #20]
 800358c:	4283      	cmp	r3, r0
 800358e:	d004      	beq.n	800359a <__swbuf_r+0x62>
 8003590:	89a3      	ldrh	r3, [r4, #12]
 8003592:	07db      	lsls	r3, r3, #31
 8003594:	d506      	bpl.n	80035a4 <__swbuf_r+0x6c>
 8003596:	2e0a      	cmp	r6, #10
 8003598:	d104      	bne.n	80035a4 <__swbuf_r+0x6c>
 800359a:	4621      	mov	r1, r4
 800359c:	4628      	mov	r0, r5
 800359e:	f000 f92f 	bl	8003800 <_fflush_r>
 80035a2:	b988      	cbnz	r0, 80035c8 <__swbuf_r+0x90>
 80035a4:	4638      	mov	r0, r7
 80035a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035a8:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <__swbuf_r+0x9c>)
 80035aa:	429c      	cmp	r4, r3
 80035ac:	d101      	bne.n	80035b2 <__swbuf_r+0x7a>
 80035ae:	68ac      	ldr	r4, [r5, #8]
 80035b0:	e7cf      	b.n	8003552 <__swbuf_r+0x1a>
 80035b2:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <__swbuf_r+0xa0>)
 80035b4:	429c      	cmp	r4, r3
 80035b6:	bf08      	it	eq
 80035b8:	68ec      	ldreq	r4, [r5, #12]
 80035ba:	e7ca      	b.n	8003552 <__swbuf_r+0x1a>
 80035bc:	4621      	mov	r1, r4
 80035be:	4628      	mov	r0, r5
 80035c0:	f000 f81e 	bl	8003600 <__swsetup_r>
 80035c4:	2800      	cmp	r0, #0
 80035c6:	d0cb      	beq.n	8003560 <__swbuf_r+0x28>
 80035c8:	f04f 37ff 	mov.w	r7, #4294967295
 80035cc:	e7ea      	b.n	80035a4 <__swbuf_r+0x6c>
 80035ce:	bf00      	nop
 80035d0:	08003b30 	.word	0x08003b30
 80035d4:	08003b50 	.word	0x08003b50
 80035d8:	08003b10 	.word	0x08003b10

080035dc <_write_r>:
 80035dc:	b538      	push	{r3, r4, r5, lr}
 80035de:	4604      	mov	r4, r0
 80035e0:	4608      	mov	r0, r1
 80035e2:	4611      	mov	r1, r2
 80035e4:	2200      	movs	r2, #0
 80035e6:	4d05      	ldr	r5, [pc, #20]	; (80035fc <_write_r+0x20>)
 80035e8:	602a      	str	r2, [r5, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	f7fd f853 	bl	8000696 <_write>
 80035f0:	1c43      	adds	r3, r0, #1
 80035f2:	d102      	bne.n	80035fa <_write_r+0x1e>
 80035f4:	682b      	ldr	r3, [r5, #0]
 80035f6:	b103      	cbz	r3, 80035fa <_write_r+0x1e>
 80035f8:	6023      	str	r3, [r4, #0]
 80035fa:	bd38      	pop	{r3, r4, r5, pc}
 80035fc:	20001130 	.word	0x20001130

08003600 <__swsetup_r>:
 8003600:	4b32      	ldr	r3, [pc, #200]	; (80036cc <__swsetup_r+0xcc>)
 8003602:	b570      	push	{r4, r5, r6, lr}
 8003604:	681d      	ldr	r5, [r3, #0]
 8003606:	4606      	mov	r6, r0
 8003608:	460c      	mov	r4, r1
 800360a:	b125      	cbz	r5, 8003616 <__swsetup_r+0x16>
 800360c:	69ab      	ldr	r3, [r5, #24]
 800360e:	b913      	cbnz	r3, 8003616 <__swsetup_r+0x16>
 8003610:	4628      	mov	r0, r5
 8003612:	f7ff fcfb 	bl	800300c <__sinit>
 8003616:	4b2e      	ldr	r3, [pc, #184]	; (80036d0 <__swsetup_r+0xd0>)
 8003618:	429c      	cmp	r4, r3
 800361a:	d10f      	bne.n	800363c <__swsetup_r+0x3c>
 800361c:	686c      	ldr	r4, [r5, #4]
 800361e:	89a3      	ldrh	r3, [r4, #12]
 8003620:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003624:	0719      	lsls	r1, r3, #28
 8003626:	d42c      	bmi.n	8003682 <__swsetup_r+0x82>
 8003628:	06dd      	lsls	r5, r3, #27
 800362a:	d411      	bmi.n	8003650 <__swsetup_r+0x50>
 800362c:	2309      	movs	r3, #9
 800362e:	6033      	str	r3, [r6, #0]
 8003630:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003634:	f04f 30ff 	mov.w	r0, #4294967295
 8003638:	81a3      	strh	r3, [r4, #12]
 800363a:	e03e      	b.n	80036ba <__swsetup_r+0xba>
 800363c:	4b25      	ldr	r3, [pc, #148]	; (80036d4 <__swsetup_r+0xd4>)
 800363e:	429c      	cmp	r4, r3
 8003640:	d101      	bne.n	8003646 <__swsetup_r+0x46>
 8003642:	68ac      	ldr	r4, [r5, #8]
 8003644:	e7eb      	b.n	800361e <__swsetup_r+0x1e>
 8003646:	4b24      	ldr	r3, [pc, #144]	; (80036d8 <__swsetup_r+0xd8>)
 8003648:	429c      	cmp	r4, r3
 800364a:	bf08      	it	eq
 800364c:	68ec      	ldreq	r4, [r5, #12]
 800364e:	e7e6      	b.n	800361e <__swsetup_r+0x1e>
 8003650:	0758      	lsls	r0, r3, #29
 8003652:	d512      	bpl.n	800367a <__swsetup_r+0x7a>
 8003654:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003656:	b141      	cbz	r1, 800366a <__swsetup_r+0x6a>
 8003658:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800365c:	4299      	cmp	r1, r3
 800365e:	d002      	beq.n	8003666 <__swsetup_r+0x66>
 8003660:	4630      	mov	r0, r6
 8003662:	f000 f98d 	bl	8003980 <_free_r>
 8003666:	2300      	movs	r3, #0
 8003668:	6363      	str	r3, [r4, #52]	; 0x34
 800366a:	89a3      	ldrh	r3, [r4, #12]
 800366c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003670:	81a3      	strh	r3, [r4, #12]
 8003672:	2300      	movs	r3, #0
 8003674:	6063      	str	r3, [r4, #4]
 8003676:	6923      	ldr	r3, [r4, #16]
 8003678:	6023      	str	r3, [r4, #0]
 800367a:	89a3      	ldrh	r3, [r4, #12]
 800367c:	f043 0308 	orr.w	r3, r3, #8
 8003680:	81a3      	strh	r3, [r4, #12]
 8003682:	6923      	ldr	r3, [r4, #16]
 8003684:	b94b      	cbnz	r3, 800369a <__swsetup_r+0x9a>
 8003686:	89a3      	ldrh	r3, [r4, #12]
 8003688:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800368c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003690:	d003      	beq.n	800369a <__swsetup_r+0x9a>
 8003692:	4621      	mov	r1, r4
 8003694:	4630      	mov	r0, r6
 8003696:	f000 f927 	bl	80038e8 <__smakebuf_r>
 800369a:	89a0      	ldrh	r0, [r4, #12]
 800369c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036a0:	f010 0301 	ands.w	r3, r0, #1
 80036a4:	d00a      	beq.n	80036bc <__swsetup_r+0xbc>
 80036a6:	2300      	movs	r3, #0
 80036a8:	60a3      	str	r3, [r4, #8]
 80036aa:	6963      	ldr	r3, [r4, #20]
 80036ac:	425b      	negs	r3, r3
 80036ae:	61a3      	str	r3, [r4, #24]
 80036b0:	6923      	ldr	r3, [r4, #16]
 80036b2:	b943      	cbnz	r3, 80036c6 <__swsetup_r+0xc6>
 80036b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80036b8:	d1ba      	bne.n	8003630 <__swsetup_r+0x30>
 80036ba:	bd70      	pop	{r4, r5, r6, pc}
 80036bc:	0781      	lsls	r1, r0, #30
 80036be:	bf58      	it	pl
 80036c0:	6963      	ldrpl	r3, [r4, #20]
 80036c2:	60a3      	str	r3, [r4, #8]
 80036c4:	e7f4      	b.n	80036b0 <__swsetup_r+0xb0>
 80036c6:	2000      	movs	r0, #0
 80036c8:	e7f7      	b.n	80036ba <__swsetup_r+0xba>
 80036ca:	bf00      	nop
 80036cc:	20000010 	.word	0x20000010
 80036d0:	08003b30 	.word	0x08003b30
 80036d4:	08003b50 	.word	0x08003b50
 80036d8:	08003b10 	.word	0x08003b10

080036dc <_close_r>:
 80036dc:	b538      	push	{r3, r4, r5, lr}
 80036de:	2300      	movs	r3, #0
 80036e0:	4d05      	ldr	r5, [pc, #20]	; (80036f8 <_close_r+0x1c>)
 80036e2:	4604      	mov	r4, r0
 80036e4:	4608      	mov	r0, r1
 80036e6:	602b      	str	r3, [r5, #0]
 80036e8:	f7fc fff1 	bl	80006ce <_close>
 80036ec:	1c43      	adds	r3, r0, #1
 80036ee:	d102      	bne.n	80036f6 <_close_r+0x1a>
 80036f0:	682b      	ldr	r3, [r5, #0]
 80036f2:	b103      	cbz	r3, 80036f6 <_close_r+0x1a>
 80036f4:	6023      	str	r3, [r4, #0]
 80036f6:	bd38      	pop	{r3, r4, r5, pc}
 80036f8:	20001130 	.word	0x20001130

080036fc <__sflush_r>:
 80036fc:	898a      	ldrh	r2, [r1, #12]
 80036fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003700:	4605      	mov	r5, r0
 8003702:	0710      	lsls	r0, r2, #28
 8003704:	460c      	mov	r4, r1
 8003706:	d457      	bmi.n	80037b8 <__sflush_r+0xbc>
 8003708:	684b      	ldr	r3, [r1, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	dc04      	bgt.n	8003718 <__sflush_r+0x1c>
 800370e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003710:	2b00      	cmp	r3, #0
 8003712:	dc01      	bgt.n	8003718 <__sflush_r+0x1c>
 8003714:	2000      	movs	r0, #0
 8003716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003718:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800371a:	2e00      	cmp	r6, #0
 800371c:	d0fa      	beq.n	8003714 <__sflush_r+0x18>
 800371e:	2300      	movs	r3, #0
 8003720:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003724:	682f      	ldr	r7, [r5, #0]
 8003726:	602b      	str	r3, [r5, #0]
 8003728:	d032      	beq.n	8003790 <__sflush_r+0x94>
 800372a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800372c:	89a3      	ldrh	r3, [r4, #12]
 800372e:	075a      	lsls	r2, r3, #29
 8003730:	d505      	bpl.n	800373e <__sflush_r+0x42>
 8003732:	6863      	ldr	r3, [r4, #4]
 8003734:	1ac0      	subs	r0, r0, r3
 8003736:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003738:	b10b      	cbz	r3, 800373e <__sflush_r+0x42>
 800373a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800373c:	1ac0      	subs	r0, r0, r3
 800373e:	2300      	movs	r3, #0
 8003740:	4602      	mov	r2, r0
 8003742:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003744:	4628      	mov	r0, r5
 8003746:	6a21      	ldr	r1, [r4, #32]
 8003748:	47b0      	blx	r6
 800374a:	1c43      	adds	r3, r0, #1
 800374c:	89a3      	ldrh	r3, [r4, #12]
 800374e:	d106      	bne.n	800375e <__sflush_r+0x62>
 8003750:	6829      	ldr	r1, [r5, #0]
 8003752:	291d      	cmp	r1, #29
 8003754:	d82c      	bhi.n	80037b0 <__sflush_r+0xb4>
 8003756:	4a29      	ldr	r2, [pc, #164]	; (80037fc <__sflush_r+0x100>)
 8003758:	40ca      	lsrs	r2, r1
 800375a:	07d6      	lsls	r6, r2, #31
 800375c:	d528      	bpl.n	80037b0 <__sflush_r+0xb4>
 800375e:	2200      	movs	r2, #0
 8003760:	6062      	str	r2, [r4, #4]
 8003762:	6922      	ldr	r2, [r4, #16]
 8003764:	04d9      	lsls	r1, r3, #19
 8003766:	6022      	str	r2, [r4, #0]
 8003768:	d504      	bpl.n	8003774 <__sflush_r+0x78>
 800376a:	1c42      	adds	r2, r0, #1
 800376c:	d101      	bne.n	8003772 <__sflush_r+0x76>
 800376e:	682b      	ldr	r3, [r5, #0]
 8003770:	b903      	cbnz	r3, 8003774 <__sflush_r+0x78>
 8003772:	6560      	str	r0, [r4, #84]	; 0x54
 8003774:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003776:	602f      	str	r7, [r5, #0]
 8003778:	2900      	cmp	r1, #0
 800377a:	d0cb      	beq.n	8003714 <__sflush_r+0x18>
 800377c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003780:	4299      	cmp	r1, r3
 8003782:	d002      	beq.n	800378a <__sflush_r+0x8e>
 8003784:	4628      	mov	r0, r5
 8003786:	f000 f8fb 	bl	8003980 <_free_r>
 800378a:	2000      	movs	r0, #0
 800378c:	6360      	str	r0, [r4, #52]	; 0x34
 800378e:	e7c2      	b.n	8003716 <__sflush_r+0x1a>
 8003790:	6a21      	ldr	r1, [r4, #32]
 8003792:	2301      	movs	r3, #1
 8003794:	4628      	mov	r0, r5
 8003796:	47b0      	blx	r6
 8003798:	1c41      	adds	r1, r0, #1
 800379a:	d1c7      	bne.n	800372c <__sflush_r+0x30>
 800379c:	682b      	ldr	r3, [r5, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0c4      	beq.n	800372c <__sflush_r+0x30>
 80037a2:	2b1d      	cmp	r3, #29
 80037a4:	d001      	beq.n	80037aa <__sflush_r+0xae>
 80037a6:	2b16      	cmp	r3, #22
 80037a8:	d101      	bne.n	80037ae <__sflush_r+0xb2>
 80037aa:	602f      	str	r7, [r5, #0]
 80037ac:	e7b2      	b.n	8003714 <__sflush_r+0x18>
 80037ae:	89a3      	ldrh	r3, [r4, #12]
 80037b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037b4:	81a3      	strh	r3, [r4, #12]
 80037b6:	e7ae      	b.n	8003716 <__sflush_r+0x1a>
 80037b8:	690f      	ldr	r7, [r1, #16]
 80037ba:	2f00      	cmp	r7, #0
 80037bc:	d0aa      	beq.n	8003714 <__sflush_r+0x18>
 80037be:	0793      	lsls	r3, r2, #30
 80037c0:	bf18      	it	ne
 80037c2:	2300      	movne	r3, #0
 80037c4:	680e      	ldr	r6, [r1, #0]
 80037c6:	bf08      	it	eq
 80037c8:	694b      	ldreq	r3, [r1, #20]
 80037ca:	1bf6      	subs	r6, r6, r7
 80037cc:	600f      	str	r7, [r1, #0]
 80037ce:	608b      	str	r3, [r1, #8]
 80037d0:	2e00      	cmp	r6, #0
 80037d2:	dd9f      	ble.n	8003714 <__sflush_r+0x18>
 80037d4:	4633      	mov	r3, r6
 80037d6:	463a      	mov	r2, r7
 80037d8:	4628      	mov	r0, r5
 80037da:	6a21      	ldr	r1, [r4, #32]
 80037dc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80037e0:	47e0      	blx	ip
 80037e2:	2800      	cmp	r0, #0
 80037e4:	dc06      	bgt.n	80037f4 <__sflush_r+0xf8>
 80037e6:	89a3      	ldrh	r3, [r4, #12]
 80037e8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037f0:	81a3      	strh	r3, [r4, #12]
 80037f2:	e790      	b.n	8003716 <__sflush_r+0x1a>
 80037f4:	4407      	add	r7, r0
 80037f6:	1a36      	subs	r6, r6, r0
 80037f8:	e7ea      	b.n	80037d0 <__sflush_r+0xd4>
 80037fa:	bf00      	nop
 80037fc:	20400001 	.word	0x20400001

08003800 <_fflush_r>:
 8003800:	b538      	push	{r3, r4, r5, lr}
 8003802:	690b      	ldr	r3, [r1, #16]
 8003804:	4605      	mov	r5, r0
 8003806:	460c      	mov	r4, r1
 8003808:	b913      	cbnz	r3, 8003810 <_fflush_r+0x10>
 800380a:	2500      	movs	r5, #0
 800380c:	4628      	mov	r0, r5
 800380e:	bd38      	pop	{r3, r4, r5, pc}
 8003810:	b118      	cbz	r0, 800381a <_fflush_r+0x1a>
 8003812:	6983      	ldr	r3, [r0, #24]
 8003814:	b90b      	cbnz	r3, 800381a <_fflush_r+0x1a>
 8003816:	f7ff fbf9 	bl	800300c <__sinit>
 800381a:	4b14      	ldr	r3, [pc, #80]	; (800386c <_fflush_r+0x6c>)
 800381c:	429c      	cmp	r4, r3
 800381e:	d11b      	bne.n	8003858 <_fflush_r+0x58>
 8003820:	686c      	ldr	r4, [r5, #4]
 8003822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0ef      	beq.n	800380a <_fflush_r+0xa>
 800382a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800382c:	07d0      	lsls	r0, r2, #31
 800382e:	d404      	bmi.n	800383a <_fflush_r+0x3a>
 8003830:	0599      	lsls	r1, r3, #22
 8003832:	d402      	bmi.n	800383a <_fflush_r+0x3a>
 8003834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003836:	f7ff fcac 	bl	8003192 <__retarget_lock_acquire_recursive>
 800383a:	4628      	mov	r0, r5
 800383c:	4621      	mov	r1, r4
 800383e:	f7ff ff5d 	bl	80036fc <__sflush_r>
 8003842:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003844:	4605      	mov	r5, r0
 8003846:	07da      	lsls	r2, r3, #31
 8003848:	d4e0      	bmi.n	800380c <_fflush_r+0xc>
 800384a:	89a3      	ldrh	r3, [r4, #12]
 800384c:	059b      	lsls	r3, r3, #22
 800384e:	d4dd      	bmi.n	800380c <_fflush_r+0xc>
 8003850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003852:	f7ff fc9f 	bl	8003194 <__retarget_lock_release_recursive>
 8003856:	e7d9      	b.n	800380c <_fflush_r+0xc>
 8003858:	4b05      	ldr	r3, [pc, #20]	; (8003870 <_fflush_r+0x70>)
 800385a:	429c      	cmp	r4, r3
 800385c:	d101      	bne.n	8003862 <_fflush_r+0x62>
 800385e:	68ac      	ldr	r4, [r5, #8]
 8003860:	e7df      	b.n	8003822 <_fflush_r+0x22>
 8003862:	4b04      	ldr	r3, [pc, #16]	; (8003874 <_fflush_r+0x74>)
 8003864:	429c      	cmp	r4, r3
 8003866:	bf08      	it	eq
 8003868:	68ec      	ldreq	r4, [r5, #12]
 800386a:	e7da      	b.n	8003822 <_fflush_r+0x22>
 800386c:	08003b30 	.word	0x08003b30
 8003870:	08003b50 	.word	0x08003b50
 8003874:	08003b10 	.word	0x08003b10

08003878 <_lseek_r>:
 8003878:	b538      	push	{r3, r4, r5, lr}
 800387a:	4604      	mov	r4, r0
 800387c:	4608      	mov	r0, r1
 800387e:	4611      	mov	r1, r2
 8003880:	2200      	movs	r2, #0
 8003882:	4d05      	ldr	r5, [pc, #20]	; (8003898 <_lseek_r+0x20>)
 8003884:	602a      	str	r2, [r5, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	f7fc ff45 	bl	8000716 <_lseek>
 800388c:	1c43      	adds	r3, r0, #1
 800388e:	d102      	bne.n	8003896 <_lseek_r+0x1e>
 8003890:	682b      	ldr	r3, [r5, #0]
 8003892:	b103      	cbz	r3, 8003896 <_lseek_r+0x1e>
 8003894:	6023      	str	r3, [r4, #0]
 8003896:	bd38      	pop	{r3, r4, r5, pc}
 8003898:	20001130 	.word	0x20001130

0800389c <__swhatbuf_r>:
 800389c:	b570      	push	{r4, r5, r6, lr}
 800389e:	460e      	mov	r6, r1
 80038a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038a4:	4614      	mov	r4, r2
 80038a6:	2900      	cmp	r1, #0
 80038a8:	461d      	mov	r5, r3
 80038aa:	b096      	sub	sp, #88	; 0x58
 80038ac:	da08      	bge.n	80038c0 <__swhatbuf_r+0x24>
 80038ae:	2200      	movs	r2, #0
 80038b0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80038b4:	602a      	str	r2, [r5, #0]
 80038b6:	061a      	lsls	r2, r3, #24
 80038b8:	d410      	bmi.n	80038dc <__swhatbuf_r+0x40>
 80038ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038be:	e00e      	b.n	80038de <__swhatbuf_r+0x42>
 80038c0:	466a      	mov	r2, sp
 80038c2:	f000 f8b7 	bl	8003a34 <_fstat_r>
 80038c6:	2800      	cmp	r0, #0
 80038c8:	dbf1      	blt.n	80038ae <__swhatbuf_r+0x12>
 80038ca:	9a01      	ldr	r2, [sp, #4]
 80038cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80038d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80038d4:	425a      	negs	r2, r3
 80038d6:	415a      	adcs	r2, r3
 80038d8:	602a      	str	r2, [r5, #0]
 80038da:	e7ee      	b.n	80038ba <__swhatbuf_r+0x1e>
 80038dc:	2340      	movs	r3, #64	; 0x40
 80038de:	2000      	movs	r0, #0
 80038e0:	6023      	str	r3, [r4, #0]
 80038e2:	b016      	add	sp, #88	; 0x58
 80038e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080038e8 <__smakebuf_r>:
 80038e8:	898b      	ldrh	r3, [r1, #12]
 80038ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80038ec:	079d      	lsls	r5, r3, #30
 80038ee:	4606      	mov	r6, r0
 80038f0:	460c      	mov	r4, r1
 80038f2:	d507      	bpl.n	8003904 <__smakebuf_r+0x1c>
 80038f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80038f8:	6023      	str	r3, [r4, #0]
 80038fa:	6123      	str	r3, [r4, #16]
 80038fc:	2301      	movs	r3, #1
 80038fe:	6163      	str	r3, [r4, #20]
 8003900:	b002      	add	sp, #8
 8003902:	bd70      	pop	{r4, r5, r6, pc}
 8003904:	466a      	mov	r2, sp
 8003906:	ab01      	add	r3, sp, #4
 8003908:	f7ff ffc8 	bl	800389c <__swhatbuf_r>
 800390c:	9900      	ldr	r1, [sp, #0]
 800390e:	4605      	mov	r5, r0
 8003910:	4630      	mov	r0, r6
 8003912:	f7ff fc69 	bl	80031e8 <_malloc_r>
 8003916:	b948      	cbnz	r0, 800392c <__smakebuf_r+0x44>
 8003918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800391c:	059a      	lsls	r2, r3, #22
 800391e:	d4ef      	bmi.n	8003900 <__smakebuf_r+0x18>
 8003920:	f023 0303 	bic.w	r3, r3, #3
 8003924:	f043 0302 	orr.w	r3, r3, #2
 8003928:	81a3      	strh	r3, [r4, #12]
 800392a:	e7e3      	b.n	80038f4 <__smakebuf_r+0xc>
 800392c:	4b0d      	ldr	r3, [pc, #52]	; (8003964 <__smakebuf_r+0x7c>)
 800392e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003930:	89a3      	ldrh	r3, [r4, #12]
 8003932:	6020      	str	r0, [r4, #0]
 8003934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003938:	81a3      	strh	r3, [r4, #12]
 800393a:	9b00      	ldr	r3, [sp, #0]
 800393c:	6120      	str	r0, [r4, #16]
 800393e:	6163      	str	r3, [r4, #20]
 8003940:	9b01      	ldr	r3, [sp, #4]
 8003942:	b15b      	cbz	r3, 800395c <__smakebuf_r+0x74>
 8003944:	4630      	mov	r0, r6
 8003946:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800394a:	f000 f885 	bl	8003a58 <_isatty_r>
 800394e:	b128      	cbz	r0, 800395c <__smakebuf_r+0x74>
 8003950:	89a3      	ldrh	r3, [r4, #12]
 8003952:	f023 0303 	bic.w	r3, r3, #3
 8003956:	f043 0301 	orr.w	r3, r3, #1
 800395a:	81a3      	strh	r3, [r4, #12]
 800395c:	89a0      	ldrh	r0, [r4, #12]
 800395e:	4305      	orrs	r5, r0
 8003960:	81a5      	strh	r5, [r4, #12]
 8003962:	e7cd      	b.n	8003900 <__smakebuf_r+0x18>
 8003964:	08002fa5 	.word	0x08002fa5

08003968 <__malloc_lock>:
 8003968:	4801      	ldr	r0, [pc, #4]	; (8003970 <__malloc_lock+0x8>)
 800396a:	f7ff bc12 	b.w	8003192 <__retarget_lock_acquire_recursive>
 800396e:	bf00      	nop
 8003970:	20001124 	.word	0x20001124

08003974 <__malloc_unlock>:
 8003974:	4801      	ldr	r0, [pc, #4]	; (800397c <__malloc_unlock+0x8>)
 8003976:	f7ff bc0d 	b.w	8003194 <__retarget_lock_release_recursive>
 800397a:	bf00      	nop
 800397c:	20001124 	.word	0x20001124

08003980 <_free_r>:
 8003980:	b538      	push	{r3, r4, r5, lr}
 8003982:	4605      	mov	r5, r0
 8003984:	2900      	cmp	r1, #0
 8003986:	d040      	beq.n	8003a0a <_free_r+0x8a>
 8003988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800398c:	1f0c      	subs	r4, r1, #4
 800398e:	2b00      	cmp	r3, #0
 8003990:	bfb8      	it	lt
 8003992:	18e4      	addlt	r4, r4, r3
 8003994:	f7ff ffe8 	bl	8003968 <__malloc_lock>
 8003998:	4a1c      	ldr	r2, [pc, #112]	; (8003a0c <_free_r+0x8c>)
 800399a:	6813      	ldr	r3, [r2, #0]
 800399c:	b933      	cbnz	r3, 80039ac <_free_r+0x2c>
 800399e:	6063      	str	r3, [r4, #4]
 80039a0:	6014      	str	r4, [r2, #0]
 80039a2:	4628      	mov	r0, r5
 80039a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039a8:	f7ff bfe4 	b.w	8003974 <__malloc_unlock>
 80039ac:	42a3      	cmp	r3, r4
 80039ae:	d908      	bls.n	80039c2 <_free_r+0x42>
 80039b0:	6820      	ldr	r0, [r4, #0]
 80039b2:	1821      	adds	r1, r4, r0
 80039b4:	428b      	cmp	r3, r1
 80039b6:	bf01      	itttt	eq
 80039b8:	6819      	ldreq	r1, [r3, #0]
 80039ba:	685b      	ldreq	r3, [r3, #4]
 80039bc:	1809      	addeq	r1, r1, r0
 80039be:	6021      	streq	r1, [r4, #0]
 80039c0:	e7ed      	b.n	800399e <_free_r+0x1e>
 80039c2:	461a      	mov	r2, r3
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	b10b      	cbz	r3, 80039cc <_free_r+0x4c>
 80039c8:	42a3      	cmp	r3, r4
 80039ca:	d9fa      	bls.n	80039c2 <_free_r+0x42>
 80039cc:	6811      	ldr	r1, [r2, #0]
 80039ce:	1850      	adds	r0, r2, r1
 80039d0:	42a0      	cmp	r0, r4
 80039d2:	d10b      	bne.n	80039ec <_free_r+0x6c>
 80039d4:	6820      	ldr	r0, [r4, #0]
 80039d6:	4401      	add	r1, r0
 80039d8:	1850      	adds	r0, r2, r1
 80039da:	4283      	cmp	r3, r0
 80039dc:	6011      	str	r1, [r2, #0]
 80039de:	d1e0      	bne.n	80039a2 <_free_r+0x22>
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	4401      	add	r1, r0
 80039e6:	6011      	str	r1, [r2, #0]
 80039e8:	6053      	str	r3, [r2, #4]
 80039ea:	e7da      	b.n	80039a2 <_free_r+0x22>
 80039ec:	d902      	bls.n	80039f4 <_free_r+0x74>
 80039ee:	230c      	movs	r3, #12
 80039f0:	602b      	str	r3, [r5, #0]
 80039f2:	e7d6      	b.n	80039a2 <_free_r+0x22>
 80039f4:	6820      	ldr	r0, [r4, #0]
 80039f6:	1821      	adds	r1, r4, r0
 80039f8:	428b      	cmp	r3, r1
 80039fa:	bf01      	itttt	eq
 80039fc:	6819      	ldreq	r1, [r3, #0]
 80039fe:	685b      	ldreq	r3, [r3, #4]
 8003a00:	1809      	addeq	r1, r1, r0
 8003a02:	6021      	streq	r1, [r4, #0]
 8003a04:	6063      	str	r3, [r4, #4]
 8003a06:	6054      	str	r4, [r2, #4]
 8003a08:	e7cb      	b.n	80039a2 <_free_r+0x22>
 8003a0a:	bd38      	pop	{r3, r4, r5, pc}
 8003a0c:	20001128 	.word	0x20001128

08003a10 <_read_r>:
 8003a10:	b538      	push	{r3, r4, r5, lr}
 8003a12:	4604      	mov	r4, r0
 8003a14:	4608      	mov	r0, r1
 8003a16:	4611      	mov	r1, r2
 8003a18:	2200      	movs	r2, #0
 8003a1a:	4d05      	ldr	r5, [pc, #20]	; (8003a30 <_read_r+0x20>)
 8003a1c:	602a      	str	r2, [r5, #0]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f7fc fe1c 	bl	800065c <_read>
 8003a24:	1c43      	adds	r3, r0, #1
 8003a26:	d102      	bne.n	8003a2e <_read_r+0x1e>
 8003a28:	682b      	ldr	r3, [r5, #0]
 8003a2a:	b103      	cbz	r3, 8003a2e <_read_r+0x1e>
 8003a2c:	6023      	str	r3, [r4, #0]
 8003a2e:	bd38      	pop	{r3, r4, r5, pc}
 8003a30:	20001130 	.word	0x20001130

08003a34 <_fstat_r>:
 8003a34:	b538      	push	{r3, r4, r5, lr}
 8003a36:	2300      	movs	r3, #0
 8003a38:	4d06      	ldr	r5, [pc, #24]	; (8003a54 <_fstat_r+0x20>)
 8003a3a:	4604      	mov	r4, r0
 8003a3c:	4608      	mov	r0, r1
 8003a3e:	4611      	mov	r1, r2
 8003a40:	602b      	str	r3, [r5, #0]
 8003a42:	f7fc fe4f 	bl	80006e4 <_fstat>
 8003a46:	1c43      	adds	r3, r0, #1
 8003a48:	d102      	bne.n	8003a50 <_fstat_r+0x1c>
 8003a4a:	682b      	ldr	r3, [r5, #0]
 8003a4c:	b103      	cbz	r3, 8003a50 <_fstat_r+0x1c>
 8003a4e:	6023      	str	r3, [r4, #0]
 8003a50:	bd38      	pop	{r3, r4, r5, pc}
 8003a52:	bf00      	nop
 8003a54:	20001130 	.word	0x20001130

08003a58 <_isatty_r>:
 8003a58:	b538      	push	{r3, r4, r5, lr}
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	4d05      	ldr	r5, [pc, #20]	; (8003a74 <_isatty_r+0x1c>)
 8003a5e:	4604      	mov	r4, r0
 8003a60:	4608      	mov	r0, r1
 8003a62:	602b      	str	r3, [r5, #0]
 8003a64:	f7fc fe4d 	bl	8000702 <_isatty>
 8003a68:	1c43      	adds	r3, r0, #1
 8003a6a:	d102      	bne.n	8003a72 <_isatty_r+0x1a>
 8003a6c:	682b      	ldr	r3, [r5, #0]
 8003a6e:	b103      	cbz	r3, 8003a72 <_isatty_r+0x1a>
 8003a70:	6023      	str	r3, [r4, #0]
 8003a72:	bd38      	pop	{r3, r4, r5, pc}
 8003a74:	20001130 	.word	0x20001130

08003a78 <_init>:
 8003a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7a:	bf00      	nop
 8003a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a7e:	bc08      	pop	{r3}
 8003a80:	469e      	mov	lr, r3
 8003a82:	4770      	bx	lr

08003a84 <_fini>:
 8003a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a86:	bf00      	nop
 8003a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a8a:	bc08      	pop	{r3}
 8003a8c:	469e      	mov	lr, r3
 8003a8e:	4770      	bx	lr
