
BASE_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005468  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e8c  08005578  08005578  00015578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006404  08006404  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08006404  08006404  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006404  08006404  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006404  08006404  00016404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006408  08006408  00016408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800640c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000131c  2000007c  08006488  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001398  08006488  00021398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012764  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e1b  00000000  00000000  00032809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  00035628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d8  00000000  00000000  00036910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8dc  00000000  00000000  00037ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153bf  00000000  00000000  000523c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000962cd  00000000  00000000  00067783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fda50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f4  00000000  00000000  000fdaa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005560 	.word	0x08005560

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08005560 	.word	0x08005560

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000098 	.word	0x20000098
 800017c:	2000014c 	.word	0x2000014c

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b08c      	sub	sp, #48	; 0x30
 8000184:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 ff27 	bl	8000fd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f89b 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f92d 	bl	80003ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000192:	f000 f901 	bl	8000398 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000196:	f000 f8d1 	bl	800033c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	SSD1306_Init();
 800019a:	f000 fa47 	bl	800062c <SSD1306_Init>
	char snum[5];

	SSD1306_GotoXY (0,0);
 800019e:	2100      	movs	r1, #0
 80001a0:	2000      	movs	r0, #0
 80001a2:	f000 fbab 	bl	80008fc <SSD1306_GotoXY>
	SSD1306_Puts ("MOR Y", &Font_11x18, SSD1306_COLOR_WHITE);
 80001a6:	2201      	movs	r2, #1
 80001a8:	493a      	ldr	r1, [pc, #232]	; (8000294 <main+0x114>)
 80001aa:	483b      	ldr	r0, [pc, #236]	; (8000298 <main+0x118>)
 80001ac:	f000 fc3c 	bl	8000a28 <SSD1306_Puts>
	SSD1306_GotoXY (0, 20);
 80001b0:	2114      	movs	r1, #20
 80001b2:	2000      	movs	r0, #0
 80001b4:	f000 fba2 	bl	80008fc <SSD1306_GotoXY>
	SSD1306_Puts ("YO XD", &Font_11x18, SSD1306_COLOR_WHITE);
 80001b8:	2201      	movs	r2, #1
 80001ba:	4936      	ldr	r1, [pc, #216]	; (8000294 <main+0x114>)
 80001bc:	4837      	ldr	r0, [pc, #220]	; (800029c <main+0x11c>)
 80001be:	f000 fc33 	bl	8000a28 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80001c2:	f000 faf7 	bl	80007b4 <SSD1306_UpdateScreen>
	HAL_Delay (1000);
 80001c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ca:	f000 ff37 	bl	800103c <HAL_Delay>

	SSD1306_ScrollRight(0,7);
 80001ce:	2107      	movs	r1, #7
 80001d0:	2000      	movs	r0, #0
 80001d2:	f000 f9b6 	bl	8000542 <SSD1306_ScrollRight>
	HAL_Delay(3000);
 80001d6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80001da:	f000 ff2f 	bl	800103c <HAL_Delay>
	SSD1306_ScrollLeft(0,7);
 80001de:	2107      	movs	r1, #7
 80001e0:	2000      	movs	r0, #0
 80001e2:	f000 f9e4 	bl	80005ae <SSD1306_ScrollLeft>
	HAL_Delay(3000);
 80001e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80001ea:	f000 ff27 	bl	800103c <HAL_Delay>
	SSD1306_Stopscroll();
 80001ee:	f000 fa14 	bl	800061a <SSD1306_Stopscroll>
  /* definition and creation of Task1 */
//  osThreadDef(Task1, task1_handler, osPriorityIdle, 0, 128);
//  Task1Handle = osThreadCreate(osThread(Task1), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
    taskCreationStatus = xTaskCreate(task1_UART, "Task-1", 200, "Hello World task 1", 2, &task1_UART_hndl);
 80001f2:	f107 0314 	add.w	r3, r7, #20
 80001f6:	9301      	str	r3, [sp, #4]
 80001f8:	2302      	movs	r3, #2
 80001fa:	9300      	str	r3, [sp, #0]
 80001fc:	4b28      	ldr	r3, [pc, #160]	; (80002a0 <main+0x120>)
 80001fe:	22c8      	movs	r2, #200	; 0xc8
 8000200:	4928      	ldr	r1, [pc, #160]	; (80002a4 <main+0x124>)
 8000202:	4829      	ldr	r0, [pc, #164]	; (80002a8 <main+0x128>)
 8000204:	f003 f889 	bl	800331a <xTaskCreate>
 8000208:	6278      	str	r0, [r7, #36]	; 0x24

    configASSERT(taskCreationStatus == pdPASS);
 800020a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800020c:	2b01      	cmp	r3, #1
 800020e:	d00a      	beq.n	8000226 <main+0xa6>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000214:	f383 8811 	msr	BASEPRI, r3
 8000218:	f3bf 8f6f 	isb	sy
 800021c:	f3bf 8f4f 	dsb	sy
 8000220:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000222:	bf00      	nop
 8000224:	e7fe      	b.n	8000224 <main+0xa4>

    taskCreationStatus = xTaskCreate(task2_UART, "Task-2", 200, "Hello World task 2", 2, &task2_UART_hndl);
 8000226:	f107 0310 	add.w	r3, r7, #16
 800022a:	9301      	str	r3, [sp, #4]
 800022c:	2302      	movs	r3, #2
 800022e:	9300      	str	r3, [sp, #0]
 8000230:	4b1e      	ldr	r3, [pc, #120]	; (80002ac <main+0x12c>)
 8000232:	22c8      	movs	r2, #200	; 0xc8
 8000234:	491e      	ldr	r1, [pc, #120]	; (80002b0 <main+0x130>)
 8000236:	481f      	ldr	r0, [pc, #124]	; (80002b4 <main+0x134>)
 8000238:	f003 f86f 	bl	800331a <xTaskCreate>
 800023c:	6278      	str	r0, [r7, #36]	; 0x24

    configASSERT(taskCreationStatus == pdPASS);
 800023e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000240:	2b01      	cmp	r3, #1
 8000242:	d00a      	beq.n	800025a <main+0xda>
	__asm volatile
 8000244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000248:	f383 8811 	msr	BASEPRI, r3
 800024c:	f3bf 8f6f 	isb	sy
 8000250:	f3bf 8f4f 	dsb	sy
 8000254:	61fb      	str	r3, [r7, #28]
}
 8000256:	bf00      	nop
 8000258:	e7fe      	b.n	8000258 <main+0xd8>

    taskCreationStatus = xTaskCreate(task_LED, "Task-LED", 200, "LED Task", 3, &task_LED_XD);
 800025a:	f107 030c 	add.w	r3, r7, #12
 800025e:	9301      	str	r3, [sp, #4]
 8000260:	2303      	movs	r3, #3
 8000262:	9300      	str	r3, [sp, #0]
 8000264:	4b14      	ldr	r3, [pc, #80]	; (80002b8 <main+0x138>)
 8000266:	22c8      	movs	r2, #200	; 0xc8
 8000268:	4914      	ldr	r1, [pc, #80]	; (80002bc <main+0x13c>)
 800026a:	4815      	ldr	r0, [pc, #84]	; (80002c0 <main+0x140>)
 800026c:	f003 f855 	bl	800331a <xTaskCreate>
 8000270:	6278      	str	r0, [r7, #36]	; 0x24

    configASSERT(taskCreationStatus == pdPASS);
 8000272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000274:	2b01      	cmp	r3, #1
 8000276:	d00a      	beq.n	800028e <main+0x10e>
	__asm volatile
 8000278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800027c:	f383 8811 	msr	BASEPRI, r3
 8000280:	f3bf 8f6f 	isb	sy
 8000284:	f3bf 8f4f 	dsb	sy
 8000288:	61bb      	str	r3, [r7, #24]
}
 800028a:	bf00      	nop
 800028c:	e7fe      	b.n	800028c <main+0x10c>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 800028e:	f003 f9bd 	bl	800360c <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000292:	e7fe      	b.n	8000292 <main+0x112>
 8000294:	20000000 	.word	0x20000000
 8000298:	08005578 	.word	0x08005578
 800029c:	08005580 	.word	0x08005580
 80002a0:	08005588 	.word	0x08005588
 80002a4:	0800559c 	.word	0x0800559c
 80002a8:	08000485 	.word	0x08000485
 80002ac:	080055a4 	.word	0x080055a4
 80002b0:	080055b8 	.word	0x080055b8
 80002b4:	0800049b 	.word	0x0800049b
 80002b8:	080055c0 	.word	0x080055c0
 80002bc:	080055cc 	.word	0x080055cc
 80002c0:	080004b1 	.word	0x080004b1

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b090      	sub	sp, #64	; 0x40
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0318 	add.w	r3, r7, #24
 80002ce:	2228      	movs	r2, #40	; 0x28
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f004 f9bf 	bl	8004656 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
 80002e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e6:	2302      	movs	r3, #2
 80002e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ea:	2301      	movs	r3, #1
 80002ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ee:	2310      	movs	r3, #16
 80002f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f2:	2300      	movs	r3, #0
 80002f4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f6:	f107 0318 	add.w	r3, r7, #24
 80002fa:	4618      	mov	r0, r3
 80002fc:	f001 feb6 	bl	800206c <HAL_RCC_OscConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000306:	f000 f917 	bl	8000538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030a:	230f      	movs	r3, #15
 800030c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800030e:	2300      	movs	r3, #0
 8000310:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f002 f924 	bl	8002570 <HAL_RCC_ClockConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800032e:	f000 f903 	bl	8000538 <Error_Handler>
  }
}
 8000332:	bf00      	nop
 8000334:	3740      	adds	r7, #64	; 0x40
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000340:	4b12      	ldr	r3, [pc, #72]	; (800038c <MX_I2C1_Init+0x50>)
 8000342:	4a13      	ldr	r2, [pc, #76]	; (8000390 <MX_I2C1_Init+0x54>)
 8000344:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000346:	4b11      	ldr	r3, [pc, #68]	; (800038c <MX_I2C1_Init+0x50>)
 8000348:	4a12      	ldr	r2, [pc, #72]	; (8000394 <MX_I2C1_Init+0x58>)
 800034a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800034c:	4b0f      	ldr	r3, [pc, #60]	; (800038c <MX_I2C1_Init+0x50>)
 800034e:	2200      	movs	r2, #0
 8000350:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <MX_I2C1_Init+0x50>)
 8000354:	2200      	movs	r2, #0
 8000356:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000358:	4b0c      	ldr	r3, [pc, #48]	; (800038c <MX_I2C1_Init+0x50>)
 800035a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800035e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <MX_I2C1_Init+0x50>)
 8000362:	2200      	movs	r2, #0
 8000364:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000366:	4b09      	ldr	r3, [pc, #36]	; (800038c <MX_I2C1_Init+0x50>)
 8000368:	2200      	movs	r2, #0
 800036a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800036c:	4b07      	ldr	r3, [pc, #28]	; (800038c <MX_I2C1_Init+0x50>)
 800036e:	2200      	movs	r2, #0
 8000370:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000372:	4b06      	ldr	r3, [pc, #24]	; (800038c <MX_I2C1_Init+0x50>)
 8000374:	2200      	movs	r2, #0
 8000376:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000378:	4804      	ldr	r0, [pc, #16]	; (800038c <MX_I2C1_Init+0x50>)
 800037a:	f001 f8ff 	bl	800157c <HAL_I2C_Init>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000384:	f000 f8d8 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	2000034c 	.word	0x2000034c
 8000390:	40005400 	.word	0x40005400
 8000394:	00061a80 	.word	0x00061a80

08000398 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <MX_USART2_UART_Init+0x4c>)
 800039e:	4a12      	ldr	r2, [pc, #72]	; (80003e8 <MX_USART2_UART_Init+0x50>)
 80003a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003b0:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003b6:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003bc:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003be:	220c      	movs	r2, #12
 80003c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ce:	4805      	ldr	r0, [pc, #20]	; (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003d0:	f002 fce0 	bl	8002d94 <HAL_UART_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003da:	f000 f8ad 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	200003a0 	.word	0x200003a0
 80003e8:	40004400 	.word	0x40004400

080003ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	f107 0310 	add.w	r3, r7, #16
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000400:	4b1e      	ldr	r3, [pc, #120]	; (800047c <MX_GPIO_Init+0x90>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a1d      	ldr	r2, [pc, #116]	; (800047c <MX_GPIO_Init+0x90>)
 8000406:	f043 0310 	orr.w	r3, r3, #16
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b1b      	ldr	r3, [pc, #108]	; (800047c <MX_GPIO_Init+0x90>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0310 	and.w	r3, r3, #16
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000418:	4b18      	ldr	r3, [pc, #96]	; (800047c <MX_GPIO_Init+0x90>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a17      	ldr	r2, [pc, #92]	; (800047c <MX_GPIO_Init+0x90>)
 800041e:	f043 0304 	orr.w	r3, r3, #4
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b15      	ldr	r3, [pc, #84]	; (800047c <MX_GPIO_Init+0x90>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0304 	and.w	r3, r3, #4
 800042c:	60bb      	str	r3, [r7, #8]
 800042e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000430:	4b12      	ldr	r3, [pc, #72]	; (800047c <MX_GPIO_Init+0x90>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a11      	ldr	r2, [pc, #68]	; (800047c <MX_GPIO_Init+0x90>)
 8000436:	f043 0308 	orr.w	r3, r3, #8
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b0f      	ldr	r3, [pc, #60]	; (800047c <MX_GPIO_Init+0x90>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0308 	and.w	r3, r3, #8
 8000444:	607b      	str	r3, [r7, #4]
 8000446:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800044e:	480c      	ldr	r0, [pc, #48]	; (8000480 <MX_GPIO_Init+0x94>)
 8000450:	f001 f87c 	bl	800154c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000454:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000458:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045a:	2301      	movs	r3, #1
 800045c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045e:	2300      	movs	r3, #0
 8000460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000462:	2302      	movs	r3, #2
 8000464:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000466:	f107 0310 	add.w	r3, r7, #16
 800046a:	4619      	mov	r1, r3
 800046c:	4804      	ldr	r0, [pc, #16]	; (8000480 <MX_GPIO_Init+0x94>)
 800046e:	f000 fee9 	bl	8001244 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000472:	bf00      	nop
 8000474:	3720      	adds	r7, #32
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000
 8000480:	40011000 	.word	0x40011000

08000484 <task1_UART>:

/* USER CODE BEGIN 4 */

static void task1_UART(void * parameters)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n", (char*)parameters);
 800048c:	6878      	ldr	r0, [r7, #4]
 800048e:	f004 fa05 	bl	800489c <puts>
		vTaskDelay(100);
 8000492:	2064      	movs	r0, #100	; 0x64
 8000494:	f003 f886 	bl	80035a4 <vTaskDelay>
		printf("%s\n", (char*)parameters);
 8000498:	e7f8      	b.n	800048c <task1_UART+0x8>

0800049a <task2_UART>:
	}
}


static void task2_UART(void * parameters)
{
 800049a:	b580      	push	{r7, lr}
 800049c:	b082      	sub	sp, #8
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n", (char*)parameters);
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	f004 f9fa 	bl	800489c <puts>
		vTaskDelay(100);
 80004a8:	2064      	movs	r0, #100	; 0x64
 80004aa:	f003 f87b 	bl	80035a4 <vTaskDelay>
		printf("%s\n", (char*)parameters);
 80004ae:	e7f8      	b.n	80004a2 <task2_UART+0x8>

080004b0 <task_LED>:
	}

}

static void task_LED(void * parameters)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]

	printf("Hoal");
 80004b8:	480b      	ldr	r0, [pc, #44]	; (80004e8 <task_LED+0x38>)
 80004ba:	f004 f969 	bl	8004790 <iprintf>
	while(1)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004be:	2200      	movs	r2, #0
 80004c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c4:	4809      	ldr	r0, [pc, #36]	; (80004ec <task_LED+0x3c>)
 80004c6:	f001 f841 	bl	800154c <HAL_GPIO_WritePin>
		vTaskDelay(500);
 80004ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004ce:	f003 f869 	bl	80035a4 <vTaskDelay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d8:	4804      	ldr	r0, [pc, #16]	; (80004ec <task_LED+0x3c>)
 80004da:	f001 f837 	bl	800154c <HAL_GPIO_WritePin>
		vTaskDelay(500);
 80004de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004e2:	f003 f85f 	bl	80035a4 <vTaskDelay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004e6:	e7ea      	b.n	80004be <task_LED+0xe>
 80004e8:	080055d8 	.word	0x080055d8
 80004ec:	40011000 	.word	0x40011000

080004f0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80004f8:	1d39      	adds	r1, r7, #4
 80004fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004fe:	2201      	movs	r2, #1
 8000500:	4803      	ldr	r0, [pc, #12]	; (8000510 <__io_putchar+0x20>)
 8000502:	f002 fc94 	bl	8002e2e <HAL_UART_Transmit>

  return ch;
 8000506:	687b      	ldr	r3, [r7, #4]
}
 8000508:	4618      	mov	r0, r3
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	200003a0 	.word	0x200003a0

08000514 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a04      	ldr	r2, [pc, #16]	; (8000534 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d101      	bne.n	800052a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000526:	f000 fd6d 	bl	8001004 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40000800 	.word	0x40000800

08000538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053c:	b672      	cpsid	i
}
 800053e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000540:	e7fe      	b.n	8000540 <Error_Handler+0x8>

08000542 <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b082      	sub	sp, #8
 8000546:	af00      	add	r7, sp, #0
 8000548:	4603      	mov	r3, r0
 800054a:	460a      	mov	r2, r1
 800054c:	71fb      	strb	r3, [r7, #7]
 800054e:	4613      	mov	r3, r2
 8000550:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 8000552:	2226      	movs	r2, #38	; 0x26
 8000554:	2100      	movs	r1, #0
 8000556:	2078      	movs	r0, #120	; 0x78
 8000558:	f000 fb06 	bl	8000b68 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 800055c:	2200      	movs	r2, #0
 800055e:	2100      	movs	r1, #0
 8000560:	2078      	movs	r0, #120	; 0x78
 8000562:	f000 fb01 	bl	8000b68 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	461a      	mov	r2, r3
 800056a:	2100      	movs	r1, #0
 800056c:	2078      	movs	r0, #120	; 0x78
 800056e:	f000 fafb 	bl	8000b68 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8000572:	2200      	movs	r2, #0
 8000574:	2100      	movs	r1, #0
 8000576:	2078      	movs	r0, #120	; 0x78
 8000578:	f000 faf6 	bl	8000b68 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 800057c:	79bb      	ldrb	r3, [r7, #6]
 800057e:	461a      	mov	r2, r3
 8000580:	2100      	movs	r1, #0
 8000582:	2078      	movs	r0, #120	; 0x78
 8000584:	f000 faf0 	bl	8000b68 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8000588:	2200      	movs	r2, #0
 800058a:	2100      	movs	r1, #0
 800058c:	2078      	movs	r0, #120	; 0x78
 800058e:	f000 faeb 	bl	8000b68 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8000592:	22ff      	movs	r2, #255	; 0xff
 8000594:	2100      	movs	r1, #0
 8000596:	2078      	movs	r0, #120	; 0x78
 8000598:	f000 fae6 	bl	8000b68 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 800059c:	222f      	movs	r2, #47	; 0x2f
 800059e:	2100      	movs	r1, #0
 80005a0:	2078      	movs	r0, #120	; 0x78
 80005a2:	f000 fae1 	bl	8000b68 <ssd1306_I2C_Write>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b082      	sub	sp, #8
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	4603      	mov	r3, r0
 80005b6:	460a      	mov	r2, r1
 80005b8:	71fb      	strb	r3, [r7, #7]
 80005ba:	4613      	mov	r3, r2
 80005bc:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 80005be:	2227      	movs	r2, #39	; 0x27
 80005c0:	2100      	movs	r1, #0
 80005c2:	2078      	movs	r0, #120	; 0x78
 80005c4:	f000 fad0 	bl	8000b68 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 80005c8:	2200      	movs	r2, #0
 80005ca:	2100      	movs	r1, #0
 80005cc:	2078      	movs	r0, #120	; 0x78
 80005ce:	f000 facb 	bl	8000b68 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	461a      	mov	r2, r3
 80005d6:	2100      	movs	r1, #0
 80005d8:	2078      	movs	r0, #120	; 0x78
 80005da:	f000 fac5 	bl	8000b68 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	2078      	movs	r0, #120	; 0x78
 80005e4:	f000 fac0 	bl	8000b68 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 80005e8:	79bb      	ldrb	r3, [r7, #6]
 80005ea:	461a      	mov	r2, r3
 80005ec:	2100      	movs	r1, #0
 80005ee:	2078      	movs	r0, #120	; 0x78
 80005f0:	f000 faba 	bl	8000b68 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2100      	movs	r1, #0
 80005f8:	2078      	movs	r0, #120	; 0x78
 80005fa:	f000 fab5 	bl	8000b68 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80005fe:	22ff      	movs	r2, #255	; 0xff
 8000600:	2100      	movs	r1, #0
 8000602:	2078      	movs	r0, #120	; 0x78
 8000604:	f000 fab0 	bl	8000b68 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000608:	222f      	movs	r2, #47	; 0x2f
 800060a:	2100      	movs	r1, #0
 800060c:	2078      	movs	r0, #120	; 0x78
 800060e:	f000 faab 	bl	8000b68 <ssd1306_I2C_Write>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800061e:	222e      	movs	r2, #46	; 0x2e
 8000620:	2100      	movs	r1, #0
 8000622:	2078      	movs	r0, #120	; 0x78
 8000624:	f000 faa0 	bl	8000b68 <ssd1306_I2C_Write>
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}

0800062c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000632:	f000 fa1f 	bl	8000a74 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000636:	f644 6320 	movw	r3, #20000	; 0x4e20
 800063a:	2201      	movs	r2, #1
 800063c:	2178      	movs	r1, #120	; 0x78
 800063e:	485b      	ldr	r0, [pc, #364]	; (80007ac <SSD1306_Init+0x180>)
 8000640:	f001 f9de 	bl	8001a00 <HAL_I2C_IsDeviceReady>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800064a:	2300      	movs	r3, #0
 800064c:	e0a9      	b.n	80007a2 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800064e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000652:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000654:	e002      	b.n	800065c <SSD1306_Init+0x30>
		p--;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	3b01      	subs	r3, #1
 800065a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d1f9      	bne.n	8000656 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000662:	22ae      	movs	r2, #174	; 0xae
 8000664:	2100      	movs	r1, #0
 8000666:	2078      	movs	r0, #120	; 0x78
 8000668:	f000 fa7e 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800066c:	2220      	movs	r2, #32
 800066e:	2100      	movs	r1, #0
 8000670:	2078      	movs	r0, #120	; 0x78
 8000672:	f000 fa79 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000676:	2210      	movs	r2, #16
 8000678:	2100      	movs	r1, #0
 800067a:	2078      	movs	r0, #120	; 0x78
 800067c:	f000 fa74 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000680:	22b0      	movs	r2, #176	; 0xb0
 8000682:	2100      	movs	r1, #0
 8000684:	2078      	movs	r0, #120	; 0x78
 8000686:	f000 fa6f 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800068a:	22c8      	movs	r2, #200	; 0xc8
 800068c:	2100      	movs	r1, #0
 800068e:	2078      	movs	r0, #120	; 0x78
 8000690:	f000 fa6a 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000694:	2200      	movs	r2, #0
 8000696:	2100      	movs	r1, #0
 8000698:	2078      	movs	r0, #120	; 0x78
 800069a:	f000 fa65 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800069e:	2210      	movs	r2, #16
 80006a0:	2100      	movs	r1, #0
 80006a2:	2078      	movs	r0, #120	; 0x78
 80006a4:	f000 fa60 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80006a8:	2240      	movs	r2, #64	; 0x40
 80006aa:	2100      	movs	r1, #0
 80006ac:	2078      	movs	r0, #120	; 0x78
 80006ae:	f000 fa5b 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80006b2:	2281      	movs	r2, #129	; 0x81
 80006b4:	2100      	movs	r1, #0
 80006b6:	2078      	movs	r0, #120	; 0x78
 80006b8:	f000 fa56 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80006bc:	22ff      	movs	r2, #255	; 0xff
 80006be:	2100      	movs	r1, #0
 80006c0:	2078      	movs	r0, #120	; 0x78
 80006c2:	f000 fa51 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80006c6:	22a1      	movs	r2, #161	; 0xa1
 80006c8:	2100      	movs	r1, #0
 80006ca:	2078      	movs	r0, #120	; 0x78
 80006cc:	f000 fa4c 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80006d0:	22a6      	movs	r2, #166	; 0xa6
 80006d2:	2100      	movs	r1, #0
 80006d4:	2078      	movs	r0, #120	; 0x78
 80006d6:	f000 fa47 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80006da:	22a8      	movs	r2, #168	; 0xa8
 80006dc:	2100      	movs	r1, #0
 80006de:	2078      	movs	r0, #120	; 0x78
 80006e0:	f000 fa42 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80006e4:	223f      	movs	r2, #63	; 0x3f
 80006e6:	2100      	movs	r1, #0
 80006e8:	2078      	movs	r0, #120	; 0x78
 80006ea:	f000 fa3d 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80006ee:	22a4      	movs	r2, #164	; 0xa4
 80006f0:	2100      	movs	r1, #0
 80006f2:	2078      	movs	r0, #120	; 0x78
 80006f4:	f000 fa38 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80006f8:	22d3      	movs	r2, #211	; 0xd3
 80006fa:	2100      	movs	r1, #0
 80006fc:	2078      	movs	r0, #120	; 0x78
 80006fe:	f000 fa33 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	2078      	movs	r0, #120	; 0x78
 8000708:	f000 fa2e 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800070c:	22d5      	movs	r2, #213	; 0xd5
 800070e:	2100      	movs	r1, #0
 8000710:	2078      	movs	r0, #120	; 0x78
 8000712:	f000 fa29 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000716:	22f0      	movs	r2, #240	; 0xf0
 8000718:	2100      	movs	r1, #0
 800071a:	2078      	movs	r0, #120	; 0x78
 800071c:	f000 fa24 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000720:	22d9      	movs	r2, #217	; 0xd9
 8000722:	2100      	movs	r1, #0
 8000724:	2078      	movs	r0, #120	; 0x78
 8000726:	f000 fa1f 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800072a:	2222      	movs	r2, #34	; 0x22
 800072c:	2100      	movs	r1, #0
 800072e:	2078      	movs	r0, #120	; 0x78
 8000730:	f000 fa1a 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000734:	22da      	movs	r2, #218	; 0xda
 8000736:	2100      	movs	r1, #0
 8000738:	2078      	movs	r0, #120	; 0x78
 800073a:	f000 fa15 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800073e:	2212      	movs	r2, #18
 8000740:	2100      	movs	r1, #0
 8000742:	2078      	movs	r0, #120	; 0x78
 8000744:	f000 fa10 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000748:	22db      	movs	r2, #219	; 0xdb
 800074a:	2100      	movs	r1, #0
 800074c:	2078      	movs	r0, #120	; 0x78
 800074e:	f000 fa0b 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000752:	2220      	movs	r2, #32
 8000754:	2100      	movs	r1, #0
 8000756:	2078      	movs	r0, #120	; 0x78
 8000758:	f000 fa06 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800075c:	228d      	movs	r2, #141	; 0x8d
 800075e:	2100      	movs	r1, #0
 8000760:	2078      	movs	r0, #120	; 0x78
 8000762:	f000 fa01 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000766:	2214      	movs	r2, #20
 8000768:	2100      	movs	r1, #0
 800076a:	2078      	movs	r0, #120	; 0x78
 800076c:	f000 f9fc 	bl	8000b68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000770:	22af      	movs	r2, #175	; 0xaf
 8000772:	2100      	movs	r1, #0
 8000774:	2078      	movs	r0, #120	; 0x78
 8000776:	f000 f9f7 	bl	8000b68 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800077a:	222e      	movs	r2, #46	; 0x2e
 800077c:	2100      	movs	r1, #0
 800077e:	2078      	movs	r0, #120	; 0x78
 8000780:	f000 f9f2 	bl	8000b68 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000784:	2000      	movs	r0, #0
 8000786:	f000 f843 	bl	8000810 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800078a:	f000 f813 	bl	80007b4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <SSD1306_Init+0x184>)
 8000790:	2200      	movs	r2, #0
 8000792:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <SSD1306_Init+0x184>)
 8000796:	2200      	movs	r2, #0
 8000798:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <SSD1306_Init+0x184>)
 800079c:	2201      	movs	r2, #1
 800079e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80007a0:	2301      	movs	r3, #1
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	2000034c 	.word	0x2000034c
 80007b0:	200005e4 	.word	0x200005e4

080007b4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80007ba:	2300      	movs	r3, #0
 80007bc:	71fb      	strb	r3, [r7, #7]
 80007be:	e01d      	b.n	80007fc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	3b50      	subs	r3, #80	; 0x50
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	461a      	mov	r2, r3
 80007c8:	2100      	movs	r1, #0
 80007ca:	2078      	movs	r0, #120	; 0x78
 80007cc:	f000 f9cc 	bl	8000b68 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	2078      	movs	r0, #120	; 0x78
 80007d6:	f000 f9c7 	bl	8000b68 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80007da:	2210      	movs	r2, #16
 80007dc:	2100      	movs	r1, #0
 80007de:	2078      	movs	r0, #120	; 0x78
 80007e0:	f000 f9c2 	bl	8000b68 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	01db      	lsls	r3, r3, #7
 80007e8:	4a08      	ldr	r2, [pc, #32]	; (800080c <SSD1306_UpdateScreen+0x58>)
 80007ea:	441a      	add	r2, r3
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	2140      	movs	r1, #64	; 0x40
 80007f0:	2078      	movs	r0, #120	; 0x78
 80007f2:	f000 f953 	bl	8000a9c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	3301      	adds	r3, #1
 80007fa:	71fb      	strb	r3, [r7, #7]
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	2b07      	cmp	r3, #7
 8000800:	d9de      	bls.n	80007c0 <SSD1306_UpdateScreen+0xc>
	}
}
 8000802:	bf00      	nop
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200003e4 	.word	0x200003e4

08000810 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d101      	bne.n	8000824 <SSD1306_Fill+0x14>
 8000820:	2300      	movs	r3, #0
 8000822:	e000      	b.n	8000826 <SSD1306_Fill+0x16>
 8000824:	23ff      	movs	r3, #255	; 0xff
 8000826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800082a:	4619      	mov	r1, r3
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <SSD1306_Fill+0x2c>)
 800082e:	f003 ff12 	bl	8004656 <memset>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200003e4 	.word	0x200003e4

08000840 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	80fb      	strh	r3, [r7, #6]
 800084a:	460b      	mov	r3, r1
 800084c:	80bb      	strh	r3, [r7, #4]
 800084e:	4613      	mov	r3, r2
 8000850:	70fb      	strb	r3, [r7, #3]
	if (
 8000852:	88fb      	ldrh	r3, [r7, #6]
 8000854:	2b7f      	cmp	r3, #127	; 0x7f
 8000856:	d848      	bhi.n	80008ea <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000858:	88bb      	ldrh	r3, [r7, #4]
 800085a:	2b1f      	cmp	r3, #31
 800085c:	d845      	bhi.n	80008ea <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800085e:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <SSD1306_DrawPixel+0xb4>)
 8000860:	791b      	ldrb	r3, [r3, #4]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d006      	beq.n	8000874 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000866:	78fb      	ldrb	r3, [r7, #3]
 8000868:	2b00      	cmp	r3, #0
 800086a:	bf0c      	ite	eq
 800086c:	2301      	moveq	r3, #1
 800086e:	2300      	movne	r3, #0
 8000870:	b2db      	uxtb	r3, r3
 8000872:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000874:	78fb      	ldrb	r3, [r7, #3]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d11a      	bne.n	80008b0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800087a:	88fa      	ldrh	r2, [r7, #6]
 800087c:	88bb      	ldrh	r3, [r7, #4]
 800087e:	08db      	lsrs	r3, r3, #3
 8000880:	b298      	uxth	r0, r3
 8000882:	4603      	mov	r3, r0
 8000884:	01db      	lsls	r3, r3, #7
 8000886:	4413      	add	r3, r2
 8000888:	4a1b      	ldr	r2, [pc, #108]	; (80008f8 <SSD1306_DrawPixel+0xb8>)
 800088a:	5cd3      	ldrb	r3, [r2, r3]
 800088c:	b25a      	sxtb	r2, r3
 800088e:	88bb      	ldrh	r3, [r7, #4]
 8000890:	f003 0307 	and.w	r3, r3, #7
 8000894:	2101      	movs	r1, #1
 8000896:	fa01 f303 	lsl.w	r3, r1, r3
 800089a:	b25b      	sxtb	r3, r3
 800089c:	4313      	orrs	r3, r2
 800089e:	b259      	sxtb	r1, r3
 80008a0:	88fa      	ldrh	r2, [r7, #6]
 80008a2:	4603      	mov	r3, r0
 80008a4:	01db      	lsls	r3, r3, #7
 80008a6:	4413      	add	r3, r2
 80008a8:	b2c9      	uxtb	r1, r1
 80008aa:	4a13      	ldr	r2, [pc, #76]	; (80008f8 <SSD1306_DrawPixel+0xb8>)
 80008ac:	54d1      	strb	r1, [r2, r3]
 80008ae:	e01d      	b.n	80008ec <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80008b0:	88fa      	ldrh	r2, [r7, #6]
 80008b2:	88bb      	ldrh	r3, [r7, #4]
 80008b4:	08db      	lsrs	r3, r3, #3
 80008b6:	b298      	uxth	r0, r3
 80008b8:	4603      	mov	r3, r0
 80008ba:	01db      	lsls	r3, r3, #7
 80008bc:	4413      	add	r3, r2
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <SSD1306_DrawPixel+0xb8>)
 80008c0:	5cd3      	ldrb	r3, [r2, r3]
 80008c2:	b25a      	sxtb	r2, r3
 80008c4:	88bb      	ldrh	r3, [r7, #4]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	2101      	movs	r1, #1
 80008cc:	fa01 f303 	lsl.w	r3, r1, r3
 80008d0:	b25b      	sxtb	r3, r3
 80008d2:	43db      	mvns	r3, r3
 80008d4:	b25b      	sxtb	r3, r3
 80008d6:	4013      	ands	r3, r2
 80008d8:	b259      	sxtb	r1, r3
 80008da:	88fa      	ldrh	r2, [r7, #6]
 80008dc:	4603      	mov	r3, r0
 80008de:	01db      	lsls	r3, r3, #7
 80008e0:	4413      	add	r3, r2
 80008e2:	b2c9      	uxtb	r1, r1
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <SSD1306_DrawPixel+0xb8>)
 80008e6:	54d1      	strb	r1, [r2, r3]
 80008e8:	e000      	b.n	80008ec <SSD1306_DrawPixel+0xac>
		return;
 80008ea:	bf00      	nop
	}
}
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	200005e4 	.word	0x200005e4
 80008f8:	200003e4 	.word	0x200003e4

080008fc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	460a      	mov	r2, r1
 8000906:	80fb      	strh	r3, [r7, #6]
 8000908:	4613      	mov	r3, r2
 800090a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800090c:	4a05      	ldr	r2, [pc, #20]	; (8000924 <SSD1306_GotoXY+0x28>)
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000912:	4a04      	ldr	r2, [pc, #16]	; (8000924 <SSD1306_GotoXY+0x28>)
 8000914:	88bb      	ldrh	r3, [r7, #4]
 8000916:	8053      	strh	r3, [r2, #2]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	200005e4 	.word	0x200005e4

08000928 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	6039      	str	r1, [r7, #0]
 8000932:	71fb      	strb	r3, [r7, #7]
 8000934:	4613      	mov	r3, r2
 8000936:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000938:	4b3a      	ldr	r3, [pc, #232]	; (8000a24 <SSD1306_Putc+0xfc>)
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	4413      	add	r3, r2
	if (
 8000944:	2b7f      	cmp	r3, #127	; 0x7f
 8000946:	dc07      	bgt.n	8000958 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000948:	4b36      	ldr	r3, [pc, #216]	; (8000a24 <SSD1306_Putc+0xfc>)
 800094a:	885b      	ldrh	r3, [r3, #2]
 800094c:	461a      	mov	r2, r3
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	785b      	ldrb	r3, [r3, #1]
 8000952:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000954:	2b1f      	cmp	r3, #31
 8000956:	dd01      	ble.n	800095c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000958:	2300      	movs	r3, #0
 800095a:	e05e      	b.n	8000a1a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	e04b      	b.n	80009fa <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685a      	ldr	r2, [r3, #4]
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	3b20      	subs	r3, #32
 800096a:	6839      	ldr	r1, [r7, #0]
 800096c:	7849      	ldrb	r1, [r1, #1]
 800096e:	fb01 f303 	mul.w	r3, r1, r3
 8000972:	4619      	mov	r1, r3
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	440b      	add	r3, r1
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	4413      	add	r3, r2
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000980:	2300      	movs	r3, #0
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	e030      	b.n	80009e8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000986:	68fa      	ldr	r2, [r7, #12]
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000992:	2b00      	cmp	r3, #0
 8000994:	d010      	beq.n	80009b8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000996:	4b23      	ldr	r3, [pc, #140]	; (8000a24 <SSD1306_Putc+0xfc>)
 8000998:	881a      	ldrh	r2, [r3, #0]
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	b29b      	uxth	r3, r3
 800099e:	4413      	add	r3, r2
 80009a0:	b298      	uxth	r0, r3
 80009a2:	4b20      	ldr	r3, [pc, #128]	; (8000a24 <SSD1306_Putc+0xfc>)
 80009a4:	885a      	ldrh	r2, [r3, #2]
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	4413      	add	r3, r2
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	79ba      	ldrb	r2, [r7, #6]
 80009b0:	4619      	mov	r1, r3
 80009b2:	f7ff ff45 	bl	8000840 <SSD1306_DrawPixel>
 80009b6:	e014      	b.n	80009e2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <SSD1306_Putc+0xfc>)
 80009ba:	881a      	ldrh	r2, [r3, #0]
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	4413      	add	r3, r2
 80009c2:	b298      	uxth	r0, r3
 80009c4:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <SSD1306_Putc+0xfc>)
 80009c6:	885a      	ldrh	r2, [r3, #2]
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	4413      	add	r3, r2
 80009ce:	b299      	uxth	r1, r3
 80009d0:	79bb      	ldrb	r3, [r7, #6]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	bf0c      	ite	eq
 80009d6:	2301      	moveq	r3, #1
 80009d8:	2300      	movne	r3, #0
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	461a      	mov	r2, r3
 80009de:	f7ff ff2f 	bl	8000840 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	3301      	adds	r3, #1
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d3c8      	bcc.n	8000986 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	3301      	adds	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	785b      	ldrb	r3, [r3, #1]
 80009fe:	461a      	mov	r2, r3
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d3ad      	bcc.n	8000962 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <SSD1306_Putc+0xfc>)
 8000a08:	881a      	ldrh	r2, [r3, #0]
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	4413      	add	r3, r2
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <SSD1306_Putc+0xfc>)
 8000a16:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000a18:	79fb      	ldrb	r3, [r7, #7]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200005e4 	.word	0x200005e4

08000a28 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	4613      	mov	r3, r2
 8000a34:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000a36:	e012      	b.n	8000a5e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	79fa      	ldrb	r2, [r7, #7]
 8000a3e:	68b9      	ldr	r1, [r7, #8]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff71 	bl	8000928 <SSD1306_Putc>
 8000a46:	4603      	mov	r3, r0
 8000a48:	461a      	mov	r2, r3
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d002      	beq.n	8000a58 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	e008      	b.n	8000a6a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d1e8      	bne.n	8000a38 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	781b      	ldrb	r3, [r3, #0]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000a7a:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <ssd1306_I2C_Init+0x24>)
 8000a7c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a7e:	e002      	b.n	8000a86 <ssd1306_I2C_Init+0x12>
		p--;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d1f9      	bne.n	8000a80 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000a8c:	bf00      	nop
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	0003d090 	.word	0x0003d090

08000a9c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b0c7      	sub	sp, #284	; 0x11c
 8000aa0:	af02      	add	r7, sp, #8
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4608      	mov	r0, r1
 8000aa6:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000aaa:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000aae:	600a      	str	r2, [r1, #0]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ab6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000aba:	4622      	mov	r2, r4
 8000abc:	701a      	strb	r2, [r3, #0]
 8000abe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ac2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ace:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ad2:	460a      	mov	r2, r1
 8000ad4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000ad6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ada:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000ade:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ae2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000ae6:	7812      	ldrb	r2, [r2, #0]
 8000ae8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000af0:	e015      	b.n	8000b1e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000af2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000af6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000afa:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000afe:	6812      	ldr	r2, [r2, #0]
 8000b00:	441a      	add	r2, r3
 8000b02:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000b06:	3301      	adds	r3, #1
 8000b08:	7811      	ldrb	r1, [r2, #0]
 8000b0a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b0e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000b12:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000b14:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000b18:	3301      	adds	r3, #1
 8000b1a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000b1e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b28:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000b2c:	8812      	ldrh	r2, [r2, #0]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d8df      	bhi.n	8000af2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000b32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b36:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	b299      	uxth	r1, r3
 8000b3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	f107 020c 	add.w	r2, r7, #12
 8000b50:	200a      	movs	r0, #10
 8000b52:	9000      	str	r0, [sp, #0]
 8000b54:	4803      	ldr	r0, [pc, #12]	; (8000b64 <ssd1306_I2C_WriteMulti+0xc8>)
 8000b56:	f000 fe55 	bl	8001804 <HAL_I2C_Master_Transmit>
}
 8000b5a:	bf00      	nop
 8000b5c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd90      	pop	{r4, r7, pc}
 8000b64:	2000034c 	.word	0x2000034c

08000b68 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af02      	add	r7, sp, #8
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
 8000b72:	460b      	mov	r3, r1
 8000b74:	71bb      	strb	r3, [r7, #6]
 8000b76:	4613      	mov	r3, r2
 8000b78:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000b7a:	79bb      	ldrb	r3, [r7, #6]
 8000b7c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000b7e:	797b      	ldrb	r3, [r7, #5]
 8000b80:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	b299      	uxth	r1, r3
 8000b86:	f107 020c 	add.w	r2, r7, #12
 8000b8a:	230a      	movs	r3, #10
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	2302      	movs	r3, #2
 8000b90:	4803      	ldr	r0, [pc, #12]	; (8000ba0 <ssd1306_I2C_Write+0x38>)
 8000b92:	f000 fe37 	bl	8001804 <HAL_I2C_Master_Transmit>
}
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000034c 	.word	0x2000034c

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6193      	str	r3, [r2, #24]
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bcc:	61d3      	str	r3, [r2, #28]
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	210f      	movs	r1, #15
 8000bde:	f06f 0001 	mvn.w	r0, #1
 8000be2:	f000 fb04 	bl	80011ee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a15      	ldr	r2, [pc, #84]	; (8000c64 <HAL_I2C_MspInit+0x70>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d123      	bne.n	8000c5c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <HAL_I2C_MspInit+0x74>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a13      	ldr	r2, [pc, #76]	; (8000c68 <HAL_I2C_MspInit+0x74>)
 8000c1a:	f043 0308 	orr.w	r3, r3, #8
 8000c1e:	6193      	str	r3, [r2, #24]
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <HAL_I2C_MspInit+0x74>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f003 0308 	and.w	r3, r3, #8
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c2c:	23c0      	movs	r3, #192	; 0xc0
 8000c2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c30:	2312      	movs	r3, #18
 8000c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480b      	ldr	r0, [pc, #44]	; (8000c6c <HAL_I2C_MspInit+0x78>)
 8000c40:	f000 fb00 	bl	8001244 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <HAL_I2C_MspInit+0x74>)
 8000c46:	69db      	ldr	r3, [r3, #28]
 8000c48:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <HAL_I2C_MspInit+0x74>)
 8000c4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c4e:	61d3      	str	r3, [r2, #28]
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_I2C_MspInit+0x74>)
 8000c52:	69db      	ldr	r3, [r3, #28]
 8000c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c5c:	bf00      	nop
 8000c5e:	3720      	adds	r7, #32
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40005400 	.word	0x40005400
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40010c00 	.word	0x40010c00

08000c70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a1b      	ldr	r2, [pc, #108]	; (8000cf8 <HAL_UART_MspInit+0x88>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d12f      	bne.n	8000cf0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <HAL_UART_MspInit+0x8c>)
 8000c92:	69db      	ldr	r3, [r3, #28]
 8000c94:	4a19      	ldr	r2, [pc, #100]	; (8000cfc <HAL_UART_MspInit+0x8c>)
 8000c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9a:	61d3      	str	r3, [r2, #28]
 8000c9c:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <HAL_UART_MspInit+0x8c>)
 8000c9e:	69db      	ldr	r3, [r3, #28]
 8000ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <HAL_UART_MspInit+0x8c>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a13      	ldr	r2, [pc, #76]	; (8000cfc <HAL_UART_MspInit+0x8c>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <HAL_UART_MspInit+0x8c>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	f107 0310 	add.w	r3, r7, #16
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480b      	ldr	r0, [pc, #44]	; (8000d00 <HAL_UART_MspInit+0x90>)
 8000cd4:	f000 fab6 	bl	8001244 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cd8:	2308      	movs	r3, #8
 8000cda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 0310 	add.w	r3, r7, #16
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <HAL_UART_MspInit+0x90>)
 8000cec:	f000 faaa 	bl	8001244 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cf0:	bf00      	nop
 8000cf2:	3720      	adds	r7, #32
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40004400 	.word	0x40004400
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40010800 	.word	0x40010800

08000d04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08e      	sub	sp, #56	; 0x38
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000d1a:	4b34      	ldr	r3, [pc, #208]	; (8000dec <HAL_InitTick+0xe8>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	4a33      	ldr	r2, [pc, #204]	; (8000dec <HAL_InitTick+0xe8>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	61d3      	str	r3, [r2, #28]
 8000d26:	4b31      	ldr	r3, [pc, #196]	; (8000dec <HAL_InitTick+0xe8>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d32:	f107 0210 	add.w	r2, r7, #16
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f001 fd91 	bl	8002864 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d42:	6a3b      	ldr	r3, [r7, #32]
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d103      	bne.n	8000d54 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d4c:	f001 fd62 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 8000d50:	6378      	str	r0, [r7, #52]	; 0x34
 8000d52:	e004      	b.n	8000d5e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d54:	f001 fd5e 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d60:	4a23      	ldr	r2, [pc, #140]	; (8000df0 <HAL_InitTick+0xec>)
 8000d62:	fba2 2303 	umull	r2, r3, r2, r3
 8000d66:	0c9b      	lsrs	r3, r3, #18
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000d6c:	4b21      	ldr	r3, [pc, #132]	; (8000df4 <HAL_InitTick+0xf0>)
 8000d6e:	4a22      	ldr	r2, [pc, #136]	; (8000df8 <HAL_InitTick+0xf4>)
 8000d70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000d72:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <HAL_InitTick+0xf0>)
 8000d74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d78:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000d7a:	4a1e      	ldr	r2, [pc, #120]	; (8000df4 <HAL_InitTick+0xf0>)
 8000d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d7e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000d80:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <HAL_InitTick+0xf0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d86:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <HAL_InitTick+0xf0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8c:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <HAL_InitTick+0xf0>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000d92:	4818      	ldr	r0, [pc, #96]	; (8000df4 <HAL_InitTick+0xf0>)
 8000d94:	f001 fdb4 	bl	8002900 <HAL_TIM_Base_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d11b      	bne.n	8000dde <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000da6:	4813      	ldr	r0, [pc, #76]	; (8000df4 <HAL_InitTick+0xf0>)
 8000da8:	f001 fe02 	bl	80029b0 <HAL_TIM_Base_Start_IT>
 8000dac:	4603      	mov	r3, r0
 8000dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000db2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d111      	bne.n	8000dde <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000dba:	201e      	movs	r0, #30
 8000dbc:	f000 fa33 	bl	8001226 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b0f      	cmp	r3, #15
 8000dc4:	d808      	bhi.n	8000dd8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	6879      	ldr	r1, [r7, #4]
 8000dca:	201e      	movs	r0, #30
 8000dcc:	f000 fa0f 	bl	80011ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dd0:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <HAL_InitTick+0xf8>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6013      	str	r3, [r2, #0]
 8000dd6:	e002      	b.n	8000dde <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000dde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3738      	adds	r7, #56	; 0x38
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40021000 	.word	0x40021000
 8000df0:	431bde83 	.word	0x431bde83
 8000df4:	200005ec 	.word	0x200005ec
 8000df8:	40000800 	.word	0x40000800
 8000dfc:	2000000c 	.word	0x2000000c

08000e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <NMI_Handler+0x4>

08000e06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <HardFault_Handler+0x4>

08000e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <MemManage_Handler+0x4>

08000e12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <BusFault_Handler+0x4>

08000e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <UsageFault_Handler+0x4>

08000e1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
	...

08000e2c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <TIM4_IRQHandler+0x10>)
 8000e32:	f001 fe0f 	bl	8002a54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200005ec 	.word	0x200005ec

08000e40 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	e00a      	b.n	8000e68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e52:	f3af 8000 	nop.w
 8000e56:	4601      	mov	r1, r0
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	1c5a      	adds	r2, r3, #1
 8000e5c:	60ba      	str	r2, [r7, #8]
 8000e5e:	b2ca      	uxtb	r2, r1
 8000e60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	3301      	adds	r3, #1
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	697a      	ldr	r2, [r7, #20]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	dbf0      	blt.n	8000e52 <_read+0x12>
  }

  return len;
 8000e70:	687b      	ldr	r3, [r7, #4]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b086      	sub	sp, #24
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	60f8      	str	r0, [r7, #12]
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	e009      	b.n	8000ea0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	60ba      	str	r2, [r7, #8]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fb2b 	bl	80004f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	dbf1      	blt.n	8000e8c <_write+0x12>
//    ITM_SendChar(*ptr++);
  }
  return len;
 8000ea8:	687b      	ldr	r3, [r7, #4]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <_close>:

int _close(int file)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ed8:	605a      	str	r2, [r3, #4]
  return 0;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr

08000ee6 <_isatty>:

int _isatty(int file)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr

08000efa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b085      	sub	sp, #20
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	60f8      	str	r0, [r7, #12]
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
	...

08000f14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f1c:	4a14      	ldr	r2, [pc, #80]	; (8000f70 <_sbrk+0x5c>)
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <_sbrk+0x60>)
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f28:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <_sbrk+0x64>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d102      	bne.n	8000f36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <_sbrk+0x64>)
 8000f32:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <_sbrk+0x68>)
 8000f34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <_sbrk+0x64>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d207      	bcs.n	8000f54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f44:	f003 fa64 	bl	8004410 <__errno>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	e009      	b.n	8000f68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <_sbrk+0x64>)
 8000f64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f66:	68fb      	ldr	r3, [r7, #12]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20005000 	.word	0x20005000
 8000f74:	00000400 	.word	0x00000400
 8000f78:	20000634 	.word	0x20000634
 8000f7c:	20001398 	.word	0x20001398

08000f80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f8e:	490d      	ldr	r1, [pc, #52]	; (8000fc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f94:	e002      	b.n	8000f9c <LoopCopyDataInit>

08000f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9a:	3304      	adds	r3, #4

08000f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa0:	d3f9      	bcc.n	8000f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fa4:	4c0a      	ldr	r4, [pc, #40]	; (8000fd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa8:	e001      	b.n	8000fae <LoopFillZerobss>

08000faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fac:	3204      	adds	r2, #4

08000fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb0:	d3fb      	bcc.n	8000faa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fb2:	f7ff ffe5 	bl	8000f80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fb6:	f003 fb27 	bl	8004608 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fba:	f7ff f8e1 	bl	8000180 <main>
  bx lr
 8000fbe:	4770      	bx	lr
  ldr r0, =_sdata
 8000fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000fc8:	0800640c 	.word	0x0800640c
  ldr r2, =_sbss
 8000fcc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000fd0:	20001398 	.word	0x20001398

08000fd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fd4:	e7fe      	b.n	8000fd4 <ADC1_2_IRQHandler>
	...

08000fd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <HAL_Init+0x28>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a07      	ldr	r2, [pc, #28]	; (8001000 <HAL_Init+0x28>)
 8000fe2:	f043 0310 	orr.w	r3, r3, #16
 8000fe6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f000 f8f5 	bl	80011d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fee:	200f      	movs	r0, #15
 8000ff0:	f7ff fe88 	bl	8000d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff4:	f7ff fdd6 	bl	8000ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40022000 	.word	0x40022000

08001004 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <HAL_IncTick+0x1c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_IncTick+0x20>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4413      	add	r3, r2
 8001014:	4a03      	ldr	r2, [pc, #12]	; (8001024 <HAL_IncTick+0x20>)
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	20000010 	.word	0x20000010
 8001024:	20000638 	.word	0x20000638

08001028 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;
 800102c:	4b02      	ldr	r3, [pc, #8]	; (8001038 <HAL_GetTick+0x10>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	20000638 	.word	0x20000638

0800103c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff fff0 	bl	8001028 <HAL_GetTick>
 8001048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001054:	d005      	beq.n	8001062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_Delay+0x44>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4413      	add	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001062:	bf00      	nop
 8001064:	f7ff ffe0 	bl	8001028 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	429a      	cmp	r2, r3
 8001072:	d8f7      	bhi.n	8001064 <HAL_Delay+0x28>
  {
  }
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000010 	.word	0x20000010

08001084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a0:	4013      	ands	r3, r2
 80010a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b6:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	60d3      	str	r3, [r2, #12]
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <__NVIC_GetPriorityGrouping+0x18>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	f003 0307 	and.w	r3, r3, #7
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	db0b      	blt.n	8001112 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	f003 021f 	and.w	r2, r3, #31
 8001100:	4906      	ldr	r1, [pc, #24]	; (800111c <__NVIC_EnableIRQ+0x34>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	095b      	lsrs	r3, r3, #5
 8001108:	2001      	movs	r0, #1
 800110a:	fa00 f202 	lsl.w	r2, r0, r2
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100

08001120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db0a      	blt.n	800114a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	490c      	ldr	r1, [pc, #48]	; (800116c <__NVIC_SetPriority+0x4c>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001148:	e00a      	b.n	8001160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4908      	ldr	r1, [pc, #32]	; (8001170 <__NVIC_SetPriority+0x50>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	3b04      	subs	r3, #4
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	440b      	add	r3, r1
 800115e:	761a      	strb	r2, [r3, #24]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf28      	it	cs
 8001192:	2304      	movcs	r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3304      	adds	r3, #4
 800119a:	2b06      	cmp	r3, #6
 800119c:	d902      	bls.n	80011a4 <NVIC_EncodePriority+0x30>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3b03      	subs	r3, #3
 80011a2:	e000      	b.n	80011a6 <NVIC_EncodePriority+0x32>
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4313      	orrs	r3, r2
         );
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff4f 	bl	8001084 <__NVIC_SetPriorityGrouping>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001200:	f7ff ff64 	bl	80010cc <__NVIC_GetPriorityGrouping>
 8001204:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	6978      	ldr	r0, [r7, #20]
 800120c:	f7ff ffb2 	bl	8001174 <NVIC_EncodePriority>
 8001210:	4602      	mov	r2, r0
 8001212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff81 	bl	8001120 <__NVIC_SetPriority>
}
 800121e:	bf00      	nop
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff57 	bl	80010e8 <__NVIC_EnableIRQ>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001244:	b480      	push	{r7}
 8001246:	b08b      	sub	sp, #44	; 0x2c
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001256:	e169      	b.n	800152c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001258:	2201      	movs	r2, #1
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	69fa      	ldr	r2, [r7, #28]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	429a      	cmp	r2, r3
 8001272:	f040 8158 	bne.w	8001526 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	4a9a      	ldr	r2, [pc, #616]	; (80014e4 <HAL_GPIO_Init+0x2a0>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d05e      	beq.n	800133e <HAL_GPIO_Init+0xfa>
 8001280:	4a98      	ldr	r2, [pc, #608]	; (80014e4 <HAL_GPIO_Init+0x2a0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d875      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 8001286:	4a98      	ldr	r2, [pc, #608]	; (80014e8 <HAL_GPIO_Init+0x2a4>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d058      	beq.n	800133e <HAL_GPIO_Init+0xfa>
 800128c:	4a96      	ldr	r2, [pc, #600]	; (80014e8 <HAL_GPIO_Init+0x2a4>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d86f      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 8001292:	4a96      	ldr	r2, [pc, #600]	; (80014ec <HAL_GPIO_Init+0x2a8>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d052      	beq.n	800133e <HAL_GPIO_Init+0xfa>
 8001298:	4a94      	ldr	r2, [pc, #592]	; (80014ec <HAL_GPIO_Init+0x2a8>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d869      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 800129e:	4a94      	ldr	r2, [pc, #592]	; (80014f0 <HAL_GPIO_Init+0x2ac>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d04c      	beq.n	800133e <HAL_GPIO_Init+0xfa>
 80012a4:	4a92      	ldr	r2, [pc, #584]	; (80014f0 <HAL_GPIO_Init+0x2ac>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d863      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 80012aa:	4a92      	ldr	r2, [pc, #584]	; (80014f4 <HAL_GPIO_Init+0x2b0>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d046      	beq.n	800133e <HAL_GPIO_Init+0xfa>
 80012b0:	4a90      	ldr	r2, [pc, #576]	; (80014f4 <HAL_GPIO_Init+0x2b0>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d85d      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 80012b6:	2b12      	cmp	r3, #18
 80012b8:	d82a      	bhi.n	8001310 <HAL_GPIO_Init+0xcc>
 80012ba:	2b12      	cmp	r3, #18
 80012bc:	d859      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 80012be:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <HAL_GPIO_Init+0x80>)
 80012c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c4:	0800133f 	.word	0x0800133f
 80012c8:	08001319 	.word	0x08001319
 80012cc:	0800132b 	.word	0x0800132b
 80012d0:	0800136d 	.word	0x0800136d
 80012d4:	08001373 	.word	0x08001373
 80012d8:	08001373 	.word	0x08001373
 80012dc:	08001373 	.word	0x08001373
 80012e0:	08001373 	.word	0x08001373
 80012e4:	08001373 	.word	0x08001373
 80012e8:	08001373 	.word	0x08001373
 80012ec:	08001373 	.word	0x08001373
 80012f0:	08001373 	.word	0x08001373
 80012f4:	08001373 	.word	0x08001373
 80012f8:	08001373 	.word	0x08001373
 80012fc:	08001373 	.word	0x08001373
 8001300:	08001373 	.word	0x08001373
 8001304:	08001373 	.word	0x08001373
 8001308:	08001321 	.word	0x08001321
 800130c:	08001335 	.word	0x08001335
 8001310:	4a79      	ldr	r2, [pc, #484]	; (80014f8 <HAL_GPIO_Init+0x2b4>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d013      	beq.n	800133e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001316:	e02c      	b.n	8001372 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	623b      	str	r3, [r7, #32]
          break;
 800131e:	e029      	b.n	8001374 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	3304      	adds	r3, #4
 8001326:	623b      	str	r3, [r7, #32]
          break;
 8001328:	e024      	b.n	8001374 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	3308      	adds	r3, #8
 8001330:	623b      	str	r3, [r7, #32]
          break;
 8001332:	e01f      	b.n	8001374 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	330c      	adds	r3, #12
 800133a:	623b      	str	r3, [r7, #32]
          break;
 800133c:	e01a      	b.n	8001374 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d102      	bne.n	800134c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001346:	2304      	movs	r3, #4
 8001348:	623b      	str	r3, [r7, #32]
          break;
 800134a:	e013      	b.n	8001374 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d105      	bne.n	8001360 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001354:	2308      	movs	r3, #8
 8001356:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69fa      	ldr	r2, [r7, #28]
 800135c:	611a      	str	r2, [r3, #16]
          break;
 800135e:	e009      	b.n	8001374 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001360:	2308      	movs	r3, #8
 8001362:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	615a      	str	r2, [r3, #20]
          break;
 800136a:	e003      	b.n	8001374 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
          break;
 8001370:	e000      	b.n	8001374 <HAL_GPIO_Init+0x130>
          break;
 8001372:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	2bff      	cmp	r3, #255	; 0xff
 8001378:	d801      	bhi.n	800137e <HAL_GPIO_Init+0x13a>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	e001      	b.n	8001382 <HAL_GPIO_Init+0x13e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3304      	adds	r3, #4
 8001382:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	2bff      	cmp	r3, #255	; 0xff
 8001388:	d802      	bhi.n	8001390 <HAL_GPIO_Init+0x14c>
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	e002      	b.n	8001396 <HAL_GPIO_Init+0x152>
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	3b08      	subs	r3, #8
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	210f      	movs	r1, #15
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	401a      	ands	r2, r3
 80013a8:	6a39      	ldr	r1, [r7, #32]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	fa01 f303 	lsl.w	r3, r1, r3
 80013b0:	431a      	orrs	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 80b1 	beq.w	8001526 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013c4:	4b4d      	ldr	r3, [pc, #308]	; (80014fc <HAL_GPIO_Init+0x2b8>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a4c      	ldr	r2, [pc, #304]	; (80014fc <HAL_GPIO_Init+0x2b8>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b4a      	ldr	r3, [pc, #296]	; (80014fc <HAL_GPIO_Init+0x2b8>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013dc:	4a48      	ldr	r2, [pc, #288]	; (8001500 <HAL_GPIO_Init+0x2bc>)
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	3302      	adds	r3, #2
 80013e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	220f      	movs	r2, #15
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	4013      	ands	r3, r2
 80013fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a40      	ldr	r2, [pc, #256]	; (8001504 <HAL_GPIO_Init+0x2c0>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d013      	beq.n	8001430 <HAL_GPIO_Init+0x1ec>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a3f      	ldr	r2, [pc, #252]	; (8001508 <HAL_GPIO_Init+0x2c4>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d00d      	beq.n	800142c <HAL_GPIO_Init+0x1e8>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a3e      	ldr	r2, [pc, #248]	; (800150c <HAL_GPIO_Init+0x2c8>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d007      	beq.n	8001428 <HAL_GPIO_Init+0x1e4>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a3d      	ldr	r2, [pc, #244]	; (8001510 <HAL_GPIO_Init+0x2cc>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d101      	bne.n	8001424 <HAL_GPIO_Init+0x1e0>
 8001420:	2303      	movs	r3, #3
 8001422:	e006      	b.n	8001432 <HAL_GPIO_Init+0x1ee>
 8001424:	2304      	movs	r3, #4
 8001426:	e004      	b.n	8001432 <HAL_GPIO_Init+0x1ee>
 8001428:	2302      	movs	r3, #2
 800142a:	e002      	b.n	8001432 <HAL_GPIO_Init+0x1ee>
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <HAL_GPIO_Init+0x1ee>
 8001430:	2300      	movs	r3, #0
 8001432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001434:	f002 0203 	and.w	r2, r2, #3
 8001438:	0092      	lsls	r2, r2, #2
 800143a:	4093      	lsls	r3, r2
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	4313      	orrs	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001442:	492f      	ldr	r1, [pc, #188]	; (8001500 <HAL_GPIO_Init+0x2bc>)
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	089b      	lsrs	r3, r3, #2
 8001448:	3302      	adds	r3, #2
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d006      	beq.n	800146a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800145c:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	492c      	ldr	r1, [pc, #176]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]
 8001468:	e006      	b.n	8001478 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800146a:	4b2a      	ldr	r3, [pc, #168]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	43db      	mvns	r3, r3
 8001472:	4928      	ldr	r1, [pc, #160]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 8001474:	4013      	ands	r3, r2
 8001476:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d006      	beq.n	8001492 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001484:	4b23      	ldr	r3, [pc, #140]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	4922      	ldr	r1, [pc, #136]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	604b      	str	r3, [r1, #4]
 8001490:	e006      	b.n	80014a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001492:	4b20      	ldr	r3, [pc, #128]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	43db      	mvns	r3, r3
 800149a:	491e      	ldr	r1, [pc, #120]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 800149c:	4013      	ands	r3, r2
 800149e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d006      	beq.n	80014ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014ac:	4b19      	ldr	r3, [pc, #100]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	4918      	ldr	r1, [pc, #96]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	608b      	str	r3, [r1, #8]
 80014b8:	e006      	b.n	80014c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	4914      	ldr	r1, [pc, #80]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 80014c4:	4013      	ands	r3, r2
 80014c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d021      	beq.n	8001518 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	490e      	ldr	r1, [pc, #56]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	60cb      	str	r3, [r1, #12]
 80014e0:	e021      	b.n	8001526 <HAL_GPIO_Init+0x2e2>
 80014e2:	bf00      	nop
 80014e4:	10320000 	.word	0x10320000
 80014e8:	10310000 	.word	0x10310000
 80014ec:	10220000 	.word	0x10220000
 80014f0:	10210000 	.word	0x10210000
 80014f4:	10120000 	.word	0x10120000
 80014f8:	10110000 	.word	0x10110000
 80014fc:	40021000 	.word	0x40021000
 8001500:	40010000 	.word	0x40010000
 8001504:	40010800 	.word	0x40010800
 8001508:	40010c00 	.word	0x40010c00
 800150c:	40011000 	.word	0x40011000
 8001510:	40011400 	.word	0x40011400
 8001514:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <HAL_GPIO_Init+0x304>)
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	43db      	mvns	r3, r3
 8001520:	4909      	ldr	r1, [pc, #36]	; (8001548 <HAL_GPIO_Init+0x304>)
 8001522:	4013      	ands	r3, r2
 8001524:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	3301      	adds	r3, #1
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	fa22 f303 	lsr.w	r3, r2, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	f47f ae8e 	bne.w	8001258 <HAL_GPIO_Init+0x14>
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	372c      	adds	r7, #44	; 0x2c
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	40010400 	.word	0x40010400

0800154c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	807b      	strh	r3, [r7, #2]
 8001558:	4613      	mov	r3, r2
 800155a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800155c:	787b      	ldrb	r3, [r7, #1]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001562:	887a      	ldrh	r2, [r7, #2]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001568:	e003      	b.n	8001572 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800156a:	887b      	ldrh	r3, [r7, #2]
 800156c:	041a      	lsls	r2, r3, #16
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	611a      	str	r2, [r3, #16]
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e12b      	b.n	80017e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d106      	bne.n	80015a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff fb26 	bl	8000bf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2224      	movs	r2, #36	; 0x24
 80015ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0201 	bic.w	r2, r2, #1
 80015be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015e0:	f001 f918 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 80015e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	4a81      	ldr	r2, [pc, #516]	; (80017f0 <HAL_I2C_Init+0x274>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d807      	bhi.n	8001600 <HAL_I2C_Init+0x84>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4a80      	ldr	r2, [pc, #512]	; (80017f4 <HAL_I2C_Init+0x278>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	bf94      	ite	ls
 80015f8:	2301      	movls	r3, #1
 80015fa:	2300      	movhi	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	e006      	b.n	800160e <HAL_I2C_Init+0x92>
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4a7d      	ldr	r2, [pc, #500]	; (80017f8 <HAL_I2C_Init+0x27c>)
 8001604:	4293      	cmp	r3, r2
 8001606:	bf94      	ite	ls
 8001608:	2301      	movls	r3, #1
 800160a:	2300      	movhi	r3, #0
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e0e7      	b.n	80017e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4a78      	ldr	r2, [pc, #480]	; (80017fc <HAL_I2C_Init+0x280>)
 800161a:	fba2 2303 	umull	r2, r3, r2, r3
 800161e:	0c9b      	lsrs	r3, r3, #18
 8001620:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	430a      	orrs	r2, r1
 8001634:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	4a6a      	ldr	r2, [pc, #424]	; (80017f0 <HAL_I2C_Init+0x274>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d802      	bhi.n	8001650 <HAL_I2C_Init+0xd4>
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	3301      	adds	r3, #1
 800164e:	e009      	b.n	8001664 <HAL_I2C_Init+0xe8>
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001656:	fb02 f303 	mul.w	r3, r2, r3
 800165a:	4a69      	ldr	r2, [pc, #420]	; (8001800 <HAL_I2C_Init+0x284>)
 800165c:	fba2 2303 	umull	r2, r3, r2, r3
 8001660:	099b      	lsrs	r3, r3, #6
 8001662:	3301      	adds	r3, #1
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	430b      	orrs	r3, r1
 800166a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001676:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	495c      	ldr	r1, [pc, #368]	; (80017f0 <HAL_I2C_Init+0x274>)
 8001680:	428b      	cmp	r3, r1
 8001682:	d819      	bhi.n	80016b8 <HAL_I2C_Init+0x13c>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	1e59      	subs	r1, r3, #1
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001692:	1c59      	adds	r1, r3, #1
 8001694:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001698:	400b      	ands	r3, r1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00a      	beq.n	80016b4 <HAL_I2C_Init+0x138>
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1e59      	subs	r1, r3, #1
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80016ac:	3301      	adds	r3, #1
 80016ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b2:	e051      	b.n	8001758 <HAL_I2C_Init+0x1dc>
 80016b4:	2304      	movs	r3, #4
 80016b6:	e04f      	b.n	8001758 <HAL_I2C_Init+0x1dc>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d111      	bne.n	80016e4 <HAL_I2C_Init+0x168>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	1e58      	subs	r0, r3, #1
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6859      	ldr	r1, [r3, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	440b      	add	r3, r1
 80016ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80016d2:	3301      	adds	r3, #1
 80016d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d8:	2b00      	cmp	r3, #0
 80016da:	bf0c      	ite	eq
 80016dc:	2301      	moveq	r3, #1
 80016de:	2300      	movne	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	e012      	b.n	800170a <HAL_I2C_Init+0x18e>
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	1e58      	subs	r0, r3, #1
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6859      	ldr	r1, [r3, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	0099      	lsls	r1, r3, #2
 80016f4:	440b      	add	r3, r1
 80016f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016fa:	3301      	adds	r3, #1
 80016fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001700:	2b00      	cmp	r3, #0
 8001702:	bf0c      	ite	eq
 8001704:	2301      	moveq	r3, #1
 8001706:	2300      	movne	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_I2C_Init+0x196>
 800170e:	2301      	movs	r3, #1
 8001710:	e022      	b.n	8001758 <HAL_I2C_Init+0x1dc>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10e      	bne.n	8001738 <HAL_I2C_Init+0x1bc>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	1e58      	subs	r0, r3, #1
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6859      	ldr	r1, [r3, #4]
 8001722:	460b      	mov	r3, r1
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	440b      	add	r3, r1
 8001728:	fbb0 f3f3 	udiv	r3, r0, r3
 800172c:	3301      	adds	r3, #1
 800172e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001736:	e00f      	b.n	8001758 <HAL_I2C_Init+0x1dc>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	1e58      	subs	r0, r3, #1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6859      	ldr	r1, [r3, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	440b      	add	r3, r1
 8001746:	0099      	lsls	r1, r3, #2
 8001748:	440b      	add	r3, r1
 800174a:	fbb0 f3f3 	udiv	r3, r0, r3
 800174e:	3301      	adds	r3, #1
 8001750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001754:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	6809      	ldr	r1, [r1, #0]
 800175c:	4313      	orrs	r3, r2
 800175e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69da      	ldr	r2, [r3, #28]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001786:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6911      	ldr	r1, [r2, #16]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	68d2      	ldr	r2, [r2, #12]
 8001792:	4311      	orrs	r1, r2
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	430b      	orrs	r3, r1
 800179a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	430a      	orrs	r2, r1
 80017b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 0201 	orr.w	r2, r2, #1
 80017c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2220      	movs	r2, #32
 80017d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	000186a0 	.word	0x000186a0
 80017f4:	001e847f 	.word	0x001e847f
 80017f8:	003d08ff 	.word	0x003d08ff
 80017fc:	431bde83 	.word	0x431bde83
 8001800:	10624dd3 	.word	0x10624dd3

08001804 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af02      	add	r7, sp, #8
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	607a      	str	r2, [r7, #4]
 800180e:	461a      	mov	r2, r3
 8001810:	460b      	mov	r3, r1
 8001812:	817b      	strh	r3, [r7, #10]
 8001814:	4613      	mov	r3, r2
 8001816:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001818:	f7ff fc06 	bl	8001028 <HAL_GetTick>
 800181c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b20      	cmp	r3, #32
 8001828:	f040 80e0 	bne.w	80019ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	2319      	movs	r3, #25
 8001832:	2201      	movs	r2, #1
 8001834:	4970      	ldr	r1, [pc, #448]	; (80019f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f000 fa92 	bl	8001d60 <I2C_WaitOnFlagUntilTimeout>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001842:	2302      	movs	r3, #2
 8001844:	e0d3      	b.n	80019ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800184c:	2b01      	cmp	r3, #1
 800184e:	d101      	bne.n	8001854 <HAL_I2C_Master_Transmit+0x50>
 8001850:	2302      	movs	r3, #2
 8001852:	e0cc      	b.n	80019ee <HAL_I2C_Master_Transmit+0x1ea>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b01      	cmp	r3, #1
 8001868:	d007      	beq.n	800187a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f042 0201 	orr.w	r2, r2, #1
 8001878:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001888:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2221      	movs	r2, #33	; 0x21
 800188e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2210      	movs	r2, #16
 8001896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	893a      	ldrh	r2, [r7, #8]
 80018aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4a50      	ldr	r2, [pc, #320]	; (80019fc <HAL_I2C_Master_Transmit+0x1f8>)
 80018ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018bc:	8979      	ldrh	r1, [r7, #10]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	6a3a      	ldr	r2, [r7, #32]
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 f9ca 	bl	8001c5c <I2C_MasterRequestWrite>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e08d      	b.n	80019ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80018e8:	e066      	b.n	80019b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	6a39      	ldr	r1, [r7, #32]
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f000 fb0c 	bl	8001f0c <I2C_WaitOnTXEFlagUntilTimeout>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00d      	beq.n	8001916 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	2b04      	cmp	r3, #4
 8001900:	d107      	bne.n	8001912 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001910:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e06b      	b.n	80019ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	781a      	ldrb	r2, [r3, #0]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001930:	b29b      	uxth	r3, r3
 8001932:	3b01      	subs	r3, #1
 8001934:	b29a      	uxth	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800193e:	3b01      	subs	r3, #1
 8001940:	b29a      	uxth	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b04      	cmp	r3, #4
 8001952:	d11b      	bne.n	800198c <HAL_I2C_Master_Transmit+0x188>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001958:	2b00      	cmp	r3, #0
 800195a:	d017      	beq.n	800198c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	781a      	ldrb	r2, [r3, #0]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	1c5a      	adds	r2, r3, #1
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001976:	b29b      	uxth	r3, r3
 8001978:	3b01      	subs	r3, #1
 800197a:	b29a      	uxth	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001984:	3b01      	subs	r3, #1
 8001986:	b29a      	uxth	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	6a39      	ldr	r1, [r7, #32]
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f000 fafc 	bl	8001f8e <I2C_WaitOnBTFFlagUntilTimeout>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00d      	beq.n	80019b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d107      	bne.n	80019b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e01a      	b.n	80019ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d194      	bne.n	80018ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2220      	movs	r2, #32
 80019d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	e000      	b.n	80019ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80019ec:	2302      	movs	r3, #2
  }
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	00100002 	.word	0x00100002
 80019fc:	ffff0000 	.word	0xffff0000

08001a00 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	; 0x28
 8001a04:	af02      	add	r7, sp, #8
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001a10:	f7ff fb0a 	bl	8001028 <HAL_GetTick>
 8001a14:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001a16:	2301      	movs	r3, #1
 8001a18:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b20      	cmp	r3, #32
 8001a24:	f040 8111 	bne.w	8001c4a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	2319      	movs	r3, #25
 8001a2e:	2201      	movs	r2, #1
 8001a30:	4988      	ldr	r1, [pc, #544]	; (8001c54 <HAL_I2C_IsDeviceReady+0x254>)
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 f994 	bl	8001d60 <I2C_WaitOnFlagUntilTimeout>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e104      	b.n	8001c4c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d101      	bne.n	8001a50 <HAL_I2C_IsDeviceReady+0x50>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e0fd      	b.n	8001c4c <HAL_I2C_IsDeviceReady+0x24c>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d007      	beq.n	8001a76 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0201 	orr.w	r2, r2, #1
 8001a74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2224      	movs	r2, #36	; 0x24
 8001a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4a70      	ldr	r2, [pc, #448]	; (8001c58 <HAL_I2C_IsDeviceReady+0x258>)
 8001a98:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001aa8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f000 f952 	bl	8001d60 <I2C_WaitOnFlagUntilTimeout>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00d      	beq.n	8001ade <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ad0:	d103      	bne.n	8001ada <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ad8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e0b6      	b.n	8001c4c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ade:	897b      	ldrh	r3, [r7, #10]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001aec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001aee:	f7ff fa9b 	bl	8001028 <HAL_GetTick>
 8001af2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	bf0c      	ite	eq
 8001b02:	2301      	moveq	r3, #1
 8001b04:	2300      	movne	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b18:	bf0c      	ite	eq
 8001b1a:	2301      	moveq	r3, #1
 8001b1c:	2300      	movne	r3, #0
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001b22:	e025      	b.n	8001b70 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b24:	f7ff fa80 	bl	8001028 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d302      	bcc.n	8001b3a <HAL_I2C_IsDeviceReady+0x13a>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d103      	bne.n	8001b42 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	22a0      	movs	r2, #160	; 0xa0
 8001b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	bf0c      	ite	eq
 8001b50:	2301      	moveq	r3, #1
 8001b52:	2300      	movne	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b66:	bf0c      	ite	eq
 8001b68:	2301      	moveq	r3, #1
 8001b6a:	2300      	movne	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2ba0      	cmp	r3, #160	; 0xa0
 8001b7a:	d005      	beq.n	8001b88 <HAL_I2C_IsDeviceReady+0x188>
 8001b7c:	7dfb      	ldrb	r3, [r7, #23]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d102      	bne.n	8001b88 <HAL_I2C_IsDeviceReady+0x188>
 8001b82:	7dbb      	ldrb	r3, [r7, #22]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0cd      	beq.n	8001b24 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d129      	bne.n	8001bf2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	2319      	movs	r3, #25
 8001bca:	2201      	movs	r2, #1
 8001bcc:	4921      	ldr	r1, [pc, #132]	; (8001c54 <HAL_I2C_IsDeviceReady+0x254>)
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f000 f8c6 	bl	8001d60 <I2C_WaitOnFlagUntilTimeout>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e036      	b.n	8001c4c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2220      	movs	r2, #32
 8001be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e02c      	b.n	8001c4c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c00:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c0a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	2319      	movs	r3, #25
 8001c12:	2201      	movs	r2, #1
 8001c14:	490f      	ldr	r1, [pc, #60]	; (8001c54 <HAL_I2C_IsDeviceReady+0x254>)
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f000 f8a2 	bl	8001d60 <I2C_WaitOnFlagUntilTimeout>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e012      	b.n	8001c4c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	f4ff af32 	bcc.w	8001a9a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2220      	movs	r2, #32
 8001c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001c4a:	2302      	movs	r3, #2
  }
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3720      	adds	r7, #32
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	00100002 	.word	0x00100002
 8001c58:	ffff0000 	.word	0xffff0000

08001c5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af02      	add	r7, sp, #8
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d006      	beq.n	8001c86 <I2C_MasterRequestWrite+0x2a>
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d003      	beq.n	8001c86 <I2C_MasterRequestWrite+0x2a>
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c84:	d108      	bne.n	8001c98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	e00b      	b.n	8001cb0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9c:	2b12      	cmp	r3, #18
 8001c9e:	d107      	bne.n	8001cb0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f000 f84f 	bl	8001d60 <I2C_WaitOnFlagUntilTimeout>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00d      	beq.n	8001ce4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd6:	d103      	bne.n	8001ce0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e035      	b.n	8001d50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cec:	d108      	bne.n	8001d00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cee:	897b      	ldrh	r3, [r7, #10]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cfc:	611a      	str	r2, [r3, #16]
 8001cfe:	e01b      	b.n	8001d38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d00:	897b      	ldrh	r3, [r7, #10]
 8001d02:	11db      	asrs	r3, r3, #7
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	f003 0306 	and.w	r3, r3, #6
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	f063 030f 	orn	r3, r3, #15
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	490e      	ldr	r1, [pc, #56]	; (8001d58 <I2C_MasterRequestWrite+0xfc>)
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f000 f875 	bl	8001e0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e010      	b.n	8001d50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d2e:	897b      	ldrh	r3, [r7, #10]
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	4907      	ldr	r1, [pc, #28]	; (8001d5c <I2C_MasterRequestWrite+0x100>)
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 f865 	bl	8001e0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	00010008 	.word	0x00010008
 8001d5c:	00010002 	.word	0x00010002

08001d60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d70:	e025      	b.n	8001dbe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d021      	beq.n	8001dbe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d7a:	f7ff f955 	bl	8001028 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d302      	bcc.n	8001d90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d116      	bne.n	8001dbe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2220      	movs	r2, #32
 8001d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f043 0220 	orr.w	r2, r3, #32
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e023      	b.n	8001e06 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	0c1b      	lsrs	r3, r3, #16
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d10d      	bne.n	8001de4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	bf0c      	ite	eq
 8001dda:	2301      	moveq	r3, #1
 8001ddc:	2300      	movne	r3, #0
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	e00c      	b.n	8001dfe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	43da      	mvns	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4013      	ands	r3, r2
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	bf0c      	ite	eq
 8001df6:	2301      	moveq	r3, #1
 8001df8:	2300      	movne	r3, #0
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d0b6      	beq.n	8001d72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e1c:	e051      	b.n	8001ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e2c:	d123      	bne.n	8001e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e3c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e46:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2220      	movs	r2, #32
 8001e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f043 0204 	orr.w	r2, r3, #4
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e046      	b.n	8001f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7c:	d021      	beq.n	8001ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e7e:	f7ff f8d3 	bl	8001028 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d302      	bcc.n	8001e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d116      	bne.n	8001ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f043 0220 	orr.w	r2, r3, #32
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e020      	b.n	8001f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	0c1b      	lsrs	r3, r3, #16
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d10c      	bne.n	8001ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	43da      	mvns	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	bf14      	ite	ne
 8001ede:	2301      	movne	r3, #1
 8001ee0:	2300      	moveq	r3, #0
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	e00b      	b.n	8001efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	43da      	mvns	r2, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	bf14      	ite	ne
 8001ef8:	2301      	movne	r3, #1
 8001efa:	2300      	moveq	r3, #0
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d18d      	bne.n	8001e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f18:	e02d      	b.n	8001f76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f878 	bl	8002010 <I2C_IsAcknowledgeFailed>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e02d      	b.n	8001f86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f30:	d021      	beq.n	8001f76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f32:	f7ff f879 	bl	8001028 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d302      	bcc.n	8001f48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d116      	bne.n	8001f76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2220      	movs	r2, #32
 8001f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f043 0220 	orr.w	r2, r3, #32
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e007      	b.n	8001f86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f80:	2b80      	cmp	r3, #128	; 0x80
 8001f82:	d1ca      	bne.n	8001f1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b084      	sub	sp, #16
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f9a:	e02d      	b.n	8001ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 f837 	bl	8002010 <I2C_IsAcknowledgeFailed>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e02d      	b.n	8002008 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb2:	d021      	beq.n	8001ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fb4:	f7ff f838 	bl	8001028 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d302      	bcc.n	8001fca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d116      	bne.n	8001ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	f043 0220 	orr.w	r2, r3, #32
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e007      	b.n	8002008 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b04      	cmp	r3, #4
 8002004:	d1ca      	bne.n	8001f9c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002026:	d11b      	bne.n	8002060 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002030:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	f043 0204 	orr.w	r2, r3, #4
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e272      	b.n	8002564 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 8087 	beq.w	800219a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800208c:	4b92      	ldr	r3, [pc, #584]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 030c 	and.w	r3, r3, #12
 8002094:	2b04      	cmp	r3, #4
 8002096:	d00c      	beq.n	80020b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002098:	4b8f      	ldr	r3, [pc, #572]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d112      	bne.n	80020ca <HAL_RCC_OscConfig+0x5e>
 80020a4:	4b8c      	ldr	r3, [pc, #560]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b0:	d10b      	bne.n	80020ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b2:	4b89      	ldr	r3, [pc, #548]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d06c      	beq.n	8002198 <HAL_RCC_OscConfig+0x12c>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d168      	bne.n	8002198 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e24c      	b.n	8002564 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d2:	d106      	bne.n	80020e2 <HAL_RCC_OscConfig+0x76>
 80020d4:	4b80      	ldr	r3, [pc, #512]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a7f      	ldr	r2, [pc, #508]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80020da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	e02e      	b.n	8002140 <HAL_RCC_OscConfig+0xd4>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10c      	bne.n	8002104 <HAL_RCC_OscConfig+0x98>
 80020ea:	4b7b      	ldr	r3, [pc, #492]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a7a      	ldr	r2, [pc, #488]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	4b78      	ldr	r3, [pc, #480]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a77      	ldr	r2, [pc, #476]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	e01d      	b.n	8002140 <HAL_RCC_OscConfig+0xd4>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800210c:	d10c      	bne.n	8002128 <HAL_RCC_OscConfig+0xbc>
 800210e:	4b72      	ldr	r3, [pc, #456]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a71      	ldr	r2, [pc, #452]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 8002114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	4b6f      	ldr	r3, [pc, #444]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a6e      	ldr	r2, [pc, #440]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 8002120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	e00b      	b.n	8002140 <HAL_RCC_OscConfig+0xd4>
 8002128:	4b6b      	ldr	r3, [pc, #428]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a6a      	ldr	r2, [pc, #424]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800212e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	4b68      	ldr	r3, [pc, #416]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a67      	ldr	r2, [pc, #412]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800213a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d013      	beq.n	8002170 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7fe ff6e 	bl	8001028 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002150:	f7fe ff6a 	bl	8001028 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b64      	cmp	r3, #100	; 0x64
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e200      	b.n	8002564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002162:	4b5d      	ldr	r3, [pc, #372]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0xe4>
 800216e:	e014      	b.n	800219a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7fe ff5a 	bl	8001028 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002178:	f7fe ff56 	bl	8001028 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e1ec      	b.n	8002564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800218a:	4b53      	ldr	r3, [pc, #332]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x10c>
 8002196:	e000      	b.n	800219a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d063      	beq.n	800226e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021a6:	4b4c      	ldr	r3, [pc, #304]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00b      	beq.n	80021ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021b2:	4b49      	ldr	r3, [pc, #292]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d11c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x18c>
 80021be:	4b46      	ldr	r3, [pc, #280]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d116      	bne.n	80021f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ca:	4b43      	ldr	r3, [pc, #268]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d005      	beq.n	80021e2 <HAL_RCC_OscConfig+0x176>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d001      	beq.n	80021e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e1c0      	b.n	8002564 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e2:	4b3d      	ldr	r3, [pc, #244]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4939      	ldr	r1, [pc, #228]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f6:	e03a      	b.n	800226e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d020      	beq.n	8002242 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002200:	4b36      	ldr	r3, [pc, #216]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 8002202:	2201      	movs	r2, #1
 8002204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002206:	f7fe ff0f 	bl	8001028 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800220e:	f7fe ff0b 	bl	8001028 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e1a1      	b.n	8002564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002220:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f0      	beq.n	800220e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222c:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4927      	ldr	r1, [pc, #156]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800223c:	4313      	orrs	r3, r2
 800223e:	600b      	str	r3, [r1, #0]
 8002240:	e015      	b.n	800226e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002242:	4b26      	ldr	r3, [pc, #152]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002248:	f7fe feee 	bl	8001028 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002250:	f7fe feea 	bl	8001028 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e180      	b.n	8002564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002262:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b00      	cmp	r3, #0
 8002278:	d03a      	beq.n	80022f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d019      	beq.n	80022b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002282:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <HAL_RCC_OscConfig+0x274>)
 8002284:	2201      	movs	r2, #1
 8002286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002288:	f7fe fece 	bl	8001028 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002290:	f7fe feca 	bl	8001028 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e160      	b.n	8002564 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a2:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022ae:	2001      	movs	r0, #1
 80022b0:	f000 fb08 	bl	80028c4 <RCC_Delay>
 80022b4:	e01c      	b.n	80022f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <HAL_RCC_OscConfig+0x274>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022bc:	f7fe feb4 	bl	8001028 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c2:	e00f      	b.n	80022e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c4:	f7fe feb0 	bl	8001028 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d908      	bls.n	80022e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e146      	b.n	8002564 <HAL_RCC_OscConfig+0x4f8>
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000
 80022dc:	42420000 	.word	0x42420000
 80022e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e4:	4b92      	ldr	r3, [pc, #584]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1e9      	bne.n	80022c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 80a6 	beq.w	800244a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fe:	2300      	movs	r3, #0
 8002300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002302:	4b8b      	ldr	r3, [pc, #556]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10d      	bne.n	800232a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230e:	4b88      	ldr	r3, [pc, #544]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	4a87      	ldr	r2, [pc, #540]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002318:	61d3      	str	r3, [r2, #28]
 800231a:	4b85      	ldr	r3, [pc, #532]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002326:	2301      	movs	r3, #1
 8002328:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232a:	4b82      	ldr	r3, [pc, #520]	; (8002534 <HAL_RCC_OscConfig+0x4c8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	2b00      	cmp	r3, #0
 8002334:	d118      	bne.n	8002368 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002336:	4b7f      	ldr	r3, [pc, #508]	; (8002534 <HAL_RCC_OscConfig+0x4c8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a7e      	ldr	r2, [pc, #504]	; (8002534 <HAL_RCC_OscConfig+0x4c8>)
 800233c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002342:	f7fe fe71 	bl	8001028 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234a:	f7fe fe6d 	bl	8001028 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b64      	cmp	r3, #100	; 0x64
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e103      	b.n	8002564 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235c:	4b75      	ldr	r3, [pc, #468]	; (8002534 <HAL_RCC_OscConfig+0x4c8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0f0      	beq.n	800234a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d106      	bne.n	800237e <HAL_RCC_OscConfig+0x312>
 8002370:	4b6f      	ldr	r3, [pc, #444]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	4a6e      	ldr	r2, [pc, #440]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	6213      	str	r3, [r2, #32]
 800237c:	e02d      	b.n	80023da <HAL_RCC_OscConfig+0x36e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10c      	bne.n	80023a0 <HAL_RCC_OscConfig+0x334>
 8002386:	4b6a      	ldr	r3, [pc, #424]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	4a69      	ldr	r2, [pc, #420]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 800238c:	f023 0301 	bic.w	r3, r3, #1
 8002390:	6213      	str	r3, [r2, #32]
 8002392:	4b67      	ldr	r3, [pc, #412]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	4a66      	ldr	r2, [pc, #408]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	f023 0304 	bic.w	r3, r3, #4
 800239c:	6213      	str	r3, [r2, #32]
 800239e:	e01c      	b.n	80023da <HAL_RCC_OscConfig+0x36e>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	2b05      	cmp	r3, #5
 80023a6:	d10c      	bne.n	80023c2 <HAL_RCC_OscConfig+0x356>
 80023a8:	4b61      	ldr	r3, [pc, #388]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	4a60      	ldr	r2, [pc, #384]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 80023ae:	f043 0304 	orr.w	r3, r3, #4
 80023b2:	6213      	str	r3, [r2, #32]
 80023b4:	4b5e      	ldr	r3, [pc, #376]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4a5d      	ldr	r2, [pc, #372]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	6213      	str	r3, [r2, #32]
 80023c0:	e00b      	b.n	80023da <HAL_RCC_OscConfig+0x36e>
 80023c2:	4b5b      	ldr	r3, [pc, #364]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	4a5a      	ldr	r2, [pc, #360]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	6213      	str	r3, [r2, #32]
 80023ce:	4b58      	ldr	r3, [pc, #352]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	4a57      	ldr	r2, [pc, #348]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	f023 0304 	bic.w	r3, r3, #4
 80023d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d015      	beq.n	800240e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e2:	f7fe fe21 	bl	8001028 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e8:	e00a      	b.n	8002400 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ea:	f7fe fe1d 	bl	8001028 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e0b1      	b.n	8002564 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002400:	4b4b      	ldr	r3, [pc, #300]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0ee      	beq.n	80023ea <HAL_RCC_OscConfig+0x37e>
 800240c:	e014      	b.n	8002438 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240e:	f7fe fe0b 	bl	8001028 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002414:	e00a      	b.n	800242c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002416:	f7fe fe07 	bl	8001028 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	f241 3288 	movw	r2, #5000	; 0x1388
 8002424:	4293      	cmp	r3, r2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e09b      	b.n	8002564 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800242c:	4b40      	ldr	r3, [pc, #256]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1ee      	bne.n	8002416 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002438:	7dfb      	ldrb	r3, [r7, #23]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d105      	bne.n	800244a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243e:	4b3c      	ldr	r3, [pc, #240]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	4a3b      	ldr	r2, [pc, #236]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002448:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 8087 	beq.w	8002562 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002454:	4b36      	ldr	r3, [pc, #216]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 030c 	and.w	r3, r3, #12
 800245c:	2b08      	cmp	r3, #8
 800245e:	d061      	beq.n	8002524 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d146      	bne.n	80024f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002468:	4b33      	ldr	r3, [pc, #204]	; (8002538 <HAL_RCC_OscConfig+0x4cc>)
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246e:	f7fe fddb 	bl	8001028 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002476:	f7fe fdd7 	bl	8001028 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e06d      	b.n	8002564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002488:	4b29      	ldr	r3, [pc, #164]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1f0      	bne.n	8002476 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800249c:	d108      	bne.n	80024b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800249e:	4b24      	ldr	r3, [pc, #144]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	4921      	ldr	r1, [pc, #132]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024b0:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a19      	ldr	r1, [r3, #32]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	430b      	orrs	r3, r1
 80024c2:	491b      	ldr	r1, [pc, #108]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c8:	4b1b      	ldr	r3, [pc, #108]	; (8002538 <HAL_RCC_OscConfig+0x4cc>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ce:	f7fe fdab 	bl	8001028 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d6:	f7fe fda7 	bl	8001028 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e03d      	b.n	8002564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x46a>
 80024f4:	e035      	b.n	8002562 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <HAL_RCC_OscConfig+0x4cc>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7fe fd94 	bl	8001028 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002504:	f7fe fd90 	bl	8001028 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e026      	b.n	8002564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002516:	4b06      	ldr	r3, [pc, #24]	; (8002530 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x498>
 8002522:	e01e      	b.n	8002562 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d107      	bne.n	800253c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e019      	b.n	8002564 <HAL_RCC_OscConfig+0x4f8>
 8002530:	40021000 	.word	0x40021000
 8002534:	40007000 	.word	0x40007000
 8002538:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <HAL_RCC_OscConfig+0x500>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	429a      	cmp	r2, r3
 800254e:	d106      	bne.n	800255e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800255a:	429a      	cmp	r2, r3
 800255c:	d001      	beq.n	8002562 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40021000 	.word	0x40021000

08002570 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0d0      	b.n	8002726 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002584:	4b6a      	ldr	r3, [pc, #424]	; (8002730 <HAL_RCC_ClockConfig+0x1c0>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d910      	bls.n	80025b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002592:	4b67      	ldr	r3, [pc, #412]	; (8002730 <HAL_RCC_ClockConfig+0x1c0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 0207 	bic.w	r2, r3, #7
 800259a:	4965      	ldr	r1, [pc, #404]	; (8002730 <HAL_RCC_ClockConfig+0x1c0>)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	4313      	orrs	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a2:	4b63      	ldr	r3, [pc, #396]	; (8002730 <HAL_RCC_ClockConfig+0x1c0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d001      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0b8      	b.n	8002726 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d020      	beq.n	8002602 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025cc:	4b59      	ldr	r3, [pc, #356]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	4a58      	ldr	r2, [pc, #352]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0308 	and.w	r3, r3, #8
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e4:	4b53      	ldr	r3, [pc, #332]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	4a52      	ldr	r2, [pc, #328]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f0:	4b50      	ldr	r3, [pc, #320]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	494d      	ldr	r1, [pc, #308]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d040      	beq.n	8002690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d107      	bne.n	8002626 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002616:	4b47      	ldr	r3, [pc, #284]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d115      	bne.n	800264e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e07f      	b.n	8002726 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d107      	bne.n	800263e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262e:	4b41      	ldr	r3, [pc, #260]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d109      	bne.n	800264e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e073      	b.n	8002726 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263e:	4b3d      	ldr	r3, [pc, #244]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e06b      	b.n	8002726 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800264e:	4b39      	ldr	r3, [pc, #228]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f023 0203 	bic.w	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	4936      	ldr	r1, [pc, #216]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	4313      	orrs	r3, r2
 800265e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002660:	f7fe fce2 	bl	8001028 <HAL_GetTick>
 8002664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002666:	e00a      	b.n	800267e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002668:	f7fe fcde 	bl	8001028 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	f241 3288 	movw	r2, #5000	; 0x1388
 8002676:	4293      	cmp	r3, r2
 8002678:	d901      	bls.n	800267e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e053      	b.n	8002726 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267e:	4b2d      	ldr	r3, [pc, #180]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 020c 	and.w	r2, r3, #12
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	429a      	cmp	r2, r3
 800268e:	d1eb      	bne.n	8002668 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002690:	4b27      	ldr	r3, [pc, #156]	; (8002730 <HAL_RCC_ClockConfig+0x1c0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d210      	bcs.n	80026c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269e:	4b24      	ldr	r3, [pc, #144]	; (8002730 <HAL_RCC_ClockConfig+0x1c0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 0207 	bic.w	r2, r3, #7
 80026a6:	4922      	ldr	r1, [pc, #136]	; (8002730 <HAL_RCC_ClockConfig+0x1c0>)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ae:	4b20      	ldr	r3, [pc, #128]	; (8002730 <HAL_RCC_ClockConfig+0x1c0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e032      	b.n	8002726 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026cc:	4b19      	ldr	r3, [pc, #100]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4916      	ldr	r1, [pc, #88]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d009      	beq.n	80026fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	490e      	ldr	r1, [pc, #56]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026fe:	f000 f821 	bl	8002744 <HAL_RCC_GetSysClockFreq>
 8002702:	4602      	mov	r2, r0
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	091b      	lsrs	r3, r3, #4
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	490a      	ldr	r1, [pc, #40]	; (8002738 <HAL_RCC_ClockConfig+0x1c8>)
 8002710:	5ccb      	ldrb	r3, [r1, r3]
 8002712:	fa22 f303 	lsr.w	r3, r2, r3
 8002716:	4a09      	ldr	r2, [pc, #36]	; (800273c <HAL_RCC_ClockConfig+0x1cc>)
 8002718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800271a:	4b09      	ldr	r3, [pc, #36]	; (8002740 <HAL_RCC_ClockConfig+0x1d0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe faf0 	bl	8000d04 <HAL_InitTick>

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40022000 	.word	0x40022000
 8002734:	40021000 	.word	0x40021000
 8002738:	08006354 	.word	0x08006354
 800273c:	20000008 	.word	0x20000008
 8002740:	2000000c 	.word	0x2000000c

08002744 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002744:	b490      	push	{r4, r7}
 8002746:	b08a      	sub	sp, #40	; 0x28
 8002748:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800274a:	4b29      	ldr	r3, [pc, #164]	; (80027f0 <HAL_RCC_GetSysClockFreq+0xac>)
 800274c:	1d3c      	adds	r4, r7, #4
 800274e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002750:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002754:	f240 2301 	movw	r3, #513	; 0x201
 8002758:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	2300      	movs	r3, #0
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	2300      	movs	r3, #0
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800276e:	4b21      	ldr	r3, [pc, #132]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b04      	cmp	r3, #4
 800277c:	d002      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0x40>
 800277e:	2b08      	cmp	r3, #8
 8002780:	d003      	beq.n	800278a <HAL_RCC_GetSysClockFreq+0x46>
 8002782:	e02b      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002784:	4b1c      	ldr	r3, [pc, #112]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002786:	623b      	str	r3, [r7, #32]
      break;
 8002788:	e02b      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	0c9b      	lsrs	r3, r3, #18
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	3328      	adds	r3, #40	; 0x28
 8002794:	443b      	add	r3, r7
 8002796:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800279a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d012      	beq.n	80027cc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027a6:	4b13      	ldr	r3, [pc, #76]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	0c5b      	lsrs	r3, r3, #17
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	3328      	adds	r3, #40	; 0x28
 80027b2:	443b      	add	r3, r7
 80027b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	4a0e      	ldr	r2, [pc, #56]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027be:	fb03 f202 	mul.w	r2, r3, r2
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ca:	e004      	b.n	80027d6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	4a0b      	ldr	r2, [pc, #44]	; (80027fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80027d0:	fb02 f303 	mul.w	r3, r2, r3
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	623b      	str	r3, [r7, #32]
      break;
 80027da:	e002      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027dc:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027de:	623b      	str	r3, [r7, #32]
      break;
 80027e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027e2:	6a3b      	ldr	r3, [r7, #32]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3728      	adds	r7, #40	; 0x28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc90      	pop	{r4, r7}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	080055e0 	.word	0x080055e0
 80027f4:	40021000 	.word	0x40021000
 80027f8:	007a1200 	.word	0x007a1200
 80027fc:	003d0900 	.word	0x003d0900

08002800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002804:	4b02      	ldr	r3, [pc, #8]	; (8002810 <HAL_RCC_GetHCLKFreq+0x10>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	20000008 	.word	0x20000008

08002814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002818:	f7ff fff2 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 800281c:	4602      	mov	r2, r0
 800281e:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	0a1b      	lsrs	r3, r3, #8
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	4903      	ldr	r1, [pc, #12]	; (8002838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800282a:	5ccb      	ldrb	r3, [r1, r3]
 800282c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002830:	4618      	mov	r0, r3
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021000 	.word	0x40021000
 8002838:	08006364 	.word	0x08006364

0800283c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002840:	f7ff ffde 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 8002844:	4602      	mov	r2, r0
 8002846:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	0adb      	lsrs	r3, r3, #11
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	4903      	ldr	r1, [pc, #12]	; (8002860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002852:	5ccb      	ldrb	r3, [r1, r3]
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000
 8002860:	08006364 	.word	0x08006364

08002864 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	220f      	movs	r2, #15
 8002872:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <HAL_RCC_GetClockConfig+0x58>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 0203 	and.w	r2, r3, #3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002880:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <HAL_RCC_GetClockConfig+0x58>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800288c:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <HAL_RCC_GetClockConfig+0x58>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002898:	4b08      	ldr	r3, [pc, #32]	; (80028bc <HAL_RCC_GetClockConfig+0x58>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	08db      	lsrs	r3, r3, #3
 800289e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_RCC_GetClockConfig+0x5c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0207 	and.w	r2, r3, #7
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40022000 	.word	0x40022000

080028c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028cc:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <RCC_Delay+0x34>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <RCC_Delay+0x38>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	0a5b      	lsrs	r3, r3, #9
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	fb02 f303 	mul.w	r3, r2, r3
 80028de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028e0:	bf00      	nop
  }
  while (Delay --);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1e5a      	subs	r2, r3, #1
 80028e6:	60fa      	str	r2, [r7, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f9      	bne.n	80028e0 <RCC_Delay+0x1c>
}
 80028ec:	bf00      	nop
 80028ee:	bf00      	nop
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	20000008 	.word	0x20000008
 80028fc:	10624dd3 	.word	0x10624dd3

08002900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e041      	b.n	8002996 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f839 	bl	800299e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3304      	adds	r3, #4
 800293c:	4619      	mov	r1, r3
 800293e:	4610      	mov	r0, r2
 8002940:	f000 f9b4 	bl	8002cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr

080029b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d001      	beq.n	80029c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e03a      	b.n	8002a3e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2202      	movs	r2, #2
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0201 	orr.w	r2, r2, #1
 80029de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a18      	ldr	r2, [pc, #96]	; (8002a48 <HAL_TIM_Base_Start_IT+0x98>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00e      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0x58>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f2:	d009      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0x58>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a14      	ldr	r2, [pc, #80]	; (8002a4c <HAL_TIM_Base_Start_IT+0x9c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d004      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0x58>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a13      	ldr	r2, [pc, #76]	; (8002a50 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d111      	bne.n	8002a2c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2b06      	cmp	r3, #6
 8002a18:	d010      	beq.n	8002a3c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 0201 	orr.w	r2, r2, #1
 8002a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a2a:	e007      	b.n	8002a3c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	40012c00 	.word	0x40012c00
 8002a4c:	40000400 	.word	0x40000400
 8002a50:	40000800 	.word	0x40000800

08002a54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d122      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d11b      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f06f 0202 	mvn.w	r2, #2
 8002a80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f8ed 	bl	8002c76 <HAL_TIM_IC_CaptureCallback>
 8002a9c:	e005      	b.n	8002aaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f8e0 	bl	8002c64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f8ef 	bl	8002c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d122      	bne.n	8002b04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d11b      	bne.n	8002b04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f06f 0204 	mvn.w	r2, #4
 8002ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2202      	movs	r2, #2
 8002ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f8c3 	bl	8002c76 <HAL_TIM_IC_CaptureCallback>
 8002af0:	e005      	b.n	8002afe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f8b6 	bl	8002c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f8c5 	bl	8002c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d122      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d11b      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f06f 0208 	mvn.w	r2, #8
 8002b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f899 	bl	8002c76 <HAL_TIM_IC_CaptureCallback>
 8002b44:	e005      	b.n	8002b52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f88c 	bl	8002c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f89b 	bl	8002c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f003 0310 	and.w	r3, r3, #16
 8002b62:	2b10      	cmp	r3, #16
 8002b64:	d122      	bne.n	8002bac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f003 0310 	and.w	r3, r3, #16
 8002b70:	2b10      	cmp	r3, #16
 8002b72:	d11b      	bne.n	8002bac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0210 	mvn.w	r2, #16
 8002b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2208      	movs	r2, #8
 8002b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f86f 	bl	8002c76 <HAL_TIM_IC_CaptureCallback>
 8002b98:	e005      	b.n	8002ba6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f862 	bl	8002c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f871 	bl	8002c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d10e      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d107      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0201 	mvn.w	r2, #1
 8002bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fd fc9e 	bl	8000514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be2:	2b80      	cmp	r3, #128	; 0x80
 8002be4:	d10e      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf0:	2b80      	cmp	r3, #128	; 0x80
 8002bf2:	d107      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f8bf 	bl	8002d82 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0e:	2b40      	cmp	r3, #64	; 0x40
 8002c10:	d10e      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1c:	2b40      	cmp	r3, #64	; 0x40
 8002c1e:	d107      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f835 	bl	8002c9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d10e      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b20      	cmp	r3, #32
 8002c4a:	d107      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f06f 0220 	mvn.w	r2, #32
 8002c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f88a 	bl	8002d70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr

08002c76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a29      	ldr	r2, [pc, #164]	; (8002d64 <TIM_Base_SetConfig+0xb8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d00b      	beq.n	8002cdc <TIM_Base_SetConfig+0x30>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cca:	d007      	beq.n	8002cdc <TIM_Base_SetConfig+0x30>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a26      	ldr	r2, [pc, #152]	; (8002d68 <TIM_Base_SetConfig+0xbc>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d003      	beq.n	8002cdc <TIM_Base_SetConfig+0x30>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a25      	ldr	r2, [pc, #148]	; (8002d6c <TIM_Base_SetConfig+0xc0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d108      	bne.n	8002cee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a1c      	ldr	r2, [pc, #112]	; (8002d64 <TIM_Base_SetConfig+0xb8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d00b      	beq.n	8002d0e <TIM_Base_SetConfig+0x62>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfc:	d007      	beq.n	8002d0e <TIM_Base_SetConfig+0x62>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a19      	ldr	r2, [pc, #100]	; (8002d68 <TIM_Base_SetConfig+0xbc>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d003      	beq.n	8002d0e <TIM_Base_SetConfig+0x62>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a18      	ldr	r2, [pc, #96]	; (8002d6c <TIM_Base_SetConfig+0xc0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d108      	bne.n	8002d20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a07      	ldr	r2, [pc, #28]	; (8002d64 <TIM_Base_SetConfig+0xb8>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d103      	bne.n	8002d54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	691a      	ldr	r2, [r3, #16]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	615a      	str	r2, [r3, #20]
}
 8002d5a:	bf00      	nop
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr
 8002d64:	40012c00 	.word	0x40012c00
 8002d68:	40000400 	.word	0x40000400
 8002d6c:	40000800 	.word	0x40000800

08002d70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr

08002d82 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e03f      	b.n	8002e26 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fd ff58 	bl	8000c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2224      	movs	r2, #36	; 0x24
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f905 	bl	8002fe8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695a      	ldr	r2, [r3, #20]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b08a      	sub	sp, #40	; 0x28
 8002e32:	af02      	add	r7, sp, #8
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b20      	cmp	r3, #32
 8002e4c:	d17c      	bne.n	8002f48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <HAL_UART_Transmit+0x2c>
 8002e54:	88fb      	ldrh	r3, [r7, #6]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e075      	b.n	8002f4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_UART_Transmit+0x3e>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e06e      	b.n	8002f4a <HAL_UART_Transmit+0x11c>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2221      	movs	r2, #33	; 0x21
 8002e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e82:	f7fe f8d1 	bl	8001028 <HAL_GetTick>
 8002e86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	88fa      	ldrh	r2, [r7, #6]
 8002e8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	88fa      	ldrh	r2, [r7, #6]
 8002e92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e9c:	d108      	bne.n	8002eb0 <HAL_UART_Transmit+0x82>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d104      	bne.n	8002eb0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	e003      	b.n	8002eb8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ec0:	e02a      	b.n	8002f18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2180      	movs	r1, #128	; 0x80
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 f840 	bl	8002f52 <UART_WaitOnFlagUntilTimeout>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e036      	b.n	8002f4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10b      	bne.n	8002efa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ef0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	3302      	adds	r3, #2
 8002ef6:	61bb      	str	r3, [r7, #24]
 8002ef8:	e007      	b.n	8002f0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	781a      	ldrb	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	3301      	adds	r3, #1
 8002f08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1cf      	bne.n	8002ec2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2140      	movs	r1, #64	; 0x40
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 f810 	bl	8002f52 <UART_WaitOnFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e006      	b.n	8002f4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	e000      	b.n	8002f4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f48:	2302      	movs	r3, #2
  }
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3720      	adds	r7, #32
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b084      	sub	sp, #16
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	603b      	str	r3, [r7, #0]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f62:	e02c      	b.n	8002fbe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6a:	d028      	beq.n	8002fbe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d007      	beq.n	8002f82 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f72:	f7fe f859 	bl	8001028 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d21d      	bcs.n	8002fbe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f90:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695a      	ldr	r2, [r3, #20]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0201 	bic.w	r2, r2, #1
 8002fa0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e00f      	b.n	8002fde <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	bf0c      	ite	eq
 8002fce:	2301      	moveq	r3, #1
 8002fd0:	2300      	movne	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	79fb      	ldrb	r3, [r7, #7]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d0c3      	beq.n	8002f64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	4313      	orrs	r3, r2
 8003016:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003022:	f023 030c 	bic.w	r3, r3, #12
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	430b      	orrs	r3, r1
 800302e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a2c      	ldr	r2, [pc, #176]	; (80030fc <UART_SetConfig+0x114>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d103      	bne.n	8003058 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003050:	f7ff fbf4 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	e002      	b.n	800305e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003058:	f7ff fbdc 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 800305c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	009a      	lsls	r2, r3, #2
 8003068:	441a      	add	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	fbb2 f3f3 	udiv	r3, r2, r3
 8003074:	4a22      	ldr	r2, [pc, #136]	; (8003100 <UART_SetConfig+0x118>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	0119      	lsls	r1, r3, #4
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	009a      	lsls	r2, r3, #2
 8003088:	441a      	add	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	fbb2 f2f3 	udiv	r2, r2, r3
 8003094:	4b1a      	ldr	r3, [pc, #104]	; (8003100 <UART_SetConfig+0x118>)
 8003096:	fba3 0302 	umull	r0, r3, r3, r2
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	2064      	movs	r0, #100	; 0x64
 800309e:	fb00 f303 	mul.w	r3, r0, r3
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	3332      	adds	r3, #50	; 0x32
 80030a8:	4a15      	ldr	r2, [pc, #84]	; (8003100 <UART_SetConfig+0x118>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030b4:	4419      	add	r1, r3
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	009a      	lsls	r2, r3, #2
 80030c0:	441a      	add	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <UART_SetConfig+0x118>)
 80030ce:	fba3 0302 	umull	r0, r3, r3, r2
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	2064      	movs	r0, #100	; 0x64
 80030d6:	fb00 f303 	mul.w	r3, r0, r3
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	3332      	adds	r3, #50	; 0x32
 80030e0:	4a07      	ldr	r2, [pc, #28]	; (8003100 <UART_SetConfig+0x118>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	f003 020f 	and.w	r2, r3, #15
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	440a      	add	r2, r1
 80030f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80030f4:	bf00      	nop
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40013800 	.word	0x40013800
 8003100:	51eb851f 	.word	0x51eb851f

08003104 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f103 0208 	add.w	r2, r3, #8
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f04f 32ff 	mov.w	r2, #4294967295
 800311c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f103 0208 	add.w	r2, r3, #8
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f103 0208 	add.w	r2, r3, #8
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr

08003142 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800315a:	b480      	push	{r7}
 800315c:	b085      	sub	sp, #20
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	601a      	str	r2, [r3, #0]
}
 8003196:	bf00      	nop
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr

080031a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b6:	d103      	bne.n	80031c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	e00c      	b.n	80031da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3308      	adds	r3, #8
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	e002      	b.n	80031ce <vListInsert+0x2e>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d2f6      	bcs.n	80031c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	601a      	str	r2, [r3, #0]
}
 8003206:	bf00      	nop
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6892      	ldr	r2, [r2, #8]
 8003226:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6852      	ldr	r2, [r2, #4]
 8003230:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	429a      	cmp	r2, r3
 800323a:	d103      	bne.n	8003244 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	1e5a      	subs	r2, r3, #1
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr

08003262 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003262:	b580      	push	{r7, lr}
 8003264:	b08e      	sub	sp, #56	; 0x38
 8003266:	af04      	add	r7, sp, #16
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	607a      	str	r2, [r7, #4]
 800326e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10a      	bne.n	800328c <xTaskCreateStatic+0x2a>
	__asm volatile
 8003276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	623b      	str	r3, [r7, #32]
}
 8003288:	bf00      	nop
 800328a:	e7fe      	b.n	800328a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800328c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10a      	bne.n	80032a8 <xTaskCreateStatic+0x46>
	__asm volatile
 8003292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003296:	f383 8811 	msr	BASEPRI, r3
 800329a:	f3bf 8f6f 	isb	sy
 800329e:	f3bf 8f4f 	dsb	sy
 80032a2:	61fb      	str	r3, [r7, #28]
}
 80032a4:	bf00      	nop
 80032a6:	e7fe      	b.n	80032a6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80032a8:	23b4      	movs	r3, #180	; 0xb4
 80032aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	2bb4      	cmp	r3, #180	; 0xb4
 80032b0:	d00a      	beq.n	80032c8 <xTaskCreateStatic+0x66>
	__asm volatile
 80032b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	61bb      	str	r3, [r7, #24]
}
 80032c4:	bf00      	nop
 80032c6:	e7fe      	b.n	80032c6 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80032c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d01e      	beq.n	800330c <xTaskCreateStatic+0xaa>
 80032ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d01b      	beq.n	800330c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	2202      	movs	r2, #2
 80032e2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80032e6:	2300      	movs	r3, #0
 80032e8:	9303      	str	r3, [sp, #12]
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	9302      	str	r3, [sp, #8]
 80032ee:	f107 0314 	add.w	r3, r7, #20
 80032f2:	9301      	str	r3, [sp, #4]
 80032f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f850 	bl	80033a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003304:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003306:	f000 f8e3 	bl	80034d0 <prvAddNewTaskToReadyList>
 800330a:	e001      	b.n	8003310 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003310:	697b      	ldr	r3, [r7, #20]
	}
 8003312:	4618      	mov	r0, r3
 8003314:	3728      	adds	r7, #40	; 0x28
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800331a:	b580      	push	{r7, lr}
 800331c:	b08c      	sub	sp, #48	; 0x30
 800331e:	af04      	add	r7, sp, #16
 8003320:	60f8      	str	r0, [r7, #12]
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	603b      	str	r3, [r7, #0]
 8003326:	4613      	mov	r3, r2
 8003328:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800332a:	88fb      	ldrh	r3, [r7, #6]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fe96 	bl	8004060 <pvPortMalloc>
 8003334:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00e      	beq.n	800335a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800333c:	20b4      	movs	r0, #180	; 0xb4
 800333e:	f000 fe8f 	bl	8004060 <pvPortMalloc>
 8003342:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
 8003350:	e005      	b.n	800335e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003352:	6978      	ldr	r0, [r7, #20]
 8003354:	f000 ff48 	bl	80041e8 <vPortFree>
 8003358:	e001      	b.n	800335e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d017      	beq.n	8003394 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800336c:	88fa      	ldrh	r2, [r7, #6]
 800336e:	2300      	movs	r3, #0
 8003370:	9303      	str	r3, [sp, #12]
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	9302      	str	r3, [sp, #8]
 8003376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003378:	9301      	str	r3, [sp, #4]
 800337a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f80e 	bl	80033a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003388:	69f8      	ldr	r0, [r7, #28]
 800338a:	f000 f8a1 	bl	80034d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800338e:	2301      	movs	r3, #1
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	e002      	b.n	800339a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003394:	f04f 33ff 	mov.w	r3, #4294967295
 8003398:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800339a:	69bb      	ldr	r3, [r7, #24]
	}
 800339c:	4618      	mov	r0, r3
 800339e:	3720      	adds	r7, #32
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
 80033b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80033b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80033bc:	3b01      	subs	r3, #1
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	f023 0307 	bic.w	r3, r3, #7
 80033ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <prvInitialiseNewTask+0x48>
	__asm volatile
 80033d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033da:	f383 8811 	msr	BASEPRI, r3
 80033de:	f3bf 8f6f 	isb	sy
 80033e2:	f3bf 8f4f 	dsb	sy
 80033e6:	617b      	str	r3, [r7, #20]
}
 80033e8:	bf00      	nop
 80033ea:	e7fe      	b.n	80033ea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033ec:	2300      	movs	r3, #0
 80033ee:	61fb      	str	r3, [r7, #28]
 80033f0:	e012      	b.n	8003418 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	4413      	add	r3, r2
 80033f8:	7819      	ldrb	r1, [r3, #0]
 80033fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	4413      	add	r3, r2
 8003400:	3334      	adds	r3, #52	; 0x34
 8003402:	460a      	mov	r2, r1
 8003404:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	4413      	add	r3, r2
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d006      	beq.n	8003420 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3301      	adds	r3, #1
 8003416:	61fb      	str	r3, [r7, #28]
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	2b0f      	cmp	r3, #15
 800341c:	d9e9      	bls.n	80033f2 <prvInitialiseNewTask+0x4e>
 800341e:	e000      	b.n	8003422 <prvInitialiseNewTask+0x7e>
		{
			break;
 8003420:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800342a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342c:	2b06      	cmp	r3, #6
 800342e:	d901      	bls.n	8003434 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003430:	2306      	movs	r3, #6
 8003432:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003438:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800343a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800343e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003442:	2200      	movs	r2, #0
 8003444:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003448:	3304      	adds	r3, #4
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff fe79 	bl	8003142 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003452:	3318      	adds	r3, #24
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fe74 	bl	8003142 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800345a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800345e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003462:	f1c3 0207 	rsb	r2, r3, #7
 8003466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003468:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800346e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003472:	2200      	movs	r2, #0
 8003474:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347a:	2200      	movs	r2, #0
 800347c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003482:	334c      	adds	r3, #76	; 0x4c
 8003484:	2260      	movs	r2, #96	; 0x60
 8003486:	2100      	movs	r1, #0
 8003488:	4618      	mov	r0, r3
 800348a:	f001 f8e4 	bl	8004656 <memset>
 800348e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003490:	4a0c      	ldr	r2, [pc, #48]	; (80034c4 <prvInitialiseNewTask+0x120>)
 8003492:	651a      	str	r2, [r3, #80]	; 0x50
 8003494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003496:	4a0c      	ldr	r2, [pc, #48]	; (80034c8 <prvInitialiseNewTask+0x124>)
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
 800349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349c:	4a0b      	ldr	r2, [pc, #44]	; (80034cc <prvInitialiseNewTask+0x128>)
 800349e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	68f9      	ldr	r1, [r7, #12]
 80034a4:	69b8      	ldr	r0, [r7, #24]
 80034a6:	f000 fc29 	bl	8003cfc <pxPortInitialiseStack>
 80034aa:	4602      	mov	r2, r0
 80034ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80034b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034bc:	bf00      	nop
 80034be:	3720      	adds	r7, #32
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	0800638c 	.word	0x0800638c
 80034c8:	080063ac 	.word	0x080063ac
 80034cc:	0800636c 	.word	0x0800636c

080034d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80034d8:	f000 fd00 	bl	8003edc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80034dc:	4b2a      	ldr	r3, [pc, #168]	; (8003588 <prvAddNewTaskToReadyList+0xb8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3301      	adds	r3, #1
 80034e2:	4a29      	ldr	r2, [pc, #164]	; (8003588 <prvAddNewTaskToReadyList+0xb8>)
 80034e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80034e6:	4b29      	ldr	r3, [pc, #164]	; (800358c <prvAddNewTaskToReadyList+0xbc>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034ee:	4a27      	ldr	r2, [pc, #156]	; (800358c <prvAddNewTaskToReadyList+0xbc>)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034f4:	4b24      	ldr	r3, [pc, #144]	; (8003588 <prvAddNewTaskToReadyList+0xb8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d110      	bne.n	800351e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034fc:	f000 fad2 	bl	8003aa4 <prvInitialiseTaskLists>
 8003500:	e00d      	b.n	800351e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003502:	4b23      	ldr	r3, [pc, #140]	; (8003590 <prvAddNewTaskToReadyList+0xc0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d109      	bne.n	800351e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800350a:	4b20      	ldr	r3, [pc, #128]	; (800358c <prvAddNewTaskToReadyList+0xbc>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	429a      	cmp	r2, r3
 8003516:	d802      	bhi.n	800351e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003518:	4a1c      	ldr	r2, [pc, #112]	; (800358c <prvAddNewTaskToReadyList+0xbc>)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800351e:	4b1d      	ldr	r3, [pc, #116]	; (8003594 <prvAddNewTaskToReadyList+0xc4>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3301      	adds	r3, #1
 8003524:	4a1b      	ldr	r2, [pc, #108]	; (8003594 <prvAddNewTaskToReadyList+0xc4>)
 8003526:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	2201      	movs	r2, #1
 800352e:	409a      	lsls	r2, r3
 8003530:	4b19      	ldr	r3, [pc, #100]	; (8003598 <prvAddNewTaskToReadyList+0xc8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4313      	orrs	r3, r2
 8003536:	4a18      	ldr	r2, [pc, #96]	; (8003598 <prvAddNewTaskToReadyList+0xc8>)
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353e:	4613      	mov	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4413      	add	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4a15      	ldr	r2, [pc, #84]	; (800359c <prvAddNewTaskToReadyList+0xcc>)
 8003548:	441a      	add	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3304      	adds	r3, #4
 800354e:	4619      	mov	r1, r3
 8003550:	4610      	mov	r0, r2
 8003552:	f7ff fe02 	bl	800315a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003556:	f000 fcf1 	bl	8003f3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800355a:	4b0d      	ldr	r3, [pc, #52]	; (8003590 <prvAddNewTaskToReadyList+0xc0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00e      	beq.n	8003580 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003562:	4b0a      	ldr	r3, [pc, #40]	; (800358c <prvAddNewTaskToReadyList+0xbc>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	429a      	cmp	r2, r3
 800356e:	d207      	bcs.n	8003580 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003570:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <prvAddNewTaskToReadyList+0xd0>)
 8003572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	f3bf 8f4f 	dsb	sy
 800357c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003580:	bf00      	nop
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	2000073c 	.word	0x2000073c
 800358c:	2000063c 	.word	0x2000063c
 8003590:	20000748 	.word	0x20000748
 8003594:	20000758 	.word	0x20000758
 8003598:	20000744 	.word	0x20000744
 800359c:	20000640 	.word	0x20000640
 80035a0:	e000ed04 	.word	0xe000ed04

080035a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d017      	beq.n	80035e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80035b6:	4b13      	ldr	r3, [pc, #76]	; (8003604 <vTaskDelay+0x60>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <vTaskDelay+0x30>
	__asm volatile
 80035be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	60bb      	str	r3, [r7, #8]
}
 80035d0:	bf00      	nop
 80035d2:	e7fe      	b.n	80035d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80035d4:	f000 f884 	bl	80036e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80035d8:	2100      	movs	r1, #0
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fb28 	bl	8003c30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80035e0:	f000 f88c 	bl	80036fc <xTaskResumeAll>
 80035e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d107      	bne.n	80035fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80035ec:	4b06      	ldr	r3, [pc, #24]	; (8003608 <vTaskDelay+0x64>)
 80035ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035fc:	bf00      	nop
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	20000764 	.word	0x20000764
 8003608:	e000ed04 	.word	0xe000ed04

0800360c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08a      	sub	sp, #40	; 0x28
 8003610:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003612:	2300      	movs	r3, #0
 8003614:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003616:	2300      	movs	r3, #0
 8003618:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800361a:	463a      	mov	r2, r7
 800361c:	1d39      	adds	r1, r7, #4
 800361e:	f107 0308 	add.w	r3, r7, #8
 8003622:	4618      	mov	r0, r3
 8003624:	f7fc fd94 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003628:	6839      	ldr	r1, [r7, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	9202      	str	r2, [sp, #8]
 8003630:	9301      	str	r3, [sp, #4]
 8003632:	2300      	movs	r3, #0
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	2300      	movs	r3, #0
 8003638:	460a      	mov	r2, r1
 800363a:	4921      	ldr	r1, [pc, #132]	; (80036c0 <vTaskStartScheduler+0xb4>)
 800363c:	4821      	ldr	r0, [pc, #132]	; (80036c4 <vTaskStartScheduler+0xb8>)
 800363e:	f7ff fe10 	bl	8003262 <xTaskCreateStatic>
 8003642:	4603      	mov	r3, r0
 8003644:	4a20      	ldr	r2, [pc, #128]	; (80036c8 <vTaskStartScheduler+0xbc>)
 8003646:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003648:	4b1f      	ldr	r3, [pc, #124]	; (80036c8 <vTaskStartScheduler+0xbc>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003650:	2301      	movs	r3, #1
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	e001      	b.n	800365a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d11b      	bne.n	8003698 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003664:	f383 8811 	msr	BASEPRI, r3
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	613b      	str	r3, [r7, #16]
}
 8003672:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003674:	4b15      	ldr	r3, [pc, #84]	; (80036cc <vTaskStartScheduler+0xc0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	334c      	adds	r3, #76	; 0x4c
 800367a:	4a15      	ldr	r2, [pc, #84]	; (80036d0 <vTaskStartScheduler+0xc4>)
 800367c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800367e:	4b15      	ldr	r3, [pc, #84]	; (80036d4 <vTaskStartScheduler+0xc8>)
 8003680:	f04f 32ff 	mov.w	r2, #4294967295
 8003684:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003686:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <vTaskStartScheduler+0xcc>)
 8003688:	2201      	movs	r2, #1
 800368a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800368c:	4b13      	ldr	r3, [pc, #76]	; (80036dc <vTaskStartScheduler+0xd0>)
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003692:	f000 fbb1 	bl	8003df8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003696:	e00e      	b.n	80036b6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369e:	d10a      	bne.n	80036b6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80036a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	60fb      	str	r3, [r7, #12]
}
 80036b2:	bf00      	nop
 80036b4:	e7fe      	b.n	80036b4 <vTaskStartScheduler+0xa8>
}
 80036b6:	bf00      	nop
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	080055f0 	.word	0x080055f0
 80036c4:	08003a75 	.word	0x08003a75
 80036c8:	20000760 	.word	0x20000760
 80036cc:	2000063c 	.word	0x2000063c
 80036d0:	20000018 	.word	0x20000018
 80036d4:	2000075c 	.word	0x2000075c
 80036d8:	20000748 	.word	0x20000748
 80036dc:	20000740 	.word	0x20000740

080036e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80036e4:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <vTaskSuspendAll+0x18>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3301      	adds	r3, #1
 80036ea:	4a03      	ldr	r2, [pc, #12]	; (80036f8 <vTaskSuspendAll+0x18>)
 80036ec:	6013      	str	r3, [r2, #0]
}
 80036ee:	bf00      	nop
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	20000764 	.word	0x20000764

080036fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003706:	2300      	movs	r3, #0
 8003708:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800370a:	4b41      	ldr	r3, [pc, #260]	; (8003810 <xTaskResumeAll+0x114>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10a      	bne.n	8003728 <xTaskResumeAll+0x2c>
	__asm volatile
 8003712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003716:	f383 8811 	msr	BASEPRI, r3
 800371a:	f3bf 8f6f 	isb	sy
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	603b      	str	r3, [r7, #0]
}
 8003724:	bf00      	nop
 8003726:	e7fe      	b.n	8003726 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003728:	f000 fbd8 	bl	8003edc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800372c:	4b38      	ldr	r3, [pc, #224]	; (8003810 <xTaskResumeAll+0x114>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3b01      	subs	r3, #1
 8003732:	4a37      	ldr	r2, [pc, #220]	; (8003810 <xTaskResumeAll+0x114>)
 8003734:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003736:	4b36      	ldr	r3, [pc, #216]	; (8003810 <xTaskResumeAll+0x114>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d161      	bne.n	8003802 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800373e:	4b35      	ldr	r3, [pc, #212]	; (8003814 <xTaskResumeAll+0x118>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d05d      	beq.n	8003802 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003746:	e02e      	b.n	80037a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003748:	4b33      	ldr	r3, [pc, #204]	; (8003818 <xTaskResumeAll+0x11c>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	3318      	adds	r3, #24
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff fd5b 	bl	8003210 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	3304      	adds	r3, #4
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff fd56 	bl	8003210 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	2201      	movs	r2, #1
 800376a:	409a      	lsls	r2, r3
 800376c:	4b2b      	ldr	r3, [pc, #172]	; (800381c <xTaskResumeAll+0x120>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4313      	orrs	r3, r2
 8003772:	4a2a      	ldr	r2, [pc, #168]	; (800381c <xTaskResumeAll+0x120>)
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4a27      	ldr	r2, [pc, #156]	; (8003820 <xTaskResumeAll+0x124>)
 8003784:	441a      	add	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	3304      	adds	r3, #4
 800378a:	4619      	mov	r1, r3
 800378c:	4610      	mov	r0, r2
 800378e:	f7ff fce4 	bl	800315a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003796:	4b23      	ldr	r3, [pc, #140]	; (8003824 <xTaskResumeAll+0x128>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	429a      	cmp	r2, r3
 800379e:	d302      	bcc.n	80037a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80037a0:	4b21      	ldr	r3, [pc, #132]	; (8003828 <xTaskResumeAll+0x12c>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037a6:	4b1c      	ldr	r3, [pc, #112]	; (8003818 <xTaskResumeAll+0x11c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1cc      	bne.n	8003748 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80037b4:	f000 fa18 	bl	8003be8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80037b8:	4b1c      	ldr	r3, [pc, #112]	; (800382c <xTaskResumeAll+0x130>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d010      	beq.n	80037e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80037c4:	f000 f836 	bl	8003834 <xTaskIncrementTick>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80037ce:	4b16      	ldr	r3, [pc, #88]	; (8003828 <xTaskResumeAll+0x12c>)
 80037d0:	2201      	movs	r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1f1      	bne.n	80037c4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80037e0:	4b12      	ldr	r3, [pc, #72]	; (800382c <xTaskResumeAll+0x130>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80037e6:	4b10      	ldr	r3, [pc, #64]	; (8003828 <xTaskResumeAll+0x12c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d009      	beq.n	8003802 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80037ee:	2301      	movs	r3, #1
 80037f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80037f2:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <xTaskResumeAll+0x134>)
 80037f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003802:	f000 fb9b 	bl	8003f3c <vPortExitCritical>

	return xAlreadyYielded;
 8003806:	68bb      	ldr	r3, [r7, #8]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	20000764 	.word	0x20000764
 8003814:	2000073c 	.word	0x2000073c
 8003818:	200006fc 	.word	0x200006fc
 800381c:	20000744 	.word	0x20000744
 8003820:	20000640 	.word	0x20000640
 8003824:	2000063c 	.word	0x2000063c
 8003828:	20000750 	.word	0x20000750
 800382c:	2000074c 	.word	0x2000074c
 8003830:	e000ed04 	.word	0xe000ed04

08003834 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800383e:	4b51      	ldr	r3, [pc, #324]	; (8003984 <xTaskIncrementTick+0x150>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	f040 808d 	bne.w	8003962 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003848:	4b4f      	ldr	r3, [pc, #316]	; (8003988 <xTaskIncrementTick+0x154>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3301      	adds	r3, #1
 800384e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003850:	4a4d      	ldr	r2, [pc, #308]	; (8003988 <xTaskIncrementTick+0x154>)
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d120      	bne.n	800389e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800385c:	4b4b      	ldr	r3, [pc, #300]	; (800398c <xTaskIncrementTick+0x158>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <xTaskIncrementTick+0x48>
	__asm volatile
 8003866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386a:	f383 8811 	msr	BASEPRI, r3
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	603b      	str	r3, [r7, #0]
}
 8003878:	bf00      	nop
 800387a:	e7fe      	b.n	800387a <xTaskIncrementTick+0x46>
 800387c:	4b43      	ldr	r3, [pc, #268]	; (800398c <xTaskIncrementTick+0x158>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	4b43      	ldr	r3, [pc, #268]	; (8003990 <xTaskIncrementTick+0x15c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a41      	ldr	r2, [pc, #260]	; (800398c <xTaskIncrementTick+0x158>)
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	4a41      	ldr	r2, [pc, #260]	; (8003990 <xTaskIncrementTick+0x15c>)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	4b40      	ldr	r3, [pc, #256]	; (8003994 <xTaskIncrementTick+0x160>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3301      	adds	r3, #1
 8003896:	4a3f      	ldr	r2, [pc, #252]	; (8003994 <xTaskIncrementTick+0x160>)
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	f000 f9a5 	bl	8003be8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800389e:	4b3e      	ldr	r3, [pc, #248]	; (8003998 <xTaskIncrementTick+0x164>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d34d      	bcc.n	8003944 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038a8:	4b38      	ldr	r3, [pc, #224]	; (800398c <xTaskIncrementTick+0x158>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <xTaskIncrementTick+0x82>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <xTaskIncrementTick+0x84>
 80038b6:	2300      	movs	r3, #0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d004      	beq.n	80038c6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038bc:	4b36      	ldr	r3, [pc, #216]	; (8003998 <xTaskIncrementTick+0x164>)
 80038be:	f04f 32ff 	mov.w	r2, #4294967295
 80038c2:	601a      	str	r2, [r3, #0]
					break;
 80038c4:	e03e      	b.n	8003944 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038c6:	4b31      	ldr	r3, [pc, #196]	; (800398c <xTaskIncrementTick+0x158>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d203      	bcs.n	80038e6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80038de:	4a2e      	ldr	r2, [pc, #184]	; (8003998 <xTaskIncrementTick+0x164>)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6013      	str	r3, [r2, #0]
						break;
 80038e4:	e02e      	b.n	8003944 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	3304      	adds	r3, #4
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff fc90 	bl	8003210 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d004      	beq.n	8003902 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	3318      	adds	r3, #24
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff fc87 	bl	8003210 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003906:	2201      	movs	r2, #1
 8003908:	409a      	lsls	r2, r3
 800390a:	4b24      	ldr	r3, [pc, #144]	; (800399c <xTaskIncrementTick+0x168>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4313      	orrs	r3, r2
 8003910:	4a22      	ldr	r2, [pc, #136]	; (800399c <xTaskIncrementTick+0x168>)
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4a1f      	ldr	r2, [pc, #124]	; (80039a0 <xTaskIncrementTick+0x16c>)
 8003922:	441a      	add	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	3304      	adds	r3, #4
 8003928:	4619      	mov	r1, r3
 800392a:	4610      	mov	r0, r2
 800392c:	f7ff fc15 	bl	800315a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003934:	4b1b      	ldr	r3, [pc, #108]	; (80039a4 <xTaskIncrementTick+0x170>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393a:	429a      	cmp	r2, r3
 800393c:	d3b4      	bcc.n	80038a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800393e:	2301      	movs	r3, #1
 8003940:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003942:	e7b1      	b.n	80038a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003944:	4b17      	ldr	r3, [pc, #92]	; (80039a4 <xTaskIncrementTick+0x170>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394a:	4915      	ldr	r1, [pc, #84]	; (80039a0 <xTaskIncrementTick+0x16c>)
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d907      	bls.n	800396c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800395c:	2301      	movs	r3, #1
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	e004      	b.n	800396c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003962:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <xTaskIncrementTick+0x174>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3301      	adds	r3, #1
 8003968:	4a0f      	ldr	r2, [pc, #60]	; (80039a8 <xTaskIncrementTick+0x174>)
 800396a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800396c:	4b0f      	ldr	r3, [pc, #60]	; (80039ac <xTaskIncrementTick+0x178>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003974:	2301      	movs	r3, #1
 8003976:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003978:	697b      	ldr	r3, [r7, #20]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	20000764 	.word	0x20000764
 8003988:	20000740 	.word	0x20000740
 800398c:	200006f4 	.word	0x200006f4
 8003990:	200006f8 	.word	0x200006f8
 8003994:	20000754 	.word	0x20000754
 8003998:	2000075c 	.word	0x2000075c
 800399c:	20000744 	.word	0x20000744
 80039a0:	20000640 	.word	0x20000640
 80039a4:	2000063c 	.word	0x2000063c
 80039a8:	2000074c 	.word	0x2000074c
 80039ac:	20000750 	.word	0x20000750

080039b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039b6:	4b29      	ldr	r3, [pc, #164]	; (8003a5c <vTaskSwitchContext+0xac>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80039be:	4b28      	ldr	r3, [pc, #160]	; (8003a60 <vTaskSwitchContext+0xb0>)
 80039c0:	2201      	movs	r2, #1
 80039c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80039c4:	e044      	b.n	8003a50 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80039c6:	4b26      	ldr	r3, [pc, #152]	; (8003a60 <vTaskSwitchContext+0xb0>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80039cc:	4b25      	ldr	r3, [pc, #148]	; (8003a64 <vTaskSwitchContext+0xb4>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	fab3 f383 	clz	r3, r3
 80039d8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80039da:	7afb      	ldrb	r3, [r7, #11]
 80039dc:	f1c3 031f 	rsb	r3, r3, #31
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	4921      	ldr	r1, [pc, #132]	; (8003a68 <vTaskSwitchContext+0xb8>)
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10a      	bne.n	8003a0c <vTaskSwitchContext+0x5c>
	__asm volatile
 80039f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fa:	f383 8811 	msr	BASEPRI, r3
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	607b      	str	r3, [r7, #4]
}
 8003a08:	bf00      	nop
 8003a0a:	e7fe      	b.n	8003a0a <vTaskSwitchContext+0x5a>
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4a14      	ldr	r2, [pc, #80]	; (8003a68 <vTaskSwitchContext+0xb8>)
 8003a18:	4413      	add	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	605a      	str	r2, [r3, #4]
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	3308      	adds	r3, #8
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d104      	bne.n	8003a3c <vTaskSwitchContext+0x8c>
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	605a      	str	r2, [r3, #4]
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	4a0a      	ldr	r2, [pc, #40]	; (8003a6c <vTaskSwitchContext+0xbc>)
 8003a44:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a46:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <vTaskSwitchContext+0xbc>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	334c      	adds	r3, #76	; 0x4c
 8003a4c:	4a08      	ldr	r2, [pc, #32]	; (8003a70 <vTaskSwitchContext+0xc0>)
 8003a4e:	6013      	str	r3, [r2, #0]
}
 8003a50:	bf00      	nop
 8003a52:	371c      	adds	r7, #28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	20000764 	.word	0x20000764
 8003a60:	20000750 	.word	0x20000750
 8003a64:	20000744 	.word	0x20000744
 8003a68:	20000640 	.word	0x20000640
 8003a6c:	2000063c 	.word	0x2000063c
 8003a70:	20000018 	.word	0x20000018

08003a74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a7c:	f000 f852 	bl	8003b24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a80:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <prvIdleTask+0x28>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d9f9      	bls.n	8003a7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <prvIdleTask+0x2c>)
 8003a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a98:	e7f0      	b.n	8003a7c <prvIdleTask+0x8>
 8003a9a:	bf00      	nop
 8003a9c:	20000640 	.word	0x20000640
 8003aa0:	e000ed04 	.word	0xe000ed04

08003aa4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003aaa:	2300      	movs	r3, #0
 8003aac:	607b      	str	r3, [r7, #4]
 8003aae:	e00c      	b.n	8003aca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4a12      	ldr	r2, [pc, #72]	; (8003b04 <prvInitialiseTaskLists+0x60>)
 8003abc:	4413      	add	r3, r2
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff fb20 	bl	8003104 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	607b      	str	r3, [r7, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b06      	cmp	r3, #6
 8003ace:	d9ef      	bls.n	8003ab0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ad0:	480d      	ldr	r0, [pc, #52]	; (8003b08 <prvInitialiseTaskLists+0x64>)
 8003ad2:	f7ff fb17 	bl	8003104 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ad6:	480d      	ldr	r0, [pc, #52]	; (8003b0c <prvInitialiseTaskLists+0x68>)
 8003ad8:	f7ff fb14 	bl	8003104 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003adc:	480c      	ldr	r0, [pc, #48]	; (8003b10 <prvInitialiseTaskLists+0x6c>)
 8003ade:	f7ff fb11 	bl	8003104 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003ae2:	480c      	ldr	r0, [pc, #48]	; (8003b14 <prvInitialiseTaskLists+0x70>)
 8003ae4:	f7ff fb0e 	bl	8003104 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ae8:	480b      	ldr	r0, [pc, #44]	; (8003b18 <prvInitialiseTaskLists+0x74>)
 8003aea:	f7ff fb0b 	bl	8003104 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003aee:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <prvInitialiseTaskLists+0x78>)
 8003af0:	4a05      	ldr	r2, [pc, #20]	; (8003b08 <prvInitialiseTaskLists+0x64>)
 8003af2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003af4:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <prvInitialiseTaskLists+0x7c>)
 8003af6:	4a05      	ldr	r2, [pc, #20]	; (8003b0c <prvInitialiseTaskLists+0x68>)
 8003af8:	601a      	str	r2, [r3, #0]
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20000640 	.word	0x20000640
 8003b08:	200006cc 	.word	0x200006cc
 8003b0c:	200006e0 	.word	0x200006e0
 8003b10:	200006fc 	.word	0x200006fc
 8003b14:	20000710 	.word	0x20000710
 8003b18:	20000728 	.word	0x20000728
 8003b1c:	200006f4 	.word	0x200006f4
 8003b20:	200006f8 	.word	0x200006f8

08003b24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b2a:	e019      	b.n	8003b60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b2c:	f000 f9d6 	bl	8003edc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003b30:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <prvCheckTasksWaitingTermination+0x50>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff fb67 	bl	8003210 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003b42:	4b0d      	ldr	r3, [pc, #52]	; (8003b78 <prvCheckTasksWaitingTermination+0x54>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	4a0b      	ldr	r2, [pc, #44]	; (8003b78 <prvCheckTasksWaitingTermination+0x54>)
 8003b4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <prvCheckTasksWaitingTermination+0x58>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3b01      	subs	r3, #1
 8003b52:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <prvCheckTasksWaitingTermination+0x58>)
 8003b54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b56:	f000 f9f1 	bl	8003f3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f810 	bl	8003b80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b60:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <prvCheckTasksWaitingTermination+0x58>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1e1      	bne.n	8003b2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b68:	bf00      	nop
 8003b6a:	bf00      	nop
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000710 	.word	0x20000710
 8003b78:	2000073c 	.word	0x2000073c
 8003b7c:	20000724 	.word	0x20000724

08003b80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	334c      	adds	r3, #76	; 0x4c
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fe9b 	bl	80048c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d108      	bne.n	8003bae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 fb21 	bl	80041e8 <vPortFree>
				vPortFree( pxTCB );
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fb1e 	bl	80041e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003bac:	e018      	b.n	8003be0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d103      	bne.n	8003bc0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 fb15 	bl	80041e8 <vPortFree>
	}
 8003bbe:	e00f      	b.n	8003be0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d00a      	beq.n	8003be0 <prvDeleteTCB+0x60>
	__asm volatile
 8003bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bce:	f383 8811 	msr	BASEPRI, r3
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	60fb      	str	r3, [r7, #12]
}
 8003bdc:	bf00      	nop
 8003bde:	e7fe      	b.n	8003bde <prvDeleteTCB+0x5e>
	}
 8003be0:	bf00      	nop
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bee:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <prvResetNextTaskUnblockTime+0x40>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <prvResetNextTaskUnblockTime+0x14>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e000      	b.n	8003bfe <prvResetNextTaskUnblockTime+0x16>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d004      	beq.n	8003c0c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c02:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <prvResetNextTaskUnblockTime+0x44>)
 8003c04:	f04f 32ff 	mov.w	r2, #4294967295
 8003c08:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c0a:	e008      	b.n	8003c1e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c0c:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <prvResetNextTaskUnblockTime+0x40>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	4a04      	ldr	r2, [pc, #16]	; (8003c2c <prvResetNextTaskUnblockTime+0x44>)
 8003c1c:	6013      	str	r3, [r2, #0]
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr
 8003c28:	200006f4 	.word	0x200006f4
 8003c2c:	2000075c 	.word	0x2000075c

08003c30 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c3a:	4b29      	ldr	r3, [pc, #164]	; (8003ce0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c40:	4b28      	ldr	r3, [pc, #160]	; (8003ce4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3304      	adds	r3, #4
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff fae2 	bl	8003210 <uxListRemove>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10b      	bne.n	8003c6a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003c52:	4b24      	ldr	r3, [pc, #144]	; (8003ce4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	2201      	movs	r2, #1
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	43da      	mvns	r2, r3
 8003c60:	4b21      	ldr	r3, [pc, #132]	; (8003ce8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4013      	ands	r3, r2
 8003c66:	4a20      	ldr	r2, [pc, #128]	; (8003ce8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003c68:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c70:	d10a      	bne.n	8003c88 <prvAddCurrentTaskToDelayedList+0x58>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d007      	beq.n	8003c88 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c78:	4b1a      	ldr	r3, [pc, #104]	; (8003ce4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	4619      	mov	r1, r3
 8003c80:	481a      	ldr	r0, [pc, #104]	; (8003cec <prvAddCurrentTaskToDelayedList+0xbc>)
 8003c82:	f7ff fa6a 	bl	800315a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003c86:	e026      	b.n	8003cd6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c90:	4b14      	ldr	r3, [pc, #80]	; (8003ce4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d209      	bcs.n	8003cb4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ca0:	4b13      	ldr	r3, [pc, #76]	; (8003cf0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4b0f      	ldr	r3, [pc, #60]	; (8003ce4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	4619      	mov	r1, r3
 8003cac:	4610      	mov	r0, r2
 8003cae:	f7ff fa77 	bl	80031a0 <vListInsert>
}
 8003cb2:	e010      	b.n	8003cd6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cb4:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	f7ff fa6d 	bl	80031a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003cc6:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d202      	bcs.n	8003cd6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003cd0:	4a09      	ldr	r2, [pc, #36]	; (8003cf8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	6013      	str	r3, [r2, #0]
}
 8003cd6:	bf00      	nop
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	20000740 	.word	0x20000740
 8003ce4:	2000063c 	.word	0x2000063c
 8003ce8:	20000744 	.word	0x20000744
 8003cec:	20000728 	.word	0x20000728
 8003cf0:	200006f8 	.word	0x200006f8
 8003cf4:	200006f4 	.word	0x200006f4
 8003cf8:	2000075c 	.word	0x2000075c

08003cfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	3b04      	subs	r3, #4
 8003d0c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	3b04      	subs	r3, #4
 8003d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f023 0201 	bic.w	r2, r3, #1
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	3b04      	subs	r3, #4
 8003d2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d2c:	4a08      	ldr	r2, [pc, #32]	; (8003d50 <pxPortInitialiseStack+0x54>)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	3b14      	subs	r3, #20
 8003d36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	3b20      	subs	r3, #32
 8003d42:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003d44:	68fb      	ldr	r3, [r7, #12]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr
 8003d50:	08003d55 	.word	0x08003d55

08003d54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003d5e:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <prvTaskExitError+0x54>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d66:	d00a      	beq.n	8003d7e <prvTaskExitError+0x2a>
	__asm volatile
 8003d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6c:	f383 8811 	msr	BASEPRI, r3
 8003d70:	f3bf 8f6f 	isb	sy
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	60fb      	str	r3, [r7, #12]
}
 8003d7a:	bf00      	nop
 8003d7c:	e7fe      	b.n	8003d7c <prvTaskExitError+0x28>
	__asm volatile
 8003d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	60bb      	str	r3, [r7, #8]
}
 8003d90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003d92:	bf00      	nop
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0fc      	beq.n	8003d94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003d9a:	bf00      	nop
 8003d9c:	bf00      	nop
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	20000014 	.word	0x20000014
 8003dac:	00000000 	.word	0x00000000

08003db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003db0:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <pxCurrentTCBConst2>)
 8003db2:	6819      	ldr	r1, [r3, #0]
 8003db4:	6808      	ldr	r0, [r1, #0]
 8003db6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003dba:	f380 8809 	msr	PSP, r0
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f04f 0000 	mov.w	r0, #0
 8003dc6:	f380 8811 	msr	BASEPRI, r0
 8003dca:	f04e 0e0d 	orr.w	lr, lr, #13
 8003dce:	4770      	bx	lr

08003dd0 <pxCurrentTCBConst2>:
 8003dd0:	2000063c 	.word	0x2000063c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003dd4:	bf00      	nop
 8003dd6:	bf00      	nop

08003dd8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003dd8:	4806      	ldr	r0, [pc, #24]	; (8003df4 <prvPortStartFirstTask+0x1c>)
 8003dda:	6800      	ldr	r0, [r0, #0]
 8003ddc:	6800      	ldr	r0, [r0, #0]
 8003dde:	f380 8808 	msr	MSP, r0
 8003de2:	b662      	cpsie	i
 8003de4:	b661      	cpsie	f
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	df00      	svc	0
 8003df0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003df2:	bf00      	nop
 8003df4:	e000ed08 	.word	0xe000ed08

08003df8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003dfe:	4b32      	ldr	r3, [pc, #200]	; (8003ec8 <xPortStartScheduler+0xd0>)
 8003e00:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	22ff      	movs	r2, #255	; 0xff
 8003e0e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e18:	78fb      	ldrb	r3, [r7, #3]
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	4b2a      	ldr	r3, [pc, #168]	; (8003ecc <xPortStartScheduler+0xd4>)
 8003e24:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e26:	4b2a      	ldr	r3, [pc, #168]	; (8003ed0 <xPortStartScheduler+0xd8>)
 8003e28:	2207      	movs	r2, #7
 8003e2a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e2c:	e009      	b.n	8003e42 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003e2e:	4b28      	ldr	r3, [pc, #160]	; (8003ed0 <xPortStartScheduler+0xd8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	4a26      	ldr	r2, [pc, #152]	; (8003ed0 <xPortStartScheduler+0xd8>)
 8003e36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e42:	78fb      	ldrb	r3, [r7, #3]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4a:	2b80      	cmp	r3, #128	; 0x80
 8003e4c:	d0ef      	beq.n	8003e2e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e4e:	4b20      	ldr	r3, [pc, #128]	; (8003ed0 <xPortStartScheduler+0xd8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f1c3 0307 	rsb	r3, r3, #7
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d00a      	beq.n	8003e70 <xPortStartScheduler+0x78>
	__asm volatile
 8003e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	60bb      	str	r3, [r7, #8]
}
 8003e6c:	bf00      	nop
 8003e6e:	e7fe      	b.n	8003e6e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e70:	4b17      	ldr	r3, [pc, #92]	; (8003ed0 <xPortStartScheduler+0xd8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	021b      	lsls	r3, r3, #8
 8003e76:	4a16      	ldr	r2, [pc, #88]	; (8003ed0 <xPortStartScheduler+0xd8>)
 8003e78:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e7a:	4b15      	ldr	r3, [pc, #84]	; (8003ed0 <xPortStartScheduler+0xd8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e82:	4a13      	ldr	r2, [pc, #76]	; (8003ed0 <xPortStartScheduler+0xd8>)
 8003e84:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003e8e:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <xPortStartScheduler+0xdc>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a10      	ldr	r2, [pc, #64]	; (8003ed4 <xPortStartScheduler+0xdc>)
 8003e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003e9a:	4b0e      	ldr	r3, [pc, #56]	; (8003ed4 <xPortStartScheduler+0xdc>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a0d      	ldr	r2, [pc, #52]	; (8003ed4 <xPortStartScheduler+0xdc>)
 8003ea0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ea4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ea6:	f000 f8b9 	bl	800401c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003eaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <xPortStartScheduler+0xe0>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003eb0:	f7ff ff92 	bl	8003dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003eb4:	f7ff fd7c 	bl	80039b0 <vTaskSwitchContext>
	prvTaskExitError();
 8003eb8:	f7ff ff4c 	bl	8003d54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	e000e400 	.word	0xe000e400
 8003ecc:	20000768 	.word	0x20000768
 8003ed0:	2000076c 	.word	0x2000076c
 8003ed4:	e000ed20 	.word	0xe000ed20
 8003ed8:	20000014 	.word	0x20000014

08003edc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
	__asm volatile
 8003ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee6:	f383 8811 	msr	BASEPRI, r3
 8003eea:	f3bf 8f6f 	isb	sy
 8003eee:	f3bf 8f4f 	dsb	sy
 8003ef2:	607b      	str	r3, [r7, #4]
}
 8003ef4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003ef6:	4b0f      	ldr	r3, [pc, #60]	; (8003f34 <vPortEnterCritical+0x58>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3301      	adds	r3, #1
 8003efc:	4a0d      	ldr	r2, [pc, #52]	; (8003f34 <vPortEnterCritical+0x58>)
 8003efe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003f00:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <vPortEnterCritical+0x58>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d10f      	bne.n	8003f28 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f08:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <vPortEnterCritical+0x5c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <vPortEnterCritical+0x4c>
	__asm volatile
 8003f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	603b      	str	r3, [r7, #0]
}
 8003f24:	bf00      	nop
 8003f26:	e7fe      	b.n	8003f26 <vPortEnterCritical+0x4a>
	}
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bc80      	pop	{r7}
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	20000014 	.word	0x20000014
 8003f38:	e000ed04 	.word	0xe000ed04

08003f3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003f42:	4b11      	ldr	r3, [pc, #68]	; (8003f88 <vPortExitCritical+0x4c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10a      	bne.n	8003f60 <vPortExitCritical+0x24>
	__asm volatile
 8003f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4e:	f383 8811 	msr	BASEPRI, r3
 8003f52:	f3bf 8f6f 	isb	sy
 8003f56:	f3bf 8f4f 	dsb	sy
 8003f5a:	607b      	str	r3, [r7, #4]
}
 8003f5c:	bf00      	nop
 8003f5e:	e7fe      	b.n	8003f5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003f60:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <vPortExitCritical+0x4c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	3b01      	subs	r3, #1
 8003f66:	4a08      	ldr	r2, [pc, #32]	; (8003f88 <vPortExitCritical+0x4c>)
 8003f68:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003f6a:	4b07      	ldr	r3, [pc, #28]	; (8003f88 <vPortExitCritical+0x4c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d105      	bne.n	8003f7e <vPortExitCritical+0x42>
 8003f72:	2300      	movs	r3, #0
 8003f74:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003f7c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr
 8003f88:	20000014 	.word	0x20000014
 8003f8c:	00000000 	.word	0x00000000

08003f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003f90:	f3ef 8009 	mrs	r0, PSP
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	4b0d      	ldr	r3, [pc, #52]	; (8003fd0 <pxCurrentTCBConst>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003fa0:	6010      	str	r0, [r2, #0]
 8003fa2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003fa6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003faa:	f380 8811 	msr	BASEPRI, r0
 8003fae:	f7ff fcff 	bl	80039b0 <vTaskSwitchContext>
 8003fb2:	f04f 0000 	mov.w	r0, #0
 8003fb6:	f380 8811 	msr	BASEPRI, r0
 8003fba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003fbe:	6819      	ldr	r1, [r3, #0]
 8003fc0:	6808      	ldr	r0, [r1, #0]
 8003fc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003fc6:	f380 8809 	msr	PSP, r0
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	4770      	bx	lr

08003fd0 <pxCurrentTCBConst>:
 8003fd0:	2000063c 	.word	0x2000063c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003fd4:	bf00      	nop
 8003fd6:	bf00      	nop

08003fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	607b      	str	r3, [r7, #4]
}
 8003ff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003ff2:	f7ff fc1f 	bl	8003834 <xTaskIncrementTick>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003ffc:	4b06      	ldr	r3, [pc, #24]	; (8004018 <SysTick_Handler+0x40>)
 8003ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	2300      	movs	r3, #0
 8004006:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	f383 8811 	msr	BASEPRI, r3
}
 800400e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004010:	bf00      	nop
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	e000ed04 	.word	0xe000ed04

0800401c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004020:	4b0a      	ldr	r3, [pc, #40]	; (800404c <vPortSetupTimerInterrupt+0x30>)
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004026:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <vPortSetupTimerInterrupt+0x34>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800402c:	4b09      	ldr	r3, [pc, #36]	; (8004054 <vPortSetupTimerInterrupt+0x38>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a09      	ldr	r2, [pc, #36]	; (8004058 <vPortSetupTimerInterrupt+0x3c>)
 8004032:	fba2 2303 	umull	r2, r3, r2, r3
 8004036:	099b      	lsrs	r3, r3, #6
 8004038:	4a08      	ldr	r2, [pc, #32]	; (800405c <vPortSetupTimerInterrupt+0x40>)
 800403a:	3b01      	subs	r3, #1
 800403c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800403e:	4b03      	ldr	r3, [pc, #12]	; (800404c <vPortSetupTimerInterrupt+0x30>)
 8004040:	2207      	movs	r2, #7
 8004042:	601a      	str	r2, [r3, #0]
}
 8004044:	bf00      	nop
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr
 800404c:	e000e010 	.word	0xe000e010
 8004050:	e000e018 	.word	0xe000e018
 8004054:	20000008 	.word	0x20000008
 8004058:	10624dd3 	.word	0x10624dd3
 800405c:	e000e014 	.word	0xe000e014

08004060 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08a      	sub	sp, #40	; 0x28
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004068:	2300      	movs	r3, #0
 800406a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800406c:	f7ff fb38 	bl	80036e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004070:	4b58      	ldr	r3, [pc, #352]	; (80041d4 <pvPortMalloc+0x174>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004078:	f000 f910 	bl	800429c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800407c:	4b56      	ldr	r3, [pc, #344]	; (80041d8 <pvPortMalloc+0x178>)
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4013      	ands	r3, r2
 8004084:	2b00      	cmp	r3, #0
 8004086:	f040 808e 	bne.w	80041a6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d01d      	beq.n	80040cc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004090:	2208      	movs	r2, #8
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4413      	add	r3, r2
 8004096:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d014      	beq.n	80040cc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f023 0307 	bic.w	r3, r3, #7
 80040a8:	3308      	adds	r3, #8
 80040aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <pvPortMalloc+0x6c>
	__asm volatile
 80040b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ba:	f383 8811 	msr	BASEPRI, r3
 80040be:	f3bf 8f6f 	isb	sy
 80040c2:	f3bf 8f4f 	dsb	sy
 80040c6:	617b      	str	r3, [r7, #20]
}
 80040c8:	bf00      	nop
 80040ca:	e7fe      	b.n	80040ca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d069      	beq.n	80041a6 <pvPortMalloc+0x146>
 80040d2:	4b42      	ldr	r3, [pc, #264]	; (80041dc <pvPortMalloc+0x17c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d864      	bhi.n	80041a6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80040dc:	4b40      	ldr	r3, [pc, #256]	; (80041e0 <pvPortMalloc+0x180>)
 80040de:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80040e0:	4b3f      	ldr	r3, [pc, #252]	; (80041e0 <pvPortMalloc+0x180>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040e6:	e004      	b.n	80040f2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d903      	bls.n	8004104 <pvPortMalloc+0xa4>
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1f1      	bne.n	80040e8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004104:	4b33      	ldr	r3, [pc, #204]	; (80041d4 <pvPortMalloc+0x174>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800410a:	429a      	cmp	r2, r3
 800410c:	d04b      	beq.n	80041a6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2208      	movs	r2, #8
 8004114:	4413      	add	r3, r2
 8004116:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	1ad2      	subs	r2, r2, r3
 8004128:	2308      	movs	r3, #8
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	429a      	cmp	r2, r3
 800412e:	d91f      	bls.n	8004170 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4413      	add	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <pvPortMalloc+0xf8>
	__asm volatile
 8004142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	613b      	str	r3, [r7, #16]
}
 8004154:	bf00      	nop
 8004156:	e7fe      	b.n	8004156 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	1ad2      	subs	r2, r2, r3
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800416a:	69b8      	ldr	r0, [r7, #24]
 800416c:	f000 f8f8 	bl	8004360 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004170:	4b1a      	ldr	r3, [pc, #104]	; (80041dc <pvPortMalloc+0x17c>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	4a18      	ldr	r2, [pc, #96]	; (80041dc <pvPortMalloc+0x17c>)
 800417c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800417e:	4b17      	ldr	r3, [pc, #92]	; (80041dc <pvPortMalloc+0x17c>)
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	4b18      	ldr	r3, [pc, #96]	; (80041e4 <pvPortMalloc+0x184>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d203      	bcs.n	8004192 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800418a:	4b14      	ldr	r3, [pc, #80]	; (80041dc <pvPortMalloc+0x17c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a15      	ldr	r2, [pc, #84]	; (80041e4 <pvPortMalloc+0x184>)
 8004190:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	4b10      	ldr	r3, [pc, #64]	; (80041d8 <pvPortMalloc+0x178>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	431a      	orrs	r2, r3
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80041a6:	f7ff faa9 	bl	80036fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <pvPortMalloc+0x16a>
	__asm volatile
 80041b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b8:	f383 8811 	msr	BASEPRI, r3
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	60fb      	str	r3, [r7, #12]
}
 80041c6:	bf00      	nop
 80041c8:	e7fe      	b.n	80041c8 <pvPortMalloc+0x168>
	return pvReturn;
 80041ca:	69fb      	ldr	r3, [r7, #28]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3728      	adds	r7, #40	; 0x28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	20001378 	.word	0x20001378
 80041d8:	20001384 	.word	0x20001384
 80041dc:	2000137c 	.word	0x2000137c
 80041e0:	20001370 	.word	0x20001370
 80041e4:	20001380 	.word	0x20001380

080041e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d048      	beq.n	800428c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80041fa:	2308      	movs	r3, #8
 80041fc:	425b      	negs	r3, r3
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	4413      	add	r3, r2
 8004202:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	4b21      	ldr	r3, [pc, #132]	; (8004294 <vPortFree+0xac>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4013      	ands	r3, r2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10a      	bne.n	800422c <vPortFree+0x44>
	__asm volatile
 8004216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421a:	f383 8811 	msr	BASEPRI, r3
 800421e:	f3bf 8f6f 	isb	sy
 8004222:	f3bf 8f4f 	dsb	sy
 8004226:	60fb      	str	r3, [r7, #12]
}
 8004228:	bf00      	nop
 800422a:	e7fe      	b.n	800422a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00a      	beq.n	800424a <vPortFree+0x62>
	__asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	60bb      	str	r3, [r7, #8]
}
 8004246:	bf00      	nop
 8004248:	e7fe      	b.n	8004248 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	4b11      	ldr	r3, [pc, #68]	; (8004294 <vPortFree+0xac>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4013      	ands	r3, r2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d019      	beq.n	800428c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d115      	bne.n	800428c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <vPortFree+0xac>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	43db      	mvns	r3, r3
 800426a:	401a      	ands	r2, r3
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004270:	f7ff fa36 	bl	80036e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	4b07      	ldr	r3, [pc, #28]	; (8004298 <vPortFree+0xb0>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4413      	add	r3, r2
 800427e:	4a06      	ldr	r2, [pc, #24]	; (8004298 <vPortFree+0xb0>)
 8004280:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004282:	6938      	ldr	r0, [r7, #16]
 8004284:	f000 f86c 	bl	8004360 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004288:	f7ff fa38 	bl	80036fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800428c:	bf00      	nop
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	20001384 	.word	0x20001384
 8004298:	2000137c 	.word	0x2000137c

0800429c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80042a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80042a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80042a8:	4b27      	ldr	r3, [pc, #156]	; (8004348 <prvHeapInit+0xac>)
 80042aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00c      	beq.n	80042d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3307      	adds	r3, #7
 80042ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 0307 	bic.w	r3, r3, #7
 80042c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	4a1f      	ldr	r2, [pc, #124]	; (8004348 <prvHeapInit+0xac>)
 80042cc:	4413      	add	r3, r2
 80042ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042d4:	4a1d      	ldr	r2, [pc, #116]	; (800434c <prvHeapInit+0xb0>)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80042da:	4b1c      	ldr	r3, [pc, #112]	; (800434c <prvHeapInit+0xb0>)
 80042dc:	2200      	movs	r2, #0
 80042de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	4413      	add	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80042e8:	2208      	movs	r2, #8
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0307 	bic.w	r3, r3, #7
 80042f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4a15      	ldr	r2, [pc, #84]	; (8004350 <prvHeapInit+0xb4>)
 80042fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80042fe:	4b14      	ldr	r3, [pc, #80]	; (8004350 <prvHeapInit+0xb4>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2200      	movs	r2, #0
 8004304:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004306:	4b12      	ldr	r3, [pc, #72]	; (8004350 <prvHeapInit+0xb4>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	1ad2      	subs	r2, r2, r3
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800431c:	4b0c      	ldr	r3, [pc, #48]	; (8004350 <prvHeapInit+0xb4>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	4a0a      	ldr	r2, [pc, #40]	; (8004354 <prvHeapInit+0xb8>)
 800432a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	4a09      	ldr	r2, [pc, #36]	; (8004358 <prvHeapInit+0xbc>)
 8004332:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004334:	4b09      	ldr	r3, [pc, #36]	; (800435c <prvHeapInit+0xc0>)
 8004336:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800433a:	601a      	str	r2, [r3, #0]
}
 800433c:	bf00      	nop
 800433e:	3714      	adds	r7, #20
 8004340:	46bd      	mov	sp, r7
 8004342:	bc80      	pop	{r7}
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	20000770 	.word	0x20000770
 800434c:	20001370 	.word	0x20001370
 8004350:	20001378 	.word	0x20001378
 8004354:	20001380 	.word	0x20001380
 8004358:	2000137c 	.word	0x2000137c
 800435c:	20001384 	.word	0x20001384

08004360 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004368:	4b27      	ldr	r3, [pc, #156]	; (8004408 <prvInsertBlockIntoFreeList+0xa8>)
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	e002      	b.n	8004374 <prvInsertBlockIntoFreeList+0x14>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	429a      	cmp	r2, r3
 800437c:	d8f7      	bhi.n	800436e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	4413      	add	r3, r2
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	429a      	cmp	r2, r3
 800438e:	d108      	bne.n	80043a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	441a      	add	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	441a      	add	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d118      	bne.n	80043e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	4b14      	ldr	r3, [pc, #80]	; (800440c <prvInsertBlockIntoFreeList+0xac>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d00d      	beq.n	80043de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	441a      	add	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	e008      	b.n	80043f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043de:	4b0b      	ldr	r3, [pc, #44]	; (800440c <prvInsertBlockIntoFreeList+0xac>)
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	e003      	b.n	80043f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d002      	beq.n	80043fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043fe:	bf00      	nop
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr
 8004408:	20001370 	.word	0x20001370
 800440c:	20001378 	.word	0x20001378

08004410 <__errno>:
 8004410:	4b01      	ldr	r3, [pc, #4]	; (8004418 <__errno+0x8>)
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	20000018 	.word	0x20000018

0800441c <std>:
 800441c:	2300      	movs	r3, #0
 800441e:	b510      	push	{r4, lr}
 8004420:	4604      	mov	r4, r0
 8004422:	e9c0 3300 	strd	r3, r3, [r0]
 8004426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800442a:	6083      	str	r3, [r0, #8]
 800442c:	8181      	strh	r1, [r0, #12]
 800442e:	6643      	str	r3, [r0, #100]	; 0x64
 8004430:	81c2      	strh	r2, [r0, #14]
 8004432:	6183      	str	r3, [r0, #24]
 8004434:	4619      	mov	r1, r3
 8004436:	2208      	movs	r2, #8
 8004438:	305c      	adds	r0, #92	; 0x5c
 800443a:	f000 f90c 	bl	8004656 <memset>
 800443e:	4b05      	ldr	r3, [pc, #20]	; (8004454 <std+0x38>)
 8004440:	6224      	str	r4, [r4, #32]
 8004442:	6263      	str	r3, [r4, #36]	; 0x24
 8004444:	4b04      	ldr	r3, [pc, #16]	; (8004458 <std+0x3c>)
 8004446:	62a3      	str	r3, [r4, #40]	; 0x28
 8004448:	4b04      	ldr	r3, [pc, #16]	; (800445c <std+0x40>)
 800444a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800444c:	4b04      	ldr	r3, [pc, #16]	; (8004460 <std+0x44>)
 800444e:	6323      	str	r3, [r4, #48]	; 0x30
 8004450:	bd10      	pop	{r4, pc}
 8004452:	bf00      	nop
 8004454:	080049a1 	.word	0x080049a1
 8004458:	080049c3 	.word	0x080049c3
 800445c:	080049fb 	.word	0x080049fb
 8004460:	08004a1f 	.word	0x08004a1f

08004464 <_cleanup_r>:
 8004464:	4901      	ldr	r1, [pc, #4]	; (800446c <_cleanup_r+0x8>)
 8004466:	f000 b8af 	b.w	80045c8 <_fwalk_reent>
 800446a:	bf00      	nop
 800446c:	08004cf1 	.word	0x08004cf1

08004470 <__sfmoreglue>:
 8004470:	2268      	movs	r2, #104	; 0x68
 8004472:	b570      	push	{r4, r5, r6, lr}
 8004474:	1e4d      	subs	r5, r1, #1
 8004476:	4355      	muls	r5, r2
 8004478:	460e      	mov	r6, r1
 800447a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800447e:	f000 f913 	bl	80046a8 <_malloc_r>
 8004482:	4604      	mov	r4, r0
 8004484:	b140      	cbz	r0, 8004498 <__sfmoreglue+0x28>
 8004486:	2100      	movs	r1, #0
 8004488:	e9c0 1600 	strd	r1, r6, [r0]
 800448c:	300c      	adds	r0, #12
 800448e:	60a0      	str	r0, [r4, #8]
 8004490:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004494:	f000 f8df 	bl	8004656 <memset>
 8004498:	4620      	mov	r0, r4
 800449a:	bd70      	pop	{r4, r5, r6, pc}

0800449c <__sfp_lock_acquire>:
 800449c:	4801      	ldr	r0, [pc, #4]	; (80044a4 <__sfp_lock_acquire+0x8>)
 800449e:	f000 b8d8 	b.w	8004652 <__retarget_lock_acquire_recursive>
 80044a2:	bf00      	nop
 80044a4:	20001389 	.word	0x20001389

080044a8 <__sfp_lock_release>:
 80044a8:	4801      	ldr	r0, [pc, #4]	; (80044b0 <__sfp_lock_release+0x8>)
 80044aa:	f000 b8d3 	b.w	8004654 <__retarget_lock_release_recursive>
 80044ae:	bf00      	nop
 80044b0:	20001389 	.word	0x20001389

080044b4 <__sinit_lock_acquire>:
 80044b4:	4801      	ldr	r0, [pc, #4]	; (80044bc <__sinit_lock_acquire+0x8>)
 80044b6:	f000 b8cc 	b.w	8004652 <__retarget_lock_acquire_recursive>
 80044ba:	bf00      	nop
 80044bc:	2000138a 	.word	0x2000138a

080044c0 <__sinit_lock_release>:
 80044c0:	4801      	ldr	r0, [pc, #4]	; (80044c8 <__sinit_lock_release+0x8>)
 80044c2:	f000 b8c7 	b.w	8004654 <__retarget_lock_release_recursive>
 80044c6:	bf00      	nop
 80044c8:	2000138a 	.word	0x2000138a

080044cc <__sinit>:
 80044cc:	b510      	push	{r4, lr}
 80044ce:	4604      	mov	r4, r0
 80044d0:	f7ff fff0 	bl	80044b4 <__sinit_lock_acquire>
 80044d4:	69a3      	ldr	r3, [r4, #24]
 80044d6:	b11b      	cbz	r3, 80044e0 <__sinit+0x14>
 80044d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044dc:	f7ff bff0 	b.w	80044c0 <__sinit_lock_release>
 80044e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80044e4:	6523      	str	r3, [r4, #80]	; 0x50
 80044e6:	4b13      	ldr	r3, [pc, #76]	; (8004534 <__sinit+0x68>)
 80044e8:	4a13      	ldr	r2, [pc, #76]	; (8004538 <__sinit+0x6c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80044ee:	42a3      	cmp	r3, r4
 80044f0:	bf08      	it	eq
 80044f2:	2301      	moveq	r3, #1
 80044f4:	4620      	mov	r0, r4
 80044f6:	bf08      	it	eq
 80044f8:	61a3      	streq	r3, [r4, #24]
 80044fa:	f000 f81f 	bl	800453c <__sfp>
 80044fe:	6060      	str	r0, [r4, #4]
 8004500:	4620      	mov	r0, r4
 8004502:	f000 f81b 	bl	800453c <__sfp>
 8004506:	60a0      	str	r0, [r4, #8]
 8004508:	4620      	mov	r0, r4
 800450a:	f000 f817 	bl	800453c <__sfp>
 800450e:	2200      	movs	r2, #0
 8004510:	2104      	movs	r1, #4
 8004512:	60e0      	str	r0, [r4, #12]
 8004514:	6860      	ldr	r0, [r4, #4]
 8004516:	f7ff ff81 	bl	800441c <std>
 800451a:	2201      	movs	r2, #1
 800451c:	2109      	movs	r1, #9
 800451e:	68a0      	ldr	r0, [r4, #8]
 8004520:	f7ff ff7c 	bl	800441c <std>
 8004524:	2202      	movs	r2, #2
 8004526:	2112      	movs	r1, #18
 8004528:	68e0      	ldr	r0, [r4, #12]
 800452a:	f7ff ff77 	bl	800441c <std>
 800452e:	2301      	movs	r3, #1
 8004530:	61a3      	str	r3, [r4, #24]
 8004532:	e7d1      	b.n	80044d8 <__sinit+0xc>
 8004534:	080063cc 	.word	0x080063cc
 8004538:	08004465 	.word	0x08004465

0800453c <__sfp>:
 800453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453e:	4607      	mov	r7, r0
 8004540:	f7ff ffac 	bl	800449c <__sfp_lock_acquire>
 8004544:	4b1e      	ldr	r3, [pc, #120]	; (80045c0 <__sfp+0x84>)
 8004546:	681e      	ldr	r6, [r3, #0]
 8004548:	69b3      	ldr	r3, [r6, #24]
 800454a:	b913      	cbnz	r3, 8004552 <__sfp+0x16>
 800454c:	4630      	mov	r0, r6
 800454e:	f7ff ffbd 	bl	80044cc <__sinit>
 8004552:	3648      	adds	r6, #72	; 0x48
 8004554:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004558:	3b01      	subs	r3, #1
 800455a:	d503      	bpl.n	8004564 <__sfp+0x28>
 800455c:	6833      	ldr	r3, [r6, #0]
 800455e:	b30b      	cbz	r3, 80045a4 <__sfp+0x68>
 8004560:	6836      	ldr	r6, [r6, #0]
 8004562:	e7f7      	b.n	8004554 <__sfp+0x18>
 8004564:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004568:	b9d5      	cbnz	r5, 80045a0 <__sfp+0x64>
 800456a:	4b16      	ldr	r3, [pc, #88]	; (80045c4 <__sfp+0x88>)
 800456c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004570:	60e3      	str	r3, [r4, #12]
 8004572:	6665      	str	r5, [r4, #100]	; 0x64
 8004574:	f000 f86c 	bl	8004650 <__retarget_lock_init_recursive>
 8004578:	f7ff ff96 	bl	80044a8 <__sfp_lock_release>
 800457c:	2208      	movs	r2, #8
 800457e:	4629      	mov	r1, r5
 8004580:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004584:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004588:	6025      	str	r5, [r4, #0]
 800458a:	61a5      	str	r5, [r4, #24]
 800458c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004590:	f000 f861 	bl	8004656 <memset>
 8004594:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004598:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800459c:	4620      	mov	r0, r4
 800459e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045a0:	3468      	adds	r4, #104	; 0x68
 80045a2:	e7d9      	b.n	8004558 <__sfp+0x1c>
 80045a4:	2104      	movs	r1, #4
 80045a6:	4638      	mov	r0, r7
 80045a8:	f7ff ff62 	bl	8004470 <__sfmoreglue>
 80045ac:	4604      	mov	r4, r0
 80045ae:	6030      	str	r0, [r6, #0]
 80045b0:	2800      	cmp	r0, #0
 80045b2:	d1d5      	bne.n	8004560 <__sfp+0x24>
 80045b4:	f7ff ff78 	bl	80044a8 <__sfp_lock_release>
 80045b8:	230c      	movs	r3, #12
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	e7ee      	b.n	800459c <__sfp+0x60>
 80045be:	bf00      	nop
 80045c0:	080063cc 	.word	0x080063cc
 80045c4:	ffff0001 	.word	0xffff0001

080045c8 <_fwalk_reent>:
 80045c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045cc:	4606      	mov	r6, r0
 80045ce:	4688      	mov	r8, r1
 80045d0:	2700      	movs	r7, #0
 80045d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80045d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045da:	f1b9 0901 	subs.w	r9, r9, #1
 80045de:	d505      	bpl.n	80045ec <_fwalk_reent+0x24>
 80045e0:	6824      	ldr	r4, [r4, #0]
 80045e2:	2c00      	cmp	r4, #0
 80045e4:	d1f7      	bne.n	80045d6 <_fwalk_reent+0xe>
 80045e6:	4638      	mov	r0, r7
 80045e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045ec:	89ab      	ldrh	r3, [r5, #12]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d907      	bls.n	8004602 <_fwalk_reent+0x3a>
 80045f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045f6:	3301      	adds	r3, #1
 80045f8:	d003      	beq.n	8004602 <_fwalk_reent+0x3a>
 80045fa:	4629      	mov	r1, r5
 80045fc:	4630      	mov	r0, r6
 80045fe:	47c0      	blx	r8
 8004600:	4307      	orrs	r7, r0
 8004602:	3568      	adds	r5, #104	; 0x68
 8004604:	e7e9      	b.n	80045da <_fwalk_reent+0x12>
	...

08004608 <__libc_init_array>:
 8004608:	b570      	push	{r4, r5, r6, lr}
 800460a:	2600      	movs	r6, #0
 800460c:	4d0c      	ldr	r5, [pc, #48]	; (8004640 <__libc_init_array+0x38>)
 800460e:	4c0d      	ldr	r4, [pc, #52]	; (8004644 <__libc_init_array+0x3c>)
 8004610:	1b64      	subs	r4, r4, r5
 8004612:	10a4      	asrs	r4, r4, #2
 8004614:	42a6      	cmp	r6, r4
 8004616:	d109      	bne.n	800462c <__libc_init_array+0x24>
 8004618:	f000 ffa2 	bl	8005560 <_init>
 800461c:	2600      	movs	r6, #0
 800461e:	4d0a      	ldr	r5, [pc, #40]	; (8004648 <__libc_init_array+0x40>)
 8004620:	4c0a      	ldr	r4, [pc, #40]	; (800464c <__libc_init_array+0x44>)
 8004622:	1b64      	subs	r4, r4, r5
 8004624:	10a4      	asrs	r4, r4, #2
 8004626:	42a6      	cmp	r6, r4
 8004628:	d105      	bne.n	8004636 <__libc_init_array+0x2e>
 800462a:	bd70      	pop	{r4, r5, r6, pc}
 800462c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004630:	4798      	blx	r3
 8004632:	3601      	adds	r6, #1
 8004634:	e7ee      	b.n	8004614 <__libc_init_array+0xc>
 8004636:	f855 3b04 	ldr.w	r3, [r5], #4
 800463a:	4798      	blx	r3
 800463c:	3601      	adds	r6, #1
 800463e:	e7f2      	b.n	8004626 <__libc_init_array+0x1e>
 8004640:	08006404 	.word	0x08006404
 8004644:	08006404 	.word	0x08006404
 8004648:	08006404 	.word	0x08006404
 800464c:	08006408 	.word	0x08006408

08004650 <__retarget_lock_init_recursive>:
 8004650:	4770      	bx	lr

08004652 <__retarget_lock_acquire_recursive>:
 8004652:	4770      	bx	lr

08004654 <__retarget_lock_release_recursive>:
 8004654:	4770      	bx	lr

08004656 <memset>:
 8004656:	4603      	mov	r3, r0
 8004658:	4402      	add	r2, r0
 800465a:	4293      	cmp	r3, r2
 800465c:	d100      	bne.n	8004660 <memset+0xa>
 800465e:	4770      	bx	lr
 8004660:	f803 1b01 	strb.w	r1, [r3], #1
 8004664:	e7f9      	b.n	800465a <memset+0x4>
	...

08004668 <sbrk_aligned>:
 8004668:	b570      	push	{r4, r5, r6, lr}
 800466a:	4e0e      	ldr	r6, [pc, #56]	; (80046a4 <sbrk_aligned+0x3c>)
 800466c:	460c      	mov	r4, r1
 800466e:	6831      	ldr	r1, [r6, #0]
 8004670:	4605      	mov	r5, r0
 8004672:	b911      	cbnz	r1, 800467a <sbrk_aligned+0x12>
 8004674:	f000 f984 	bl	8004980 <_sbrk_r>
 8004678:	6030      	str	r0, [r6, #0]
 800467a:	4621      	mov	r1, r4
 800467c:	4628      	mov	r0, r5
 800467e:	f000 f97f 	bl	8004980 <_sbrk_r>
 8004682:	1c43      	adds	r3, r0, #1
 8004684:	d00a      	beq.n	800469c <sbrk_aligned+0x34>
 8004686:	1cc4      	adds	r4, r0, #3
 8004688:	f024 0403 	bic.w	r4, r4, #3
 800468c:	42a0      	cmp	r0, r4
 800468e:	d007      	beq.n	80046a0 <sbrk_aligned+0x38>
 8004690:	1a21      	subs	r1, r4, r0
 8004692:	4628      	mov	r0, r5
 8004694:	f000 f974 	bl	8004980 <_sbrk_r>
 8004698:	3001      	adds	r0, #1
 800469a:	d101      	bne.n	80046a0 <sbrk_aligned+0x38>
 800469c:	f04f 34ff 	mov.w	r4, #4294967295
 80046a0:	4620      	mov	r0, r4
 80046a2:	bd70      	pop	{r4, r5, r6, pc}
 80046a4:	20001390 	.word	0x20001390

080046a8 <_malloc_r>:
 80046a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ac:	1ccd      	adds	r5, r1, #3
 80046ae:	f025 0503 	bic.w	r5, r5, #3
 80046b2:	3508      	adds	r5, #8
 80046b4:	2d0c      	cmp	r5, #12
 80046b6:	bf38      	it	cc
 80046b8:	250c      	movcc	r5, #12
 80046ba:	2d00      	cmp	r5, #0
 80046bc:	4607      	mov	r7, r0
 80046be:	db01      	blt.n	80046c4 <_malloc_r+0x1c>
 80046c0:	42a9      	cmp	r1, r5
 80046c2:	d905      	bls.n	80046d0 <_malloc_r+0x28>
 80046c4:	230c      	movs	r3, #12
 80046c6:	2600      	movs	r6, #0
 80046c8:	603b      	str	r3, [r7, #0]
 80046ca:	4630      	mov	r0, r6
 80046cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046d0:	4e2e      	ldr	r6, [pc, #184]	; (800478c <_malloc_r+0xe4>)
 80046d2:	f000 fbc1 	bl	8004e58 <__malloc_lock>
 80046d6:	6833      	ldr	r3, [r6, #0]
 80046d8:	461c      	mov	r4, r3
 80046da:	bb34      	cbnz	r4, 800472a <_malloc_r+0x82>
 80046dc:	4629      	mov	r1, r5
 80046de:	4638      	mov	r0, r7
 80046e0:	f7ff ffc2 	bl	8004668 <sbrk_aligned>
 80046e4:	1c43      	adds	r3, r0, #1
 80046e6:	4604      	mov	r4, r0
 80046e8:	d14d      	bne.n	8004786 <_malloc_r+0xde>
 80046ea:	6834      	ldr	r4, [r6, #0]
 80046ec:	4626      	mov	r6, r4
 80046ee:	2e00      	cmp	r6, #0
 80046f0:	d140      	bne.n	8004774 <_malloc_r+0xcc>
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	4631      	mov	r1, r6
 80046f6:	4638      	mov	r0, r7
 80046f8:	eb04 0803 	add.w	r8, r4, r3
 80046fc:	f000 f940 	bl	8004980 <_sbrk_r>
 8004700:	4580      	cmp	r8, r0
 8004702:	d13a      	bne.n	800477a <_malloc_r+0xd2>
 8004704:	6821      	ldr	r1, [r4, #0]
 8004706:	3503      	adds	r5, #3
 8004708:	1a6d      	subs	r5, r5, r1
 800470a:	f025 0503 	bic.w	r5, r5, #3
 800470e:	3508      	adds	r5, #8
 8004710:	2d0c      	cmp	r5, #12
 8004712:	bf38      	it	cc
 8004714:	250c      	movcc	r5, #12
 8004716:	4638      	mov	r0, r7
 8004718:	4629      	mov	r1, r5
 800471a:	f7ff ffa5 	bl	8004668 <sbrk_aligned>
 800471e:	3001      	adds	r0, #1
 8004720:	d02b      	beq.n	800477a <_malloc_r+0xd2>
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	442b      	add	r3, r5
 8004726:	6023      	str	r3, [r4, #0]
 8004728:	e00e      	b.n	8004748 <_malloc_r+0xa0>
 800472a:	6822      	ldr	r2, [r4, #0]
 800472c:	1b52      	subs	r2, r2, r5
 800472e:	d41e      	bmi.n	800476e <_malloc_r+0xc6>
 8004730:	2a0b      	cmp	r2, #11
 8004732:	d916      	bls.n	8004762 <_malloc_r+0xba>
 8004734:	1961      	adds	r1, r4, r5
 8004736:	42a3      	cmp	r3, r4
 8004738:	6025      	str	r5, [r4, #0]
 800473a:	bf18      	it	ne
 800473c:	6059      	strne	r1, [r3, #4]
 800473e:	6863      	ldr	r3, [r4, #4]
 8004740:	bf08      	it	eq
 8004742:	6031      	streq	r1, [r6, #0]
 8004744:	5162      	str	r2, [r4, r5]
 8004746:	604b      	str	r3, [r1, #4]
 8004748:	4638      	mov	r0, r7
 800474a:	f104 060b 	add.w	r6, r4, #11
 800474e:	f000 fb89 	bl	8004e64 <__malloc_unlock>
 8004752:	f026 0607 	bic.w	r6, r6, #7
 8004756:	1d23      	adds	r3, r4, #4
 8004758:	1af2      	subs	r2, r6, r3
 800475a:	d0b6      	beq.n	80046ca <_malloc_r+0x22>
 800475c:	1b9b      	subs	r3, r3, r6
 800475e:	50a3      	str	r3, [r4, r2]
 8004760:	e7b3      	b.n	80046ca <_malloc_r+0x22>
 8004762:	6862      	ldr	r2, [r4, #4]
 8004764:	42a3      	cmp	r3, r4
 8004766:	bf0c      	ite	eq
 8004768:	6032      	streq	r2, [r6, #0]
 800476a:	605a      	strne	r2, [r3, #4]
 800476c:	e7ec      	b.n	8004748 <_malloc_r+0xa0>
 800476e:	4623      	mov	r3, r4
 8004770:	6864      	ldr	r4, [r4, #4]
 8004772:	e7b2      	b.n	80046da <_malloc_r+0x32>
 8004774:	4634      	mov	r4, r6
 8004776:	6876      	ldr	r6, [r6, #4]
 8004778:	e7b9      	b.n	80046ee <_malloc_r+0x46>
 800477a:	230c      	movs	r3, #12
 800477c:	4638      	mov	r0, r7
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	f000 fb70 	bl	8004e64 <__malloc_unlock>
 8004784:	e7a1      	b.n	80046ca <_malloc_r+0x22>
 8004786:	6025      	str	r5, [r4, #0]
 8004788:	e7de      	b.n	8004748 <_malloc_r+0xa0>
 800478a:	bf00      	nop
 800478c:	2000138c 	.word	0x2000138c

08004790 <iprintf>:
 8004790:	b40f      	push	{r0, r1, r2, r3}
 8004792:	4b0a      	ldr	r3, [pc, #40]	; (80047bc <iprintf+0x2c>)
 8004794:	b513      	push	{r0, r1, r4, lr}
 8004796:	681c      	ldr	r4, [r3, #0]
 8004798:	b124      	cbz	r4, 80047a4 <iprintf+0x14>
 800479a:	69a3      	ldr	r3, [r4, #24]
 800479c:	b913      	cbnz	r3, 80047a4 <iprintf+0x14>
 800479e:	4620      	mov	r0, r4
 80047a0:	f7ff fe94 	bl	80044cc <__sinit>
 80047a4:	ab05      	add	r3, sp, #20
 80047a6:	4620      	mov	r0, r4
 80047a8:	9a04      	ldr	r2, [sp, #16]
 80047aa:	68a1      	ldr	r1, [r4, #8]
 80047ac:	9301      	str	r3, [sp, #4]
 80047ae:	f000 fbcf 	bl	8004f50 <_vfiprintf_r>
 80047b2:	b002      	add	sp, #8
 80047b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047b8:	b004      	add	sp, #16
 80047ba:	4770      	bx	lr
 80047bc:	20000018 	.word	0x20000018

080047c0 <_puts_r>:
 80047c0:	b570      	push	{r4, r5, r6, lr}
 80047c2:	460e      	mov	r6, r1
 80047c4:	4605      	mov	r5, r0
 80047c6:	b118      	cbz	r0, 80047d0 <_puts_r+0x10>
 80047c8:	6983      	ldr	r3, [r0, #24]
 80047ca:	b90b      	cbnz	r3, 80047d0 <_puts_r+0x10>
 80047cc:	f7ff fe7e 	bl	80044cc <__sinit>
 80047d0:	69ab      	ldr	r3, [r5, #24]
 80047d2:	68ac      	ldr	r4, [r5, #8]
 80047d4:	b913      	cbnz	r3, 80047dc <_puts_r+0x1c>
 80047d6:	4628      	mov	r0, r5
 80047d8:	f7ff fe78 	bl	80044cc <__sinit>
 80047dc:	4b2c      	ldr	r3, [pc, #176]	; (8004890 <_puts_r+0xd0>)
 80047de:	429c      	cmp	r4, r3
 80047e0:	d120      	bne.n	8004824 <_puts_r+0x64>
 80047e2:	686c      	ldr	r4, [r5, #4]
 80047e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047e6:	07db      	lsls	r3, r3, #31
 80047e8:	d405      	bmi.n	80047f6 <_puts_r+0x36>
 80047ea:	89a3      	ldrh	r3, [r4, #12]
 80047ec:	0598      	lsls	r0, r3, #22
 80047ee:	d402      	bmi.n	80047f6 <_puts_r+0x36>
 80047f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047f2:	f7ff ff2e 	bl	8004652 <__retarget_lock_acquire_recursive>
 80047f6:	89a3      	ldrh	r3, [r4, #12]
 80047f8:	0719      	lsls	r1, r3, #28
 80047fa:	d51d      	bpl.n	8004838 <_puts_r+0x78>
 80047fc:	6923      	ldr	r3, [r4, #16]
 80047fe:	b1db      	cbz	r3, 8004838 <_puts_r+0x78>
 8004800:	3e01      	subs	r6, #1
 8004802:	68a3      	ldr	r3, [r4, #8]
 8004804:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004808:	3b01      	subs	r3, #1
 800480a:	60a3      	str	r3, [r4, #8]
 800480c:	bb39      	cbnz	r1, 800485e <_puts_r+0x9e>
 800480e:	2b00      	cmp	r3, #0
 8004810:	da38      	bge.n	8004884 <_puts_r+0xc4>
 8004812:	4622      	mov	r2, r4
 8004814:	210a      	movs	r1, #10
 8004816:	4628      	mov	r0, r5
 8004818:	f000 f906 	bl	8004a28 <__swbuf_r>
 800481c:	3001      	adds	r0, #1
 800481e:	d011      	beq.n	8004844 <_puts_r+0x84>
 8004820:	250a      	movs	r5, #10
 8004822:	e011      	b.n	8004848 <_puts_r+0x88>
 8004824:	4b1b      	ldr	r3, [pc, #108]	; (8004894 <_puts_r+0xd4>)
 8004826:	429c      	cmp	r4, r3
 8004828:	d101      	bne.n	800482e <_puts_r+0x6e>
 800482a:	68ac      	ldr	r4, [r5, #8]
 800482c:	e7da      	b.n	80047e4 <_puts_r+0x24>
 800482e:	4b1a      	ldr	r3, [pc, #104]	; (8004898 <_puts_r+0xd8>)
 8004830:	429c      	cmp	r4, r3
 8004832:	bf08      	it	eq
 8004834:	68ec      	ldreq	r4, [r5, #12]
 8004836:	e7d5      	b.n	80047e4 <_puts_r+0x24>
 8004838:	4621      	mov	r1, r4
 800483a:	4628      	mov	r0, r5
 800483c:	f000 f958 	bl	8004af0 <__swsetup_r>
 8004840:	2800      	cmp	r0, #0
 8004842:	d0dd      	beq.n	8004800 <_puts_r+0x40>
 8004844:	f04f 35ff 	mov.w	r5, #4294967295
 8004848:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800484a:	07da      	lsls	r2, r3, #31
 800484c:	d405      	bmi.n	800485a <_puts_r+0x9a>
 800484e:	89a3      	ldrh	r3, [r4, #12]
 8004850:	059b      	lsls	r3, r3, #22
 8004852:	d402      	bmi.n	800485a <_puts_r+0x9a>
 8004854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004856:	f7ff fefd 	bl	8004654 <__retarget_lock_release_recursive>
 800485a:	4628      	mov	r0, r5
 800485c:	bd70      	pop	{r4, r5, r6, pc}
 800485e:	2b00      	cmp	r3, #0
 8004860:	da04      	bge.n	800486c <_puts_r+0xac>
 8004862:	69a2      	ldr	r2, [r4, #24]
 8004864:	429a      	cmp	r2, r3
 8004866:	dc06      	bgt.n	8004876 <_puts_r+0xb6>
 8004868:	290a      	cmp	r1, #10
 800486a:	d004      	beq.n	8004876 <_puts_r+0xb6>
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	1c5a      	adds	r2, r3, #1
 8004870:	6022      	str	r2, [r4, #0]
 8004872:	7019      	strb	r1, [r3, #0]
 8004874:	e7c5      	b.n	8004802 <_puts_r+0x42>
 8004876:	4622      	mov	r2, r4
 8004878:	4628      	mov	r0, r5
 800487a:	f000 f8d5 	bl	8004a28 <__swbuf_r>
 800487e:	3001      	adds	r0, #1
 8004880:	d1bf      	bne.n	8004802 <_puts_r+0x42>
 8004882:	e7df      	b.n	8004844 <_puts_r+0x84>
 8004884:	250a      	movs	r5, #10
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	6022      	str	r2, [r4, #0]
 800488c:	701d      	strb	r5, [r3, #0]
 800488e:	e7db      	b.n	8004848 <_puts_r+0x88>
 8004890:	0800638c 	.word	0x0800638c
 8004894:	080063ac 	.word	0x080063ac
 8004898:	0800636c 	.word	0x0800636c

0800489c <puts>:
 800489c:	4b02      	ldr	r3, [pc, #8]	; (80048a8 <puts+0xc>)
 800489e:	4601      	mov	r1, r0
 80048a0:	6818      	ldr	r0, [r3, #0]
 80048a2:	f7ff bf8d 	b.w	80047c0 <_puts_r>
 80048a6:	bf00      	nop
 80048a8:	20000018 	.word	0x20000018

080048ac <cleanup_glue>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	460c      	mov	r4, r1
 80048b0:	6809      	ldr	r1, [r1, #0]
 80048b2:	4605      	mov	r5, r0
 80048b4:	b109      	cbz	r1, 80048ba <cleanup_glue+0xe>
 80048b6:	f7ff fff9 	bl	80048ac <cleanup_glue>
 80048ba:	4621      	mov	r1, r4
 80048bc:	4628      	mov	r0, r5
 80048be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048c2:	f000 bad5 	b.w	8004e70 <_free_r>
	...

080048c8 <_reclaim_reent>:
 80048c8:	4b2c      	ldr	r3, [pc, #176]	; (800497c <_reclaim_reent+0xb4>)
 80048ca:	b570      	push	{r4, r5, r6, lr}
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4604      	mov	r4, r0
 80048d0:	4283      	cmp	r3, r0
 80048d2:	d051      	beq.n	8004978 <_reclaim_reent+0xb0>
 80048d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80048d6:	b143      	cbz	r3, 80048ea <_reclaim_reent+0x22>
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d14a      	bne.n	8004974 <_reclaim_reent+0xac>
 80048de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048e0:	6819      	ldr	r1, [r3, #0]
 80048e2:	b111      	cbz	r1, 80048ea <_reclaim_reent+0x22>
 80048e4:	4620      	mov	r0, r4
 80048e6:	f000 fac3 	bl	8004e70 <_free_r>
 80048ea:	6961      	ldr	r1, [r4, #20]
 80048ec:	b111      	cbz	r1, 80048f4 <_reclaim_reent+0x2c>
 80048ee:	4620      	mov	r0, r4
 80048f0:	f000 fabe 	bl	8004e70 <_free_r>
 80048f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80048f6:	b111      	cbz	r1, 80048fe <_reclaim_reent+0x36>
 80048f8:	4620      	mov	r0, r4
 80048fa:	f000 fab9 	bl	8004e70 <_free_r>
 80048fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004900:	b111      	cbz	r1, 8004908 <_reclaim_reent+0x40>
 8004902:	4620      	mov	r0, r4
 8004904:	f000 fab4 	bl	8004e70 <_free_r>
 8004908:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800490a:	b111      	cbz	r1, 8004912 <_reclaim_reent+0x4a>
 800490c:	4620      	mov	r0, r4
 800490e:	f000 faaf 	bl	8004e70 <_free_r>
 8004912:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004914:	b111      	cbz	r1, 800491c <_reclaim_reent+0x54>
 8004916:	4620      	mov	r0, r4
 8004918:	f000 faaa 	bl	8004e70 <_free_r>
 800491c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800491e:	b111      	cbz	r1, 8004926 <_reclaim_reent+0x5e>
 8004920:	4620      	mov	r0, r4
 8004922:	f000 faa5 	bl	8004e70 <_free_r>
 8004926:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004928:	b111      	cbz	r1, 8004930 <_reclaim_reent+0x68>
 800492a:	4620      	mov	r0, r4
 800492c:	f000 faa0 	bl	8004e70 <_free_r>
 8004930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004932:	b111      	cbz	r1, 800493a <_reclaim_reent+0x72>
 8004934:	4620      	mov	r0, r4
 8004936:	f000 fa9b 	bl	8004e70 <_free_r>
 800493a:	69a3      	ldr	r3, [r4, #24]
 800493c:	b1e3      	cbz	r3, 8004978 <_reclaim_reent+0xb0>
 800493e:	4620      	mov	r0, r4
 8004940:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004942:	4798      	blx	r3
 8004944:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004946:	b1b9      	cbz	r1, 8004978 <_reclaim_reent+0xb0>
 8004948:	4620      	mov	r0, r4
 800494a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800494e:	f7ff bfad 	b.w	80048ac <cleanup_glue>
 8004952:	5949      	ldr	r1, [r1, r5]
 8004954:	b941      	cbnz	r1, 8004968 <_reclaim_reent+0xa0>
 8004956:	3504      	adds	r5, #4
 8004958:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800495a:	2d80      	cmp	r5, #128	; 0x80
 800495c:	68d9      	ldr	r1, [r3, #12]
 800495e:	d1f8      	bne.n	8004952 <_reclaim_reent+0x8a>
 8004960:	4620      	mov	r0, r4
 8004962:	f000 fa85 	bl	8004e70 <_free_r>
 8004966:	e7ba      	b.n	80048de <_reclaim_reent+0x16>
 8004968:	680e      	ldr	r6, [r1, #0]
 800496a:	4620      	mov	r0, r4
 800496c:	f000 fa80 	bl	8004e70 <_free_r>
 8004970:	4631      	mov	r1, r6
 8004972:	e7ef      	b.n	8004954 <_reclaim_reent+0x8c>
 8004974:	2500      	movs	r5, #0
 8004976:	e7ef      	b.n	8004958 <_reclaim_reent+0x90>
 8004978:	bd70      	pop	{r4, r5, r6, pc}
 800497a:	bf00      	nop
 800497c:	20000018 	.word	0x20000018

08004980 <_sbrk_r>:
 8004980:	b538      	push	{r3, r4, r5, lr}
 8004982:	2300      	movs	r3, #0
 8004984:	4d05      	ldr	r5, [pc, #20]	; (800499c <_sbrk_r+0x1c>)
 8004986:	4604      	mov	r4, r0
 8004988:	4608      	mov	r0, r1
 800498a:	602b      	str	r3, [r5, #0]
 800498c:	f7fc fac2 	bl	8000f14 <_sbrk>
 8004990:	1c43      	adds	r3, r0, #1
 8004992:	d102      	bne.n	800499a <_sbrk_r+0x1a>
 8004994:	682b      	ldr	r3, [r5, #0]
 8004996:	b103      	cbz	r3, 800499a <_sbrk_r+0x1a>
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	bd38      	pop	{r3, r4, r5, pc}
 800499c:	20001394 	.word	0x20001394

080049a0 <__sread>:
 80049a0:	b510      	push	{r4, lr}
 80049a2:	460c      	mov	r4, r1
 80049a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049a8:	f000 fd98 	bl	80054dc <_read_r>
 80049ac:	2800      	cmp	r0, #0
 80049ae:	bfab      	itete	ge
 80049b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80049b2:	89a3      	ldrhlt	r3, [r4, #12]
 80049b4:	181b      	addge	r3, r3, r0
 80049b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80049ba:	bfac      	ite	ge
 80049bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80049be:	81a3      	strhlt	r3, [r4, #12]
 80049c0:	bd10      	pop	{r4, pc}

080049c2 <__swrite>:
 80049c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049c6:	461f      	mov	r7, r3
 80049c8:	898b      	ldrh	r3, [r1, #12]
 80049ca:	4605      	mov	r5, r0
 80049cc:	05db      	lsls	r3, r3, #23
 80049ce:	460c      	mov	r4, r1
 80049d0:	4616      	mov	r6, r2
 80049d2:	d505      	bpl.n	80049e0 <__swrite+0x1e>
 80049d4:	2302      	movs	r3, #2
 80049d6:	2200      	movs	r2, #0
 80049d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049dc:	f000 f9c4 	bl	8004d68 <_lseek_r>
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	4632      	mov	r2, r6
 80049e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049e8:	81a3      	strh	r3, [r4, #12]
 80049ea:	4628      	mov	r0, r5
 80049ec:	463b      	mov	r3, r7
 80049ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049f6:	f000 b869 	b.w	8004acc <_write_r>

080049fa <__sseek>:
 80049fa:	b510      	push	{r4, lr}
 80049fc:	460c      	mov	r4, r1
 80049fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a02:	f000 f9b1 	bl	8004d68 <_lseek_r>
 8004a06:	1c43      	adds	r3, r0, #1
 8004a08:	89a3      	ldrh	r3, [r4, #12]
 8004a0a:	bf15      	itete	ne
 8004a0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a16:	81a3      	strheq	r3, [r4, #12]
 8004a18:	bf18      	it	ne
 8004a1a:	81a3      	strhne	r3, [r4, #12]
 8004a1c:	bd10      	pop	{r4, pc}

08004a1e <__sclose>:
 8004a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a22:	f000 b8d3 	b.w	8004bcc <_close_r>
	...

08004a28 <__swbuf_r>:
 8004a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2a:	460e      	mov	r6, r1
 8004a2c:	4614      	mov	r4, r2
 8004a2e:	4605      	mov	r5, r0
 8004a30:	b118      	cbz	r0, 8004a3a <__swbuf_r+0x12>
 8004a32:	6983      	ldr	r3, [r0, #24]
 8004a34:	b90b      	cbnz	r3, 8004a3a <__swbuf_r+0x12>
 8004a36:	f7ff fd49 	bl	80044cc <__sinit>
 8004a3a:	4b21      	ldr	r3, [pc, #132]	; (8004ac0 <__swbuf_r+0x98>)
 8004a3c:	429c      	cmp	r4, r3
 8004a3e:	d12b      	bne.n	8004a98 <__swbuf_r+0x70>
 8004a40:	686c      	ldr	r4, [r5, #4]
 8004a42:	69a3      	ldr	r3, [r4, #24]
 8004a44:	60a3      	str	r3, [r4, #8]
 8004a46:	89a3      	ldrh	r3, [r4, #12]
 8004a48:	071a      	lsls	r2, r3, #28
 8004a4a:	d52f      	bpl.n	8004aac <__swbuf_r+0x84>
 8004a4c:	6923      	ldr	r3, [r4, #16]
 8004a4e:	b36b      	cbz	r3, 8004aac <__swbuf_r+0x84>
 8004a50:	6923      	ldr	r3, [r4, #16]
 8004a52:	6820      	ldr	r0, [r4, #0]
 8004a54:	b2f6      	uxtb	r6, r6
 8004a56:	1ac0      	subs	r0, r0, r3
 8004a58:	6963      	ldr	r3, [r4, #20]
 8004a5a:	4637      	mov	r7, r6
 8004a5c:	4283      	cmp	r3, r0
 8004a5e:	dc04      	bgt.n	8004a6a <__swbuf_r+0x42>
 8004a60:	4621      	mov	r1, r4
 8004a62:	4628      	mov	r0, r5
 8004a64:	f000 f944 	bl	8004cf0 <_fflush_r>
 8004a68:	bb30      	cbnz	r0, 8004ab8 <__swbuf_r+0x90>
 8004a6a:	68a3      	ldr	r3, [r4, #8]
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	60a3      	str	r3, [r4, #8]
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	6022      	str	r2, [r4, #0]
 8004a78:	701e      	strb	r6, [r3, #0]
 8004a7a:	6963      	ldr	r3, [r4, #20]
 8004a7c:	4283      	cmp	r3, r0
 8004a7e:	d004      	beq.n	8004a8a <__swbuf_r+0x62>
 8004a80:	89a3      	ldrh	r3, [r4, #12]
 8004a82:	07db      	lsls	r3, r3, #31
 8004a84:	d506      	bpl.n	8004a94 <__swbuf_r+0x6c>
 8004a86:	2e0a      	cmp	r6, #10
 8004a88:	d104      	bne.n	8004a94 <__swbuf_r+0x6c>
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	f000 f92f 	bl	8004cf0 <_fflush_r>
 8004a92:	b988      	cbnz	r0, 8004ab8 <__swbuf_r+0x90>
 8004a94:	4638      	mov	r0, r7
 8004a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a98:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <__swbuf_r+0x9c>)
 8004a9a:	429c      	cmp	r4, r3
 8004a9c:	d101      	bne.n	8004aa2 <__swbuf_r+0x7a>
 8004a9e:	68ac      	ldr	r4, [r5, #8]
 8004aa0:	e7cf      	b.n	8004a42 <__swbuf_r+0x1a>
 8004aa2:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <__swbuf_r+0xa0>)
 8004aa4:	429c      	cmp	r4, r3
 8004aa6:	bf08      	it	eq
 8004aa8:	68ec      	ldreq	r4, [r5, #12]
 8004aaa:	e7ca      	b.n	8004a42 <__swbuf_r+0x1a>
 8004aac:	4621      	mov	r1, r4
 8004aae:	4628      	mov	r0, r5
 8004ab0:	f000 f81e 	bl	8004af0 <__swsetup_r>
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	d0cb      	beq.n	8004a50 <__swbuf_r+0x28>
 8004ab8:	f04f 37ff 	mov.w	r7, #4294967295
 8004abc:	e7ea      	b.n	8004a94 <__swbuf_r+0x6c>
 8004abe:	bf00      	nop
 8004ac0:	0800638c 	.word	0x0800638c
 8004ac4:	080063ac 	.word	0x080063ac
 8004ac8:	0800636c 	.word	0x0800636c

08004acc <_write_r>:
 8004acc:	b538      	push	{r3, r4, r5, lr}
 8004ace:	4604      	mov	r4, r0
 8004ad0:	4608      	mov	r0, r1
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	4d05      	ldr	r5, [pc, #20]	; (8004aec <_write_r+0x20>)
 8004ad8:	602a      	str	r2, [r5, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	f7fc f9cd 	bl	8000e7a <_write>
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	d102      	bne.n	8004aea <_write_r+0x1e>
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	b103      	cbz	r3, 8004aea <_write_r+0x1e>
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	bd38      	pop	{r3, r4, r5, pc}
 8004aec:	20001394 	.word	0x20001394

08004af0 <__swsetup_r>:
 8004af0:	4b32      	ldr	r3, [pc, #200]	; (8004bbc <__swsetup_r+0xcc>)
 8004af2:	b570      	push	{r4, r5, r6, lr}
 8004af4:	681d      	ldr	r5, [r3, #0]
 8004af6:	4606      	mov	r6, r0
 8004af8:	460c      	mov	r4, r1
 8004afa:	b125      	cbz	r5, 8004b06 <__swsetup_r+0x16>
 8004afc:	69ab      	ldr	r3, [r5, #24]
 8004afe:	b913      	cbnz	r3, 8004b06 <__swsetup_r+0x16>
 8004b00:	4628      	mov	r0, r5
 8004b02:	f7ff fce3 	bl	80044cc <__sinit>
 8004b06:	4b2e      	ldr	r3, [pc, #184]	; (8004bc0 <__swsetup_r+0xd0>)
 8004b08:	429c      	cmp	r4, r3
 8004b0a:	d10f      	bne.n	8004b2c <__swsetup_r+0x3c>
 8004b0c:	686c      	ldr	r4, [r5, #4]
 8004b0e:	89a3      	ldrh	r3, [r4, #12]
 8004b10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b14:	0719      	lsls	r1, r3, #28
 8004b16:	d42c      	bmi.n	8004b72 <__swsetup_r+0x82>
 8004b18:	06dd      	lsls	r5, r3, #27
 8004b1a:	d411      	bmi.n	8004b40 <__swsetup_r+0x50>
 8004b1c:	2309      	movs	r3, #9
 8004b1e:	6033      	str	r3, [r6, #0]
 8004b20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b24:	f04f 30ff 	mov.w	r0, #4294967295
 8004b28:	81a3      	strh	r3, [r4, #12]
 8004b2a:	e03e      	b.n	8004baa <__swsetup_r+0xba>
 8004b2c:	4b25      	ldr	r3, [pc, #148]	; (8004bc4 <__swsetup_r+0xd4>)
 8004b2e:	429c      	cmp	r4, r3
 8004b30:	d101      	bne.n	8004b36 <__swsetup_r+0x46>
 8004b32:	68ac      	ldr	r4, [r5, #8]
 8004b34:	e7eb      	b.n	8004b0e <__swsetup_r+0x1e>
 8004b36:	4b24      	ldr	r3, [pc, #144]	; (8004bc8 <__swsetup_r+0xd8>)
 8004b38:	429c      	cmp	r4, r3
 8004b3a:	bf08      	it	eq
 8004b3c:	68ec      	ldreq	r4, [r5, #12]
 8004b3e:	e7e6      	b.n	8004b0e <__swsetup_r+0x1e>
 8004b40:	0758      	lsls	r0, r3, #29
 8004b42:	d512      	bpl.n	8004b6a <__swsetup_r+0x7a>
 8004b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b46:	b141      	cbz	r1, 8004b5a <__swsetup_r+0x6a>
 8004b48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b4c:	4299      	cmp	r1, r3
 8004b4e:	d002      	beq.n	8004b56 <__swsetup_r+0x66>
 8004b50:	4630      	mov	r0, r6
 8004b52:	f000 f98d 	bl	8004e70 <_free_r>
 8004b56:	2300      	movs	r3, #0
 8004b58:	6363      	str	r3, [r4, #52]	; 0x34
 8004b5a:	89a3      	ldrh	r3, [r4, #12]
 8004b5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b60:	81a3      	strh	r3, [r4, #12]
 8004b62:	2300      	movs	r3, #0
 8004b64:	6063      	str	r3, [r4, #4]
 8004b66:	6923      	ldr	r3, [r4, #16]
 8004b68:	6023      	str	r3, [r4, #0]
 8004b6a:	89a3      	ldrh	r3, [r4, #12]
 8004b6c:	f043 0308 	orr.w	r3, r3, #8
 8004b70:	81a3      	strh	r3, [r4, #12]
 8004b72:	6923      	ldr	r3, [r4, #16]
 8004b74:	b94b      	cbnz	r3, 8004b8a <__swsetup_r+0x9a>
 8004b76:	89a3      	ldrh	r3, [r4, #12]
 8004b78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b80:	d003      	beq.n	8004b8a <__swsetup_r+0x9a>
 8004b82:	4621      	mov	r1, r4
 8004b84:	4630      	mov	r0, r6
 8004b86:	f000 f927 	bl	8004dd8 <__smakebuf_r>
 8004b8a:	89a0      	ldrh	r0, [r4, #12]
 8004b8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b90:	f010 0301 	ands.w	r3, r0, #1
 8004b94:	d00a      	beq.n	8004bac <__swsetup_r+0xbc>
 8004b96:	2300      	movs	r3, #0
 8004b98:	60a3      	str	r3, [r4, #8]
 8004b9a:	6963      	ldr	r3, [r4, #20]
 8004b9c:	425b      	negs	r3, r3
 8004b9e:	61a3      	str	r3, [r4, #24]
 8004ba0:	6923      	ldr	r3, [r4, #16]
 8004ba2:	b943      	cbnz	r3, 8004bb6 <__swsetup_r+0xc6>
 8004ba4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ba8:	d1ba      	bne.n	8004b20 <__swsetup_r+0x30>
 8004baa:	bd70      	pop	{r4, r5, r6, pc}
 8004bac:	0781      	lsls	r1, r0, #30
 8004bae:	bf58      	it	pl
 8004bb0:	6963      	ldrpl	r3, [r4, #20]
 8004bb2:	60a3      	str	r3, [r4, #8]
 8004bb4:	e7f4      	b.n	8004ba0 <__swsetup_r+0xb0>
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	e7f7      	b.n	8004baa <__swsetup_r+0xba>
 8004bba:	bf00      	nop
 8004bbc:	20000018 	.word	0x20000018
 8004bc0:	0800638c 	.word	0x0800638c
 8004bc4:	080063ac 	.word	0x080063ac
 8004bc8:	0800636c 	.word	0x0800636c

08004bcc <_close_r>:
 8004bcc:	b538      	push	{r3, r4, r5, lr}
 8004bce:	2300      	movs	r3, #0
 8004bd0:	4d05      	ldr	r5, [pc, #20]	; (8004be8 <_close_r+0x1c>)
 8004bd2:	4604      	mov	r4, r0
 8004bd4:	4608      	mov	r0, r1
 8004bd6:	602b      	str	r3, [r5, #0]
 8004bd8:	f7fc f96b 	bl	8000eb2 <_close>
 8004bdc:	1c43      	adds	r3, r0, #1
 8004bde:	d102      	bne.n	8004be6 <_close_r+0x1a>
 8004be0:	682b      	ldr	r3, [r5, #0]
 8004be2:	b103      	cbz	r3, 8004be6 <_close_r+0x1a>
 8004be4:	6023      	str	r3, [r4, #0]
 8004be6:	bd38      	pop	{r3, r4, r5, pc}
 8004be8:	20001394 	.word	0x20001394

08004bec <__sflush_r>:
 8004bec:	898a      	ldrh	r2, [r1, #12]
 8004bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf0:	4605      	mov	r5, r0
 8004bf2:	0710      	lsls	r0, r2, #28
 8004bf4:	460c      	mov	r4, r1
 8004bf6:	d457      	bmi.n	8004ca8 <__sflush_r+0xbc>
 8004bf8:	684b      	ldr	r3, [r1, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	dc04      	bgt.n	8004c08 <__sflush_r+0x1c>
 8004bfe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	dc01      	bgt.n	8004c08 <__sflush_r+0x1c>
 8004c04:	2000      	movs	r0, #0
 8004c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c0a:	2e00      	cmp	r6, #0
 8004c0c:	d0fa      	beq.n	8004c04 <__sflush_r+0x18>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c14:	682f      	ldr	r7, [r5, #0]
 8004c16:	602b      	str	r3, [r5, #0]
 8004c18:	d032      	beq.n	8004c80 <__sflush_r+0x94>
 8004c1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c1c:	89a3      	ldrh	r3, [r4, #12]
 8004c1e:	075a      	lsls	r2, r3, #29
 8004c20:	d505      	bpl.n	8004c2e <__sflush_r+0x42>
 8004c22:	6863      	ldr	r3, [r4, #4]
 8004c24:	1ac0      	subs	r0, r0, r3
 8004c26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c28:	b10b      	cbz	r3, 8004c2e <__sflush_r+0x42>
 8004c2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c2c:	1ac0      	subs	r0, r0, r3
 8004c2e:	2300      	movs	r3, #0
 8004c30:	4602      	mov	r2, r0
 8004c32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c34:	4628      	mov	r0, r5
 8004c36:	6a21      	ldr	r1, [r4, #32]
 8004c38:	47b0      	blx	r6
 8004c3a:	1c43      	adds	r3, r0, #1
 8004c3c:	89a3      	ldrh	r3, [r4, #12]
 8004c3e:	d106      	bne.n	8004c4e <__sflush_r+0x62>
 8004c40:	6829      	ldr	r1, [r5, #0]
 8004c42:	291d      	cmp	r1, #29
 8004c44:	d82c      	bhi.n	8004ca0 <__sflush_r+0xb4>
 8004c46:	4a29      	ldr	r2, [pc, #164]	; (8004cec <__sflush_r+0x100>)
 8004c48:	40ca      	lsrs	r2, r1
 8004c4a:	07d6      	lsls	r6, r2, #31
 8004c4c:	d528      	bpl.n	8004ca0 <__sflush_r+0xb4>
 8004c4e:	2200      	movs	r2, #0
 8004c50:	6062      	str	r2, [r4, #4]
 8004c52:	6922      	ldr	r2, [r4, #16]
 8004c54:	04d9      	lsls	r1, r3, #19
 8004c56:	6022      	str	r2, [r4, #0]
 8004c58:	d504      	bpl.n	8004c64 <__sflush_r+0x78>
 8004c5a:	1c42      	adds	r2, r0, #1
 8004c5c:	d101      	bne.n	8004c62 <__sflush_r+0x76>
 8004c5e:	682b      	ldr	r3, [r5, #0]
 8004c60:	b903      	cbnz	r3, 8004c64 <__sflush_r+0x78>
 8004c62:	6560      	str	r0, [r4, #84]	; 0x54
 8004c64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c66:	602f      	str	r7, [r5, #0]
 8004c68:	2900      	cmp	r1, #0
 8004c6a:	d0cb      	beq.n	8004c04 <__sflush_r+0x18>
 8004c6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c70:	4299      	cmp	r1, r3
 8004c72:	d002      	beq.n	8004c7a <__sflush_r+0x8e>
 8004c74:	4628      	mov	r0, r5
 8004c76:	f000 f8fb 	bl	8004e70 <_free_r>
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	6360      	str	r0, [r4, #52]	; 0x34
 8004c7e:	e7c2      	b.n	8004c06 <__sflush_r+0x1a>
 8004c80:	6a21      	ldr	r1, [r4, #32]
 8004c82:	2301      	movs	r3, #1
 8004c84:	4628      	mov	r0, r5
 8004c86:	47b0      	blx	r6
 8004c88:	1c41      	adds	r1, r0, #1
 8004c8a:	d1c7      	bne.n	8004c1c <__sflush_r+0x30>
 8004c8c:	682b      	ldr	r3, [r5, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0c4      	beq.n	8004c1c <__sflush_r+0x30>
 8004c92:	2b1d      	cmp	r3, #29
 8004c94:	d001      	beq.n	8004c9a <__sflush_r+0xae>
 8004c96:	2b16      	cmp	r3, #22
 8004c98:	d101      	bne.n	8004c9e <__sflush_r+0xb2>
 8004c9a:	602f      	str	r7, [r5, #0]
 8004c9c:	e7b2      	b.n	8004c04 <__sflush_r+0x18>
 8004c9e:	89a3      	ldrh	r3, [r4, #12]
 8004ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ca4:	81a3      	strh	r3, [r4, #12]
 8004ca6:	e7ae      	b.n	8004c06 <__sflush_r+0x1a>
 8004ca8:	690f      	ldr	r7, [r1, #16]
 8004caa:	2f00      	cmp	r7, #0
 8004cac:	d0aa      	beq.n	8004c04 <__sflush_r+0x18>
 8004cae:	0793      	lsls	r3, r2, #30
 8004cb0:	bf18      	it	ne
 8004cb2:	2300      	movne	r3, #0
 8004cb4:	680e      	ldr	r6, [r1, #0]
 8004cb6:	bf08      	it	eq
 8004cb8:	694b      	ldreq	r3, [r1, #20]
 8004cba:	1bf6      	subs	r6, r6, r7
 8004cbc:	600f      	str	r7, [r1, #0]
 8004cbe:	608b      	str	r3, [r1, #8]
 8004cc0:	2e00      	cmp	r6, #0
 8004cc2:	dd9f      	ble.n	8004c04 <__sflush_r+0x18>
 8004cc4:	4633      	mov	r3, r6
 8004cc6:	463a      	mov	r2, r7
 8004cc8:	4628      	mov	r0, r5
 8004cca:	6a21      	ldr	r1, [r4, #32]
 8004ccc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004cd0:	47e0      	blx	ip
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	dc06      	bgt.n	8004ce4 <__sflush_r+0xf8>
 8004cd6:	89a3      	ldrh	r3, [r4, #12]
 8004cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ce0:	81a3      	strh	r3, [r4, #12]
 8004ce2:	e790      	b.n	8004c06 <__sflush_r+0x1a>
 8004ce4:	4407      	add	r7, r0
 8004ce6:	1a36      	subs	r6, r6, r0
 8004ce8:	e7ea      	b.n	8004cc0 <__sflush_r+0xd4>
 8004cea:	bf00      	nop
 8004cec:	20400001 	.word	0x20400001

08004cf0 <_fflush_r>:
 8004cf0:	b538      	push	{r3, r4, r5, lr}
 8004cf2:	690b      	ldr	r3, [r1, #16]
 8004cf4:	4605      	mov	r5, r0
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	b913      	cbnz	r3, 8004d00 <_fflush_r+0x10>
 8004cfa:	2500      	movs	r5, #0
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	bd38      	pop	{r3, r4, r5, pc}
 8004d00:	b118      	cbz	r0, 8004d0a <_fflush_r+0x1a>
 8004d02:	6983      	ldr	r3, [r0, #24]
 8004d04:	b90b      	cbnz	r3, 8004d0a <_fflush_r+0x1a>
 8004d06:	f7ff fbe1 	bl	80044cc <__sinit>
 8004d0a:	4b14      	ldr	r3, [pc, #80]	; (8004d5c <_fflush_r+0x6c>)
 8004d0c:	429c      	cmp	r4, r3
 8004d0e:	d11b      	bne.n	8004d48 <_fflush_r+0x58>
 8004d10:	686c      	ldr	r4, [r5, #4]
 8004d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0ef      	beq.n	8004cfa <_fflush_r+0xa>
 8004d1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d1c:	07d0      	lsls	r0, r2, #31
 8004d1e:	d404      	bmi.n	8004d2a <_fflush_r+0x3a>
 8004d20:	0599      	lsls	r1, r3, #22
 8004d22:	d402      	bmi.n	8004d2a <_fflush_r+0x3a>
 8004d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d26:	f7ff fc94 	bl	8004652 <__retarget_lock_acquire_recursive>
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	f7ff ff5d 	bl	8004bec <__sflush_r>
 8004d32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d34:	4605      	mov	r5, r0
 8004d36:	07da      	lsls	r2, r3, #31
 8004d38:	d4e0      	bmi.n	8004cfc <_fflush_r+0xc>
 8004d3a:	89a3      	ldrh	r3, [r4, #12]
 8004d3c:	059b      	lsls	r3, r3, #22
 8004d3e:	d4dd      	bmi.n	8004cfc <_fflush_r+0xc>
 8004d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d42:	f7ff fc87 	bl	8004654 <__retarget_lock_release_recursive>
 8004d46:	e7d9      	b.n	8004cfc <_fflush_r+0xc>
 8004d48:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <_fflush_r+0x70>)
 8004d4a:	429c      	cmp	r4, r3
 8004d4c:	d101      	bne.n	8004d52 <_fflush_r+0x62>
 8004d4e:	68ac      	ldr	r4, [r5, #8]
 8004d50:	e7df      	b.n	8004d12 <_fflush_r+0x22>
 8004d52:	4b04      	ldr	r3, [pc, #16]	; (8004d64 <_fflush_r+0x74>)
 8004d54:	429c      	cmp	r4, r3
 8004d56:	bf08      	it	eq
 8004d58:	68ec      	ldreq	r4, [r5, #12]
 8004d5a:	e7da      	b.n	8004d12 <_fflush_r+0x22>
 8004d5c:	0800638c 	.word	0x0800638c
 8004d60:	080063ac 	.word	0x080063ac
 8004d64:	0800636c 	.word	0x0800636c

08004d68 <_lseek_r>:
 8004d68:	b538      	push	{r3, r4, r5, lr}
 8004d6a:	4604      	mov	r4, r0
 8004d6c:	4608      	mov	r0, r1
 8004d6e:	4611      	mov	r1, r2
 8004d70:	2200      	movs	r2, #0
 8004d72:	4d05      	ldr	r5, [pc, #20]	; (8004d88 <_lseek_r+0x20>)
 8004d74:	602a      	str	r2, [r5, #0]
 8004d76:	461a      	mov	r2, r3
 8004d78:	f7fc f8bf 	bl	8000efa <_lseek>
 8004d7c:	1c43      	adds	r3, r0, #1
 8004d7e:	d102      	bne.n	8004d86 <_lseek_r+0x1e>
 8004d80:	682b      	ldr	r3, [r5, #0]
 8004d82:	b103      	cbz	r3, 8004d86 <_lseek_r+0x1e>
 8004d84:	6023      	str	r3, [r4, #0]
 8004d86:	bd38      	pop	{r3, r4, r5, pc}
 8004d88:	20001394 	.word	0x20001394

08004d8c <__swhatbuf_r>:
 8004d8c:	b570      	push	{r4, r5, r6, lr}
 8004d8e:	460e      	mov	r6, r1
 8004d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d94:	4614      	mov	r4, r2
 8004d96:	2900      	cmp	r1, #0
 8004d98:	461d      	mov	r5, r3
 8004d9a:	b096      	sub	sp, #88	; 0x58
 8004d9c:	da08      	bge.n	8004db0 <__swhatbuf_r+0x24>
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004da4:	602a      	str	r2, [r5, #0]
 8004da6:	061a      	lsls	r2, r3, #24
 8004da8:	d410      	bmi.n	8004dcc <__swhatbuf_r+0x40>
 8004daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dae:	e00e      	b.n	8004dce <__swhatbuf_r+0x42>
 8004db0:	466a      	mov	r2, sp
 8004db2:	f000 fba5 	bl	8005500 <_fstat_r>
 8004db6:	2800      	cmp	r0, #0
 8004db8:	dbf1      	blt.n	8004d9e <__swhatbuf_r+0x12>
 8004dba:	9a01      	ldr	r2, [sp, #4]
 8004dbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004dc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004dc4:	425a      	negs	r2, r3
 8004dc6:	415a      	adcs	r2, r3
 8004dc8:	602a      	str	r2, [r5, #0]
 8004dca:	e7ee      	b.n	8004daa <__swhatbuf_r+0x1e>
 8004dcc:	2340      	movs	r3, #64	; 0x40
 8004dce:	2000      	movs	r0, #0
 8004dd0:	6023      	str	r3, [r4, #0]
 8004dd2:	b016      	add	sp, #88	; 0x58
 8004dd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004dd8 <__smakebuf_r>:
 8004dd8:	898b      	ldrh	r3, [r1, #12]
 8004dda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ddc:	079d      	lsls	r5, r3, #30
 8004dde:	4606      	mov	r6, r0
 8004de0:	460c      	mov	r4, r1
 8004de2:	d507      	bpl.n	8004df4 <__smakebuf_r+0x1c>
 8004de4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	6123      	str	r3, [r4, #16]
 8004dec:	2301      	movs	r3, #1
 8004dee:	6163      	str	r3, [r4, #20]
 8004df0:	b002      	add	sp, #8
 8004df2:	bd70      	pop	{r4, r5, r6, pc}
 8004df4:	466a      	mov	r2, sp
 8004df6:	ab01      	add	r3, sp, #4
 8004df8:	f7ff ffc8 	bl	8004d8c <__swhatbuf_r>
 8004dfc:	9900      	ldr	r1, [sp, #0]
 8004dfe:	4605      	mov	r5, r0
 8004e00:	4630      	mov	r0, r6
 8004e02:	f7ff fc51 	bl	80046a8 <_malloc_r>
 8004e06:	b948      	cbnz	r0, 8004e1c <__smakebuf_r+0x44>
 8004e08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e0c:	059a      	lsls	r2, r3, #22
 8004e0e:	d4ef      	bmi.n	8004df0 <__smakebuf_r+0x18>
 8004e10:	f023 0303 	bic.w	r3, r3, #3
 8004e14:	f043 0302 	orr.w	r3, r3, #2
 8004e18:	81a3      	strh	r3, [r4, #12]
 8004e1a:	e7e3      	b.n	8004de4 <__smakebuf_r+0xc>
 8004e1c:	4b0d      	ldr	r3, [pc, #52]	; (8004e54 <__smakebuf_r+0x7c>)
 8004e1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e20:	89a3      	ldrh	r3, [r4, #12]
 8004e22:	6020      	str	r0, [r4, #0]
 8004e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e28:	81a3      	strh	r3, [r4, #12]
 8004e2a:	9b00      	ldr	r3, [sp, #0]
 8004e2c:	6120      	str	r0, [r4, #16]
 8004e2e:	6163      	str	r3, [r4, #20]
 8004e30:	9b01      	ldr	r3, [sp, #4]
 8004e32:	b15b      	cbz	r3, 8004e4c <__smakebuf_r+0x74>
 8004e34:	4630      	mov	r0, r6
 8004e36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e3a:	f000 fb73 	bl	8005524 <_isatty_r>
 8004e3e:	b128      	cbz	r0, 8004e4c <__smakebuf_r+0x74>
 8004e40:	89a3      	ldrh	r3, [r4, #12]
 8004e42:	f023 0303 	bic.w	r3, r3, #3
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	81a3      	strh	r3, [r4, #12]
 8004e4c:	89a0      	ldrh	r0, [r4, #12]
 8004e4e:	4305      	orrs	r5, r0
 8004e50:	81a5      	strh	r5, [r4, #12]
 8004e52:	e7cd      	b.n	8004df0 <__smakebuf_r+0x18>
 8004e54:	08004465 	.word	0x08004465

08004e58 <__malloc_lock>:
 8004e58:	4801      	ldr	r0, [pc, #4]	; (8004e60 <__malloc_lock+0x8>)
 8004e5a:	f7ff bbfa 	b.w	8004652 <__retarget_lock_acquire_recursive>
 8004e5e:	bf00      	nop
 8004e60:	20001388 	.word	0x20001388

08004e64 <__malloc_unlock>:
 8004e64:	4801      	ldr	r0, [pc, #4]	; (8004e6c <__malloc_unlock+0x8>)
 8004e66:	f7ff bbf5 	b.w	8004654 <__retarget_lock_release_recursive>
 8004e6a:	bf00      	nop
 8004e6c:	20001388 	.word	0x20001388

08004e70 <_free_r>:
 8004e70:	b538      	push	{r3, r4, r5, lr}
 8004e72:	4605      	mov	r5, r0
 8004e74:	2900      	cmp	r1, #0
 8004e76:	d040      	beq.n	8004efa <_free_r+0x8a>
 8004e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e7c:	1f0c      	subs	r4, r1, #4
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	bfb8      	it	lt
 8004e82:	18e4      	addlt	r4, r4, r3
 8004e84:	f7ff ffe8 	bl	8004e58 <__malloc_lock>
 8004e88:	4a1c      	ldr	r2, [pc, #112]	; (8004efc <_free_r+0x8c>)
 8004e8a:	6813      	ldr	r3, [r2, #0]
 8004e8c:	b933      	cbnz	r3, 8004e9c <_free_r+0x2c>
 8004e8e:	6063      	str	r3, [r4, #4]
 8004e90:	6014      	str	r4, [r2, #0]
 8004e92:	4628      	mov	r0, r5
 8004e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e98:	f7ff bfe4 	b.w	8004e64 <__malloc_unlock>
 8004e9c:	42a3      	cmp	r3, r4
 8004e9e:	d908      	bls.n	8004eb2 <_free_r+0x42>
 8004ea0:	6820      	ldr	r0, [r4, #0]
 8004ea2:	1821      	adds	r1, r4, r0
 8004ea4:	428b      	cmp	r3, r1
 8004ea6:	bf01      	itttt	eq
 8004ea8:	6819      	ldreq	r1, [r3, #0]
 8004eaa:	685b      	ldreq	r3, [r3, #4]
 8004eac:	1809      	addeq	r1, r1, r0
 8004eae:	6021      	streq	r1, [r4, #0]
 8004eb0:	e7ed      	b.n	8004e8e <_free_r+0x1e>
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	b10b      	cbz	r3, 8004ebc <_free_r+0x4c>
 8004eb8:	42a3      	cmp	r3, r4
 8004eba:	d9fa      	bls.n	8004eb2 <_free_r+0x42>
 8004ebc:	6811      	ldr	r1, [r2, #0]
 8004ebe:	1850      	adds	r0, r2, r1
 8004ec0:	42a0      	cmp	r0, r4
 8004ec2:	d10b      	bne.n	8004edc <_free_r+0x6c>
 8004ec4:	6820      	ldr	r0, [r4, #0]
 8004ec6:	4401      	add	r1, r0
 8004ec8:	1850      	adds	r0, r2, r1
 8004eca:	4283      	cmp	r3, r0
 8004ecc:	6011      	str	r1, [r2, #0]
 8004ece:	d1e0      	bne.n	8004e92 <_free_r+0x22>
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	4401      	add	r1, r0
 8004ed6:	6011      	str	r1, [r2, #0]
 8004ed8:	6053      	str	r3, [r2, #4]
 8004eda:	e7da      	b.n	8004e92 <_free_r+0x22>
 8004edc:	d902      	bls.n	8004ee4 <_free_r+0x74>
 8004ede:	230c      	movs	r3, #12
 8004ee0:	602b      	str	r3, [r5, #0]
 8004ee2:	e7d6      	b.n	8004e92 <_free_r+0x22>
 8004ee4:	6820      	ldr	r0, [r4, #0]
 8004ee6:	1821      	adds	r1, r4, r0
 8004ee8:	428b      	cmp	r3, r1
 8004eea:	bf01      	itttt	eq
 8004eec:	6819      	ldreq	r1, [r3, #0]
 8004eee:	685b      	ldreq	r3, [r3, #4]
 8004ef0:	1809      	addeq	r1, r1, r0
 8004ef2:	6021      	streq	r1, [r4, #0]
 8004ef4:	6063      	str	r3, [r4, #4]
 8004ef6:	6054      	str	r4, [r2, #4]
 8004ef8:	e7cb      	b.n	8004e92 <_free_r+0x22>
 8004efa:	bd38      	pop	{r3, r4, r5, pc}
 8004efc:	2000138c 	.word	0x2000138c

08004f00 <__sfputc_r>:
 8004f00:	6893      	ldr	r3, [r2, #8]
 8004f02:	b410      	push	{r4}
 8004f04:	3b01      	subs	r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	6093      	str	r3, [r2, #8]
 8004f0a:	da07      	bge.n	8004f1c <__sfputc_r+0x1c>
 8004f0c:	6994      	ldr	r4, [r2, #24]
 8004f0e:	42a3      	cmp	r3, r4
 8004f10:	db01      	blt.n	8004f16 <__sfputc_r+0x16>
 8004f12:	290a      	cmp	r1, #10
 8004f14:	d102      	bne.n	8004f1c <__sfputc_r+0x1c>
 8004f16:	bc10      	pop	{r4}
 8004f18:	f7ff bd86 	b.w	8004a28 <__swbuf_r>
 8004f1c:	6813      	ldr	r3, [r2, #0]
 8004f1e:	1c58      	adds	r0, r3, #1
 8004f20:	6010      	str	r0, [r2, #0]
 8004f22:	7019      	strb	r1, [r3, #0]
 8004f24:	4608      	mov	r0, r1
 8004f26:	bc10      	pop	{r4}
 8004f28:	4770      	bx	lr

08004f2a <__sfputs_r>:
 8004f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2c:	4606      	mov	r6, r0
 8004f2e:	460f      	mov	r7, r1
 8004f30:	4614      	mov	r4, r2
 8004f32:	18d5      	adds	r5, r2, r3
 8004f34:	42ac      	cmp	r4, r5
 8004f36:	d101      	bne.n	8004f3c <__sfputs_r+0x12>
 8004f38:	2000      	movs	r0, #0
 8004f3a:	e007      	b.n	8004f4c <__sfputs_r+0x22>
 8004f3c:	463a      	mov	r2, r7
 8004f3e:	4630      	mov	r0, r6
 8004f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f44:	f7ff ffdc 	bl	8004f00 <__sfputc_r>
 8004f48:	1c43      	adds	r3, r0, #1
 8004f4a:	d1f3      	bne.n	8004f34 <__sfputs_r+0xa>
 8004f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f50 <_vfiprintf_r>:
 8004f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f54:	460d      	mov	r5, r1
 8004f56:	4614      	mov	r4, r2
 8004f58:	4698      	mov	r8, r3
 8004f5a:	4606      	mov	r6, r0
 8004f5c:	b09d      	sub	sp, #116	; 0x74
 8004f5e:	b118      	cbz	r0, 8004f68 <_vfiprintf_r+0x18>
 8004f60:	6983      	ldr	r3, [r0, #24]
 8004f62:	b90b      	cbnz	r3, 8004f68 <_vfiprintf_r+0x18>
 8004f64:	f7ff fab2 	bl	80044cc <__sinit>
 8004f68:	4b89      	ldr	r3, [pc, #548]	; (8005190 <_vfiprintf_r+0x240>)
 8004f6a:	429d      	cmp	r5, r3
 8004f6c:	d11b      	bne.n	8004fa6 <_vfiprintf_r+0x56>
 8004f6e:	6875      	ldr	r5, [r6, #4]
 8004f70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f72:	07d9      	lsls	r1, r3, #31
 8004f74:	d405      	bmi.n	8004f82 <_vfiprintf_r+0x32>
 8004f76:	89ab      	ldrh	r3, [r5, #12]
 8004f78:	059a      	lsls	r2, r3, #22
 8004f7a:	d402      	bmi.n	8004f82 <_vfiprintf_r+0x32>
 8004f7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f7e:	f7ff fb68 	bl	8004652 <__retarget_lock_acquire_recursive>
 8004f82:	89ab      	ldrh	r3, [r5, #12]
 8004f84:	071b      	lsls	r3, r3, #28
 8004f86:	d501      	bpl.n	8004f8c <_vfiprintf_r+0x3c>
 8004f88:	692b      	ldr	r3, [r5, #16]
 8004f8a:	b9eb      	cbnz	r3, 8004fc8 <_vfiprintf_r+0x78>
 8004f8c:	4629      	mov	r1, r5
 8004f8e:	4630      	mov	r0, r6
 8004f90:	f7ff fdae 	bl	8004af0 <__swsetup_r>
 8004f94:	b1c0      	cbz	r0, 8004fc8 <_vfiprintf_r+0x78>
 8004f96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f98:	07dc      	lsls	r4, r3, #31
 8004f9a:	d50e      	bpl.n	8004fba <_vfiprintf_r+0x6a>
 8004f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa0:	b01d      	add	sp, #116	; 0x74
 8004fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fa6:	4b7b      	ldr	r3, [pc, #492]	; (8005194 <_vfiprintf_r+0x244>)
 8004fa8:	429d      	cmp	r5, r3
 8004faa:	d101      	bne.n	8004fb0 <_vfiprintf_r+0x60>
 8004fac:	68b5      	ldr	r5, [r6, #8]
 8004fae:	e7df      	b.n	8004f70 <_vfiprintf_r+0x20>
 8004fb0:	4b79      	ldr	r3, [pc, #484]	; (8005198 <_vfiprintf_r+0x248>)
 8004fb2:	429d      	cmp	r5, r3
 8004fb4:	bf08      	it	eq
 8004fb6:	68f5      	ldreq	r5, [r6, #12]
 8004fb8:	e7da      	b.n	8004f70 <_vfiprintf_r+0x20>
 8004fba:	89ab      	ldrh	r3, [r5, #12]
 8004fbc:	0598      	lsls	r0, r3, #22
 8004fbe:	d4ed      	bmi.n	8004f9c <_vfiprintf_r+0x4c>
 8004fc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fc2:	f7ff fb47 	bl	8004654 <__retarget_lock_release_recursive>
 8004fc6:	e7e9      	b.n	8004f9c <_vfiprintf_r+0x4c>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	9309      	str	r3, [sp, #36]	; 0x24
 8004fcc:	2320      	movs	r3, #32
 8004fce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fd2:	2330      	movs	r3, #48	; 0x30
 8004fd4:	f04f 0901 	mov.w	r9, #1
 8004fd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fdc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800519c <_vfiprintf_r+0x24c>
 8004fe0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fe4:	4623      	mov	r3, r4
 8004fe6:	469a      	mov	sl, r3
 8004fe8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fec:	b10a      	cbz	r2, 8004ff2 <_vfiprintf_r+0xa2>
 8004fee:	2a25      	cmp	r2, #37	; 0x25
 8004ff0:	d1f9      	bne.n	8004fe6 <_vfiprintf_r+0x96>
 8004ff2:	ebba 0b04 	subs.w	fp, sl, r4
 8004ff6:	d00b      	beq.n	8005010 <_vfiprintf_r+0xc0>
 8004ff8:	465b      	mov	r3, fp
 8004ffa:	4622      	mov	r2, r4
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	4630      	mov	r0, r6
 8005000:	f7ff ff93 	bl	8004f2a <__sfputs_r>
 8005004:	3001      	adds	r0, #1
 8005006:	f000 80aa 	beq.w	800515e <_vfiprintf_r+0x20e>
 800500a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800500c:	445a      	add	r2, fp
 800500e:	9209      	str	r2, [sp, #36]	; 0x24
 8005010:	f89a 3000 	ldrb.w	r3, [sl]
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 80a2 	beq.w	800515e <_vfiprintf_r+0x20e>
 800501a:	2300      	movs	r3, #0
 800501c:	f04f 32ff 	mov.w	r2, #4294967295
 8005020:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005024:	f10a 0a01 	add.w	sl, sl, #1
 8005028:	9304      	str	r3, [sp, #16]
 800502a:	9307      	str	r3, [sp, #28]
 800502c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005030:	931a      	str	r3, [sp, #104]	; 0x68
 8005032:	4654      	mov	r4, sl
 8005034:	2205      	movs	r2, #5
 8005036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800503a:	4858      	ldr	r0, [pc, #352]	; (800519c <_vfiprintf_r+0x24c>)
 800503c:	f000 fa82 	bl	8005544 <memchr>
 8005040:	9a04      	ldr	r2, [sp, #16]
 8005042:	b9d8      	cbnz	r0, 800507c <_vfiprintf_r+0x12c>
 8005044:	06d1      	lsls	r1, r2, #27
 8005046:	bf44      	itt	mi
 8005048:	2320      	movmi	r3, #32
 800504a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800504e:	0713      	lsls	r3, r2, #28
 8005050:	bf44      	itt	mi
 8005052:	232b      	movmi	r3, #43	; 0x2b
 8005054:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005058:	f89a 3000 	ldrb.w	r3, [sl]
 800505c:	2b2a      	cmp	r3, #42	; 0x2a
 800505e:	d015      	beq.n	800508c <_vfiprintf_r+0x13c>
 8005060:	4654      	mov	r4, sl
 8005062:	2000      	movs	r0, #0
 8005064:	f04f 0c0a 	mov.w	ip, #10
 8005068:	9a07      	ldr	r2, [sp, #28]
 800506a:	4621      	mov	r1, r4
 800506c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005070:	3b30      	subs	r3, #48	; 0x30
 8005072:	2b09      	cmp	r3, #9
 8005074:	d94e      	bls.n	8005114 <_vfiprintf_r+0x1c4>
 8005076:	b1b0      	cbz	r0, 80050a6 <_vfiprintf_r+0x156>
 8005078:	9207      	str	r2, [sp, #28]
 800507a:	e014      	b.n	80050a6 <_vfiprintf_r+0x156>
 800507c:	eba0 0308 	sub.w	r3, r0, r8
 8005080:	fa09 f303 	lsl.w	r3, r9, r3
 8005084:	4313      	orrs	r3, r2
 8005086:	46a2      	mov	sl, r4
 8005088:	9304      	str	r3, [sp, #16]
 800508a:	e7d2      	b.n	8005032 <_vfiprintf_r+0xe2>
 800508c:	9b03      	ldr	r3, [sp, #12]
 800508e:	1d19      	adds	r1, r3, #4
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	9103      	str	r1, [sp, #12]
 8005094:	2b00      	cmp	r3, #0
 8005096:	bfbb      	ittet	lt
 8005098:	425b      	neglt	r3, r3
 800509a:	f042 0202 	orrlt.w	r2, r2, #2
 800509e:	9307      	strge	r3, [sp, #28]
 80050a0:	9307      	strlt	r3, [sp, #28]
 80050a2:	bfb8      	it	lt
 80050a4:	9204      	strlt	r2, [sp, #16]
 80050a6:	7823      	ldrb	r3, [r4, #0]
 80050a8:	2b2e      	cmp	r3, #46	; 0x2e
 80050aa:	d10c      	bne.n	80050c6 <_vfiprintf_r+0x176>
 80050ac:	7863      	ldrb	r3, [r4, #1]
 80050ae:	2b2a      	cmp	r3, #42	; 0x2a
 80050b0:	d135      	bne.n	800511e <_vfiprintf_r+0x1ce>
 80050b2:	9b03      	ldr	r3, [sp, #12]
 80050b4:	3402      	adds	r4, #2
 80050b6:	1d1a      	adds	r2, r3, #4
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	9203      	str	r2, [sp, #12]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	bfb8      	it	lt
 80050c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80050c4:	9305      	str	r3, [sp, #20]
 80050c6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80051a0 <_vfiprintf_r+0x250>
 80050ca:	2203      	movs	r2, #3
 80050cc:	4650      	mov	r0, sl
 80050ce:	7821      	ldrb	r1, [r4, #0]
 80050d0:	f000 fa38 	bl	8005544 <memchr>
 80050d4:	b140      	cbz	r0, 80050e8 <_vfiprintf_r+0x198>
 80050d6:	2340      	movs	r3, #64	; 0x40
 80050d8:	eba0 000a 	sub.w	r0, r0, sl
 80050dc:	fa03 f000 	lsl.w	r0, r3, r0
 80050e0:	9b04      	ldr	r3, [sp, #16]
 80050e2:	3401      	adds	r4, #1
 80050e4:	4303      	orrs	r3, r0
 80050e6:	9304      	str	r3, [sp, #16]
 80050e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ec:	2206      	movs	r2, #6
 80050ee:	482d      	ldr	r0, [pc, #180]	; (80051a4 <_vfiprintf_r+0x254>)
 80050f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050f4:	f000 fa26 	bl	8005544 <memchr>
 80050f8:	2800      	cmp	r0, #0
 80050fa:	d03f      	beq.n	800517c <_vfiprintf_r+0x22c>
 80050fc:	4b2a      	ldr	r3, [pc, #168]	; (80051a8 <_vfiprintf_r+0x258>)
 80050fe:	bb1b      	cbnz	r3, 8005148 <_vfiprintf_r+0x1f8>
 8005100:	9b03      	ldr	r3, [sp, #12]
 8005102:	3307      	adds	r3, #7
 8005104:	f023 0307 	bic.w	r3, r3, #7
 8005108:	3308      	adds	r3, #8
 800510a:	9303      	str	r3, [sp, #12]
 800510c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800510e:	443b      	add	r3, r7
 8005110:	9309      	str	r3, [sp, #36]	; 0x24
 8005112:	e767      	b.n	8004fe4 <_vfiprintf_r+0x94>
 8005114:	460c      	mov	r4, r1
 8005116:	2001      	movs	r0, #1
 8005118:	fb0c 3202 	mla	r2, ip, r2, r3
 800511c:	e7a5      	b.n	800506a <_vfiprintf_r+0x11a>
 800511e:	2300      	movs	r3, #0
 8005120:	f04f 0c0a 	mov.w	ip, #10
 8005124:	4619      	mov	r1, r3
 8005126:	3401      	adds	r4, #1
 8005128:	9305      	str	r3, [sp, #20]
 800512a:	4620      	mov	r0, r4
 800512c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005130:	3a30      	subs	r2, #48	; 0x30
 8005132:	2a09      	cmp	r2, #9
 8005134:	d903      	bls.n	800513e <_vfiprintf_r+0x1ee>
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0c5      	beq.n	80050c6 <_vfiprintf_r+0x176>
 800513a:	9105      	str	r1, [sp, #20]
 800513c:	e7c3      	b.n	80050c6 <_vfiprintf_r+0x176>
 800513e:	4604      	mov	r4, r0
 8005140:	2301      	movs	r3, #1
 8005142:	fb0c 2101 	mla	r1, ip, r1, r2
 8005146:	e7f0      	b.n	800512a <_vfiprintf_r+0x1da>
 8005148:	ab03      	add	r3, sp, #12
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	462a      	mov	r2, r5
 800514e:	4630      	mov	r0, r6
 8005150:	4b16      	ldr	r3, [pc, #88]	; (80051ac <_vfiprintf_r+0x25c>)
 8005152:	a904      	add	r1, sp, #16
 8005154:	f3af 8000 	nop.w
 8005158:	4607      	mov	r7, r0
 800515a:	1c78      	adds	r0, r7, #1
 800515c:	d1d6      	bne.n	800510c <_vfiprintf_r+0x1bc>
 800515e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005160:	07d9      	lsls	r1, r3, #31
 8005162:	d405      	bmi.n	8005170 <_vfiprintf_r+0x220>
 8005164:	89ab      	ldrh	r3, [r5, #12]
 8005166:	059a      	lsls	r2, r3, #22
 8005168:	d402      	bmi.n	8005170 <_vfiprintf_r+0x220>
 800516a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800516c:	f7ff fa72 	bl	8004654 <__retarget_lock_release_recursive>
 8005170:	89ab      	ldrh	r3, [r5, #12]
 8005172:	065b      	lsls	r3, r3, #25
 8005174:	f53f af12 	bmi.w	8004f9c <_vfiprintf_r+0x4c>
 8005178:	9809      	ldr	r0, [sp, #36]	; 0x24
 800517a:	e711      	b.n	8004fa0 <_vfiprintf_r+0x50>
 800517c:	ab03      	add	r3, sp, #12
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	462a      	mov	r2, r5
 8005182:	4630      	mov	r0, r6
 8005184:	4b09      	ldr	r3, [pc, #36]	; (80051ac <_vfiprintf_r+0x25c>)
 8005186:	a904      	add	r1, sp, #16
 8005188:	f000 f882 	bl	8005290 <_printf_i>
 800518c:	e7e4      	b.n	8005158 <_vfiprintf_r+0x208>
 800518e:	bf00      	nop
 8005190:	0800638c 	.word	0x0800638c
 8005194:	080063ac 	.word	0x080063ac
 8005198:	0800636c 	.word	0x0800636c
 800519c:	080063d0 	.word	0x080063d0
 80051a0:	080063d6 	.word	0x080063d6
 80051a4:	080063da 	.word	0x080063da
 80051a8:	00000000 	.word	0x00000000
 80051ac:	08004f2b 	.word	0x08004f2b

080051b0 <_printf_common>:
 80051b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051b4:	4616      	mov	r6, r2
 80051b6:	4699      	mov	r9, r3
 80051b8:	688a      	ldr	r2, [r1, #8]
 80051ba:	690b      	ldr	r3, [r1, #16]
 80051bc:	4607      	mov	r7, r0
 80051be:	4293      	cmp	r3, r2
 80051c0:	bfb8      	it	lt
 80051c2:	4613      	movlt	r3, r2
 80051c4:	6033      	str	r3, [r6, #0]
 80051c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051ca:	460c      	mov	r4, r1
 80051cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051d0:	b10a      	cbz	r2, 80051d6 <_printf_common+0x26>
 80051d2:	3301      	adds	r3, #1
 80051d4:	6033      	str	r3, [r6, #0]
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	0699      	lsls	r1, r3, #26
 80051da:	bf42      	ittt	mi
 80051dc:	6833      	ldrmi	r3, [r6, #0]
 80051de:	3302      	addmi	r3, #2
 80051e0:	6033      	strmi	r3, [r6, #0]
 80051e2:	6825      	ldr	r5, [r4, #0]
 80051e4:	f015 0506 	ands.w	r5, r5, #6
 80051e8:	d106      	bne.n	80051f8 <_printf_common+0x48>
 80051ea:	f104 0a19 	add.w	sl, r4, #25
 80051ee:	68e3      	ldr	r3, [r4, #12]
 80051f0:	6832      	ldr	r2, [r6, #0]
 80051f2:	1a9b      	subs	r3, r3, r2
 80051f4:	42ab      	cmp	r3, r5
 80051f6:	dc28      	bgt.n	800524a <_printf_common+0x9a>
 80051f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051fc:	1e13      	subs	r3, r2, #0
 80051fe:	6822      	ldr	r2, [r4, #0]
 8005200:	bf18      	it	ne
 8005202:	2301      	movne	r3, #1
 8005204:	0692      	lsls	r2, r2, #26
 8005206:	d42d      	bmi.n	8005264 <_printf_common+0xb4>
 8005208:	4649      	mov	r1, r9
 800520a:	4638      	mov	r0, r7
 800520c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005210:	47c0      	blx	r8
 8005212:	3001      	adds	r0, #1
 8005214:	d020      	beq.n	8005258 <_printf_common+0xa8>
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	68e5      	ldr	r5, [r4, #12]
 800521a:	f003 0306 	and.w	r3, r3, #6
 800521e:	2b04      	cmp	r3, #4
 8005220:	bf18      	it	ne
 8005222:	2500      	movne	r5, #0
 8005224:	6832      	ldr	r2, [r6, #0]
 8005226:	f04f 0600 	mov.w	r6, #0
 800522a:	68a3      	ldr	r3, [r4, #8]
 800522c:	bf08      	it	eq
 800522e:	1aad      	subeq	r5, r5, r2
 8005230:	6922      	ldr	r2, [r4, #16]
 8005232:	bf08      	it	eq
 8005234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005238:	4293      	cmp	r3, r2
 800523a:	bfc4      	itt	gt
 800523c:	1a9b      	subgt	r3, r3, r2
 800523e:	18ed      	addgt	r5, r5, r3
 8005240:	341a      	adds	r4, #26
 8005242:	42b5      	cmp	r5, r6
 8005244:	d11a      	bne.n	800527c <_printf_common+0xcc>
 8005246:	2000      	movs	r0, #0
 8005248:	e008      	b.n	800525c <_printf_common+0xac>
 800524a:	2301      	movs	r3, #1
 800524c:	4652      	mov	r2, sl
 800524e:	4649      	mov	r1, r9
 8005250:	4638      	mov	r0, r7
 8005252:	47c0      	blx	r8
 8005254:	3001      	adds	r0, #1
 8005256:	d103      	bne.n	8005260 <_printf_common+0xb0>
 8005258:	f04f 30ff 	mov.w	r0, #4294967295
 800525c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005260:	3501      	adds	r5, #1
 8005262:	e7c4      	b.n	80051ee <_printf_common+0x3e>
 8005264:	2030      	movs	r0, #48	; 0x30
 8005266:	18e1      	adds	r1, r4, r3
 8005268:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005272:	4422      	add	r2, r4
 8005274:	3302      	adds	r3, #2
 8005276:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800527a:	e7c5      	b.n	8005208 <_printf_common+0x58>
 800527c:	2301      	movs	r3, #1
 800527e:	4622      	mov	r2, r4
 8005280:	4649      	mov	r1, r9
 8005282:	4638      	mov	r0, r7
 8005284:	47c0      	blx	r8
 8005286:	3001      	adds	r0, #1
 8005288:	d0e6      	beq.n	8005258 <_printf_common+0xa8>
 800528a:	3601      	adds	r6, #1
 800528c:	e7d9      	b.n	8005242 <_printf_common+0x92>
	...

08005290 <_printf_i>:
 8005290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005294:	7e0f      	ldrb	r7, [r1, #24]
 8005296:	4691      	mov	r9, r2
 8005298:	2f78      	cmp	r7, #120	; 0x78
 800529a:	4680      	mov	r8, r0
 800529c:	460c      	mov	r4, r1
 800529e:	469a      	mov	sl, r3
 80052a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052a6:	d807      	bhi.n	80052b8 <_printf_i+0x28>
 80052a8:	2f62      	cmp	r7, #98	; 0x62
 80052aa:	d80a      	bhi.n	80052c2 <_printf_i+0x32>
 80052ac:	2f00      	cmp	r7, #0
 80052ae:	f000 80d9 	beq.w	8005464 <_printf_i+0x1d4>
 80052b2:	2f58      	cmp	r7, #88	; 0x58
 80052b4:	f000 80a4 	beq.w	8005400 <_printf_i+0x170>
 80052b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052c0:	e03a      	b.n	8005338 <_printf_i+0xa8>
 80052c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052c6:	2b15      	cmp	r3, #21
 80052c8:	d8f6      	bhi.n	80052b8 <_printf_i+0x28>
 80052ca:	a101      	add	r1, pc, #4	; (adr r1, 80052d0 <_printf_i+0x40>)
 80052cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052d0:	08005329 	.word	0x08005329
 80052d4:	0800533d 	.word	0x0800533d
 80052d8:	080052b9 	.word	0x080052b9
 80052dc:	080052b9 	.word	0x080052b9
 80052e0:	080052b9 	.word	0x080052b9
 80052e4:	080052b9 	.word	0x080052b9
 80052e8:	0800533d 	.word	0x0800533d
 80052ec:	080052b9 	.word	0x080052b9
 80052f0:	080052b9 	.word	0x080052b9
 80052f4:	080052b9 	.word	0x080052b9
 80052f8:	080052b9 	.word	0x080052b9
 80052fc:	0800544b 	.word	0x0800544b
 8005300:	0800536d 	.word	0x0800536d
 8005304:	0800542d 	.word	0x0800542d
 8005308:	080052b9 	.word	0x080052b9
 800530c:	080052b9 	.word	0x080052b9
 8005310:	0800546d 	.word	0x0800546d
 8005314:	080052b9 	.word	0x080052b9
 8005318:	0800536d 	.word	0x0800536d
 800531c:	080052b9 	.word	0x080052b9
 8005320:	080052b9 	.word	0x080052b9
 8005324:	08005435 	.word	0x08005435
 8005328:	682b      	ldr	r3, [r5, #0]
 800532a:	1d1a      	adds	r2, r3, #4
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	602a      	str	r2, [r5, #0]
 8005330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005334:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005338:	2301      	movs	r3, #1
 800533a:	e0a4      	b.n	8005486 <_printf_i+0x1f6>
 800533c:	6820      	ldr	r0, [r4, #0]
 800533e:	6829      	ldr	r1, [r5, #0]
 8005340:	0606      	lsls	r6, r0, #24
 8005342:	f101 0304 	add.w	r3, r1, #4
 8005346:	d50a      	bpl.n	800535e <_printf_i+0xce>
 8005348:	680e      	ldr	r6, [r1, #0]
 800534a:	602b      	str	r3, [r5, #0]
 800534c:	2e00      	cmp	r6, #0
 800534e:	da03      	bge.n	8005358 <_printf_i+0xc8>
 8005350:	232d      	movs	r3, #45	; 0x2d
 8005352:	4276      	negs	r6, r6
 8005354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005358:	230a      	movs	r3, #10
 800535a:	485e      	ldr	r0, [pc, #376]	; (80054d4 <_printf_i+0x244>)
 800535c:	e019      	b.n	8005392 <_printf_i+0x102>
 800535e:	680e      	ldr	r6, [r1, #0]
 8005360:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005364:	602b      	str	r3, [r5, #0]
 8005366:	bf18      	it	ne
 8005368:	b236      	sxthne	r6, r6
 800536a:	e7ef      	b.n	800534c <_printf_i+0xbc>
 800536c:	682b      	ldr	r3, [r5, #0]
 800536e:	6820      	ldr	r0, [r4, #0]
 8005370:	1d19      	adds	r1, r3, #4
 8005372:	6029      	str	r1, [r5, #0]
 8005374:	0601      	lsls	r1, r0, #24
 8005376:	d501      	bpl.n	800537c <_printf_i+0xec>
 8005378:	681e      	ldr	r6, [r3, #0]
 800537a:	e002      	b.n	8005382 <_printf_i+0xf2>
 800537c:	0646      	lsls	r6, r0, #25
 800537e:	d5fb      	bpl.n	8005378 <_printf_i+0xe8>
 8005380:	881e      	ldrh	r6, [r3, #0]
 8005382:	2f6f      	cmp	r7, #111	; 0x6f
 8005384:	bf0c      	ite	eq
 8005386:	2308      	moveq	r3, #8
 8005388:	230a      	movne	r3, #10
 800538a:	4852      	ldr	r0, [pc, #328]	; (80054d4 <_printf_i+0x244>)
 800538c:	2100      	movs	r1, #0
 800538e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005392:	6865      	ldr	r5, [r4, #4]
 8005394:	2d00      	cmp	r5, #0
 8005396:	bfa8      	it	ge
 8005398:	6821      	ldrge	r1, [r4, #0]
 800539a:	60a5      	str	r5, [r4, #8]
 800539c:	bfa4      	itt	ge
 800539e:	f021 0104 	bicge.w	r1, r1, #4
 80053a2:	6021      	strge	r1, [r4, #0]
 80053a4:	b90e      	cbnz	r6, 80053aa <_printf_i+0x11a>
 80053a6:	2d00      	cmp	r5, #0
 80053a8:	d04d      	beq.n	8005446 <_printf_i+0x1b6>
 80053aa:	4615      	mov	r5, r2
 80053ac:	fbb6 f1f3 	udiv	r1, r6, r3
 80053b0:	fb03 6711 	mls	r7, r3, r1, r6
 80053b4:	5dc7      	ldrb	r7, [r0, r7]
 80053b6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053ba:	4637      	mov	r7, r6
 80053bc:	42bb      	cmp	r3, r7
 80053be:	460e      	mov	r6, r1
 80053c0:	d9f4      	bls.n	80053ac <_printf_i+0x11c>
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d10b      	bne.n	80053de <_printf_i+0x14e>
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	07de      	lsls	r6, r3, #31
 80053ca:	d508      	bpl.n	80053de <_printf_i+0x14e>
 80053cc:	6923      	ldr	r3, [r4, #16]
 80053ce:	6861      	ldr	r1, [r4, #4]
 80053d0:	4299      	cmp	r1, r3
 80053d2:	bfde      	ittt	le
 80053d4:	2330      	movle	r3, #48	; 0x30
 80053d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053de:	1b52      	subs	r2, r2, r5
 80053e0:	6122      	str	r2, [r4, #16]
 80053e2:	464b      	mov	r3, r9
 80053e4:	4621      	mov	r1, r4
 80053e6:	4640      	mov	r0, r8
 80053e8:	f8cd a000 	str.w	sl, [sp]
 80053ec:	aa03      	add	r2, sp, #12
 80053ee:	f7ff fedf 	bl	80051b0 <_printf_common>
 80053f2:	3001      	adds	r0, #1
 80053f4:	d14c      	bne.n	8005490 <_printf_i+0x200>
 80053f6:	f04f 30ff 	mov.w	r0, #4294967295
 80053fa:	b004      	add	sp, #16
 80053fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005400:	4834      	ldr	r0, [pc, #208]	; (80054d4 <_printf_i+0x244>)
 8005402:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005406:	6829      	ldr	r1, [r5, #0]
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	f851 6b04 	ldr.w	r6, [r1], #4
 800540e:	6029      	str	r1, [r5, #0]
 8005410:	061d      	lsls	r5, r3, #24
 8005412:	d514      	bpl.n	800543e <_printf_i+0x1ae>
 8005414:	07df      	lsls	r7, r3, #31
 8005416:	bf44      	itt	mi
 8005418:	f043 0320 	orrmi.w	r3, r3, #32
 800541c:	6023      	strmi	r3, [r4, #0]
 800541e:	b91e      	cbnz	r6, 8005428 <_printf_i+0x198>
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	f023 0320 	bic.w	r3, r3, #32
 8005426:	6023      	str	r3, [r4, #0]
 8005428:	2310      	movs	r3, #16
 800542a:	e7af      	b.n	800538c <_printf_i+0xfc>
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	f043 0320 	orr.w	r3, r3, #32
 8005432:	6023      	str	r3, [r4, #0]
 8005434:	2378      	movs	r3, #120	; 0x78
 8005436:	4828      	ldr	r0, [pc, #160]	; (80054d8 <_printf_i+0x248>)
 8005438:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800543c:	e7e3      	b.n	8005406 <_printf_i+0x176>
 800543e:	0659      	lsls	r1, r3, #25
 8005440:	bf48      	it	mi
 8005442:	b2b6      	uxthmi	r6, r6
 8005444:	e7e6      	b.n	8005414 <_printf_i+0x184>
 8005446:	4615      	mov	r5, r2
 8005448:	e7bb      	b.n	80053c2 <_printf_i+0x132>
 800544a:	682b      	ldr	r3, [r5, #0]
 800544c:	6826      	ldr	r6, [r4, #0]
 800544e:	1d18      	adds	r0, r3, #4
 8005450:	6961      	ldr	r1, [r4, #20]
 8005452:	6028      	str	r0, [r5, #0]
 8005454:	0635      	lsls	r5, r6, #24
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	d501      	bpl.n	800545e <_printf_i+0x1ce>
 800545a:	6019      	str	r1, [r3, #0]
 800545c:	e002      	b.n	8005464 <_printf_i+0x1d4>
 800545e:	0670      	lsls	r0, r6, #25
 8005460:	d5fb      	bpl.n	800545a <_printf_i+0x1ca>
 8005462:	8019      	strh	r1, [r3, #0]
 8005464:	2300      	movs	r3, #0
 8005466:	4615      	mov	r5, r2
 8005468:	6123      	str	r3, [r4, #16]
 800546a:	e7ba      	b.n	80053e2 <_printf_i+0x152>
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	2100      	movs	r1, #0
 8005470:	1d1a      	adds	r2, r3, #4
 8005472:	602a      	str	r2, [r5, #0]
 8005474:	681d      	ldr	r5, [r3, #0]
 8005476:	6862      	ldr	r2, [r4, #4]
 8005478:	4628      	mov	r0, r5
 800547a:	f000 f863 	bl	8005544 <memchr>
 800547e:	b108      	cbz	r0, 8005484 <_printf_i+0x1f4>
 8005480:	1b40      	subs	r0, r0, r5
 8005482:	6060      	str	r0, [r4, #4]
 8005484:	6863      	ldr	r3, [r4, #4]
 8005486:	6123      	str	r3, [r4, #16]
 8005488:	2300      	movs	r3, #0
 800548a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800548e:	e7a8      	b.n	80053e2 <_printf_i+0x152>
 8005490:	462a      	mov	r2, r5
 8005492:	4649      	mov	r1, r9
 8005494:	4640      	mov	r0, r8
 8005496:	6923      	ldr	r3, [r4, #16]
 8005498:	47d0      	blx	sl
 800549a:	3001      	adds	r0, #1
 800549c:	d0ab      	beq.n	80053f6 <_printf_i+0x166>
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	079b      	lsls	r3, r3, #30
 80054a2:	d413      	bmi.n	80054cc <_printf_i+0x23c>
 80054a4:	68e0      	ldr	r0, [r4, #12]
 80054a6:	9b03      	ldr	r3, [sp, #12]
 80054a8:	4298      	cmp	r0, r3
 80054aa:	bfb8      	it	lt
 80054ac:	4618      	movlt	r0, r3
 80054ae:	e7a4      	b.n	80053fa <_printf_i+0x16a>
 80054b0:	2301      	movs	r3, #1
 80054b2:	4632      	mov	r2, r6
 80054b4:	4649      	mov	r1, r9
 80054b6:	4640      	mov	r0, r8
 80054b8:	47d0      	blx	sl
 80054ba:	3001      	adds	r0, #1
 80054bc:	d09b      	beq.n	80053f6 <_printf_i+0x166>
 80054be:	3501      	adds	r5, #1
 80054c0:	68e3      	ldr	r3, [r4, #12]
 80054c2:	9903      	ldr	r1, [sp, #12]
 80054c4:	1a5b      	subs	r3, r3, r1
 80054c6:	42ab      	cmp	r3, r5
 80054c8:	dcf2      	bgt.n	80054b0 <_printf_i+0x220>
 80054ca:	e7eb      	b.n	80054a4 <_printf_i+0x214>
 80054cc:	2500      	movs	r5, #0
 80054ce:	f104 0619 	add.w	r6, r4, #25
 80054d2:	e7f5      	b.n	80054c0 <_printf_i+0x230>
 80054d4:	080063e1 	.word	0x080063e1
 80054d8:	080063f2 	.word	0x080063f2

080054dc <_read_r>:
 80054dc:	b538      	push	{r3, r4, r5, lr}
 80054de:	4604      	mov	r4, r0
 80054e0:	4608      	mov	r0, r1
 80054e2:	4611      	mov	r1, r2
 80054e4:	2200      	movs	r2, #0
 80054e6:	4d05      	ldr	r5, [pc, #20]	; (80054fc <_read_r+0x20>)
 80054e8:	602a      	str	r2, [r5, #0]
 80054ea:	461a      	mov	r2, r3
 80054ec:	f7fb fca8 	bl	8000e40 <_read>
 80054f0:	1c43      	adds	r3, r0, #1
 80054f2:	d102      	bne.n	80054fa <_read_r+0x1e>
 80054f4:	682b      	ldr	r3, [r5, #0]
 80054f6:	b103      	cbz	r3, 80054fa <_read_r+0x1e>
 80054f8:	6023      	str	r3, [r4, #0]
 80054fa:	bd38      	pop	{r3, r4, r5, pc}
 80054fc:	20001394 	.word	0x20001394

08005500 <_fstat_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	2300      	movs	r3, #0
 8005504:	4d06      	ldr	r5, [pc, #24]	; (8005520 <_fstat_r+0x20>)
 8005506:	4604      	mov	r4, r0
 8005508:	4608      	mov	r0, r1
 800550a:	4611      	mov	r1, r2
 800550c:	602b      	str	r3, [r5, #0]
 800550e:	f7fb fcdb 	bl	8000ec8 <_fstat>
 8005512:	1c43      	adds	r3, r0, #1
 8005514:	d102      	bne.n	800551c <_fstat_r+0x1c>
 8005516:	682b      	ldr	r3, [r5, #0]
 8005518:	b103      	cbz	r3, 800551c <_fstat_r+0x1c>
 800551a:	6023      	str	r3, [r4, #0]
 800551c:	bd38      	pop	{r3, r4, r5, pc}
 800551e:	bf00      	nop
 8005520:	20001394 	.word	0x20001394

08005524 <_isatty_r>:
 8005524:	b538      	push	{r3, r4, r5, lr}
 8005526:	2300      	movs	r3, #0
 8005528:	4d05      	ldr	r5, [pc, #20]	; (8005540 <_isatty_r+0x1c>)
 800552a:	4604      	mov	r4, r0
 800552c:	4608      	mov	r0, r1
 800552e:	602b      	str	r3, [r5, #0]
 8005530:	f7fb fcd9 	bl	8000ee6 <_isatty>
 8005534:	1c43      	adds	r3, r0, #1
 8005536:	d102      	bne.n	800553e <_isatty_r+0x1a>
 8005538:	682b      	ldr	r3, [r5, #0]
 800553a:	b103      	cbz	r3, 800553e <_isatty_r+0x1a>
 800553c:	6023      	str	r3, [r4, #0]
 800553e:	bd38      	pop	{r3, r4, r5, pc}
 8005540:	20001394 	.word	0x20001394

08005544 <memchr>:
 8005544:	4603      	mov	r3, r0
 8005546:	b510      	push	{r4, lr}
 8005548:	b2c9      	uxtb	r1, r1
 800554a:	4402      	add	r2, r0
 800554c:	4293      	cmp	r3, r2
 800554e:	4618      	mov	r0, r3
 8005550:	d101      	bne.n	8005556 <memchr+0x12>
 8005552:	2000      	movs	r0, #0
 8005554:	e003      	b.n	800555e <memchr+0x1a>
 8005556:	7804      	ldrb	r4, [r0, #0]
 8005558:	3301      	adds	r3, #1
 800555a:	428c      	cmp	r4, r1
 800555c:	d1f6      	bne.n	800554c <memchr+0x8>
 800555e:	bd10      	pop	{r4, pc}

08005560 <_init>:
 8005560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005562:	bf00      	nop
 8005564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005566:	bc08      	pop	{r3}
 8005568:	469e      	mov	lr, r3
 800556a:	4770      	bx	lr

0800556c <_fini>:
 800556c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556e:	bf00      	nop
 8005570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005572:	bc08      	pop	{r3}
 8005574:	469e      	mov	lr, r3
 8005576:	4770      	bx	lr
