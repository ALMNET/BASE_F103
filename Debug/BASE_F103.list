
BASE_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004198  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080042a8  080042a8  000142a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043d4  080043d4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080043d4  080043d4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043d4  080043d4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043d4  080043d4  000143d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043d8  080043d8  000143d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080043dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010c0  20000074  08004450  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001134  08004450  00021134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4f2  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000273e  00000000  00000000  0002e58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00030cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e10  00000000  00000000  00031be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d60  00000000  00000000  000329f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffac  00000000  00000000  0004c758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093610  00000000  00000000  0005c704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000efd14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045e8  00000000  00000000  000efd64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08004290 	.word	0x08004290

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08004290 	.word	0x08004290

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	20000144 	.word	0x20000144

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b08a      	sub	sp, #40	; 0x28
 8000184:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fb57 	bl	8000838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f877 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f8db 	bl	8000348 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000192:	f000 f8af 	bl	80002f4 <MX_USART2_UART_Init>

  printf("Starting...");
 8000196:	482d      	ldr	r0, [pc, #180]	; (800024c <main+0xcc>)
 8000198:	f003 f992 	bl	80034c0 <iprintf>

  HAL_StatusTypeDef UartResult;


  UartResult = HAL_UART_Transmit(&huart2, "hola\n", 5, 100);
 800019c:	2364      	movs	r3, #100	; 0x64
 800019e:	2205      	movs	r2, #5
 80001a0:	492b      	ldr	r1, [pc, #172]	; (8000250 <main+0xd0>)
 80001a2:	482c      	ldr	r0, [pc, #176]	; (8000254 <main+0xd4>)
 80001a4:	f001 fcd7 	bl	8001b56 <HAL_UART_Transmit>
 80001a8:	4603      	mov	r3, r0
 80001aa:	77fb      	strb	r3, [r7, #31]
  /* definition and creation of Task1 */
//  osThreadDef(Task1, task1_handler, osPriorityIdle, 0, 128);
//  Task1Handle = osThreadCreate(osThread(Task1), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
    taskCreationStatus = xTaskCreate(task1_UART, "Task-1", 200, "Hello World task 1", 2, &task1_UART_hndl);
 80001ac:	f107 0308 	add.w	r3, r7, #8
 80001b0:	9301      	str	r3, [sp, #4]
 80001b2:	2302      	movs	r3, #2
 80001b4:	9300      	str	r3, [sp, #0]
 80001b6:	4b28      	ldr	r3, [pc, #160]	; (8000258 <main+0xd8>)
 80001b8:	22c8      	movs	r2, #200	; 0xc8
 80001ba:	4928      	ldr	r1, [pc, #160]	; (800025c <main+0xdc>)
 80001bc:	4828      	ldr	r0, [pc, #160]	; (8000260 <main+0xe0>)
 80001be:	f001 ff40 	bl	8002042 <xTaskCreate>
 80001c2:	61b8      	str	r0, [r7, #24]

    configASSERT(taskCreationStatus == pdPASS);
 80001c4:	69bb      	ldr	r3, [r7, #24]
 80001c6:	2b01      	cmp	r3, #1
 80001c8:	d00a      	beq.n	80001e0 <main+0x60>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80001ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80001ce:	f383 8811 	msr	BASEPRI, r3
 80001d2:	f3bf 8f6f 	isb	sy
 80001d6:	f3bf 8f4f 	dsb	sy
 80001da:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80001dc:	bf00      	nop
 80001de:	e7fe      	b.n	80001de <main+0x5e>

    taskCreationStatus = xTaskCreate(task2_UART, "Task-2", 200, "Hello World task 2", 2, &task2_UART_hndl);
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	9301      	str	r3, [sp, #4]
 80001e4:	2302      	movs	r3, #2
 80001e6:	9300      	str	r3, [sp, #0]
 80001e8:	4b1e      	ldr	r3, [pc, #120]	; (8000264 <main+0xe4>)
 80001ea:	22c8      	movs	r2, #200	; 0xc8
 80001ec:	491e      	ldr	r1, [pc, #120]	; (8000268 <main+0xe8>)
 80001ee:	481f      	ldr	r0, [pc, #124]	; (800026c <main+0xec>)
 80001f0:	f001 ff27 	bl	8002042 <xTaskCreate>
 80001f4:	61b8      	str	r0, [r7, #24]

    configASSERT(taskCreationStatus == pdPASS);
 80001f6:	69bb      	ldr	r3, [r7, #24]
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d00a      	beq.n	8000212 <main+0x92>
	__asm volatile
 80001fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000200:	f383 8811 	msr	BASEPRI, r3
 8000204:	f3bf 8f6f 	isb	sy
 8000208:	f3bf 8f4f 	dsb	sy
 800020c:	613b      	str	r3, [r7, #16]
}
 800020e:	bf00      	nop
 8000210:	e7fe      	b.n	8000210 <main+0x90>

    taskCreationStatus = xTaskCreate(task_LED, "Task-LED", 200, "LED Task", 3, &task_LED_XD);
 8000212:	463b      	mov	r3, r7
 8000214:	9301      	str	r3, [sp, #4]
 8000216:	2303      	movs	r3, #3
 8000218:	9300      	str	r3, [sp, #0]
 800021a:	4b15      	ldr	r3, [pc, #84]	; (8000270 <main+0xf0>)
 800021c:	22c8      	movs	r2, #200	; 0xc8
 800021e:	4915      	ldr	r1, [pc, #84]	; (8000274 <main+0xf4>)
 8000220:	4815      	ldr	r0, [pc, #84]	; (8000278 <main+0xf8>)
 8000222:	f001 ff0e 	bl	8002042 <xTaskCreate>
 8000226:	61b8      	str	r0, [r7, #24]

    configASSERT(taskCreationStatus == pdPASS);
 8000228:	69bb      	ldr	r3, [r7, #24]
 800022a:	2b01      	cmp	r3, #1
 800022c:	d00a      	beq.n	8000244 <main+0xc4>
	__asm volatile
 800022e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000232:	f383 8811 	msr	BASEPRI, r3
 8000236:	f3bf 8f6f 	isb	sy
 800023a:	f3bf 8f4f 	dsb	sy
 800023e:	60fb      	str	r3, [r7, #12]
}
 8000240:	bf00      	nop
 8000242:	e7fe      	b.n	8000242 <main+0xc2>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 8000244:	f002 f876 	bl	8002334 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000248:	e7fe      	b.n	8000248 <main+0xc8>
 800024a:	bf00      	nop
 800024c:	080042a8 	.word	0x080042a8
 8000250:	080042b4 	.word	0x080042b4
 8000254:	20000344 	.word	0x20000344
 8000258:	080042bc 	.word	0x080042bc
 800025c:	080042d0 	.word	0x080042d0
 8000260:	080003c9 	.word	0x080003c9
 8000264:	080042d8 	.word	0x080042d8
 8000268:	080042ec 	.word	0x080042ec
 800026c:	080003df 	.word	0x080003df
 8000270:	080042f4 	.word	0x080042f4
 8000274:	08004300 	.word	0x08004300
 8000278:	080003f5 	.word	0x080003f5

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b090      	sub	sp, #64	; 0x40
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	f107 0318 	add.w	r3, r7, #24
 8000286:	2228      	movs	r2, #40	; 0x28
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f003 f87b 	bl	8003386 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
 800029c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029e:	2302      	movs	r3, #2
 80002a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a2:	2301      	movs	r3, #1
 80002a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a6:	2310      	movs	r3, #16
 80002a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002aa:	2300      	movs	r3, #0
 80002ac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ae:	f107 0318 	add.w	r3, r7, #24
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 fd6e 	bl	8000d94 <HAL_RCC_OscConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002be:	f000 f8d9 	bl	8000474 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c2:	230f      	movs	r3, #15
 80002c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 ffdc 	bl	8001298 <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002e6:	f000 f8c5 	bl	8000474 <Error_Handler>
  }
}
 80002ea:	bf00      	nop
 80002ec:	3740      	adds	r7, #64	; 0x40
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002f8:	4b11      	ldr	r3, [pc, #68]	; (8000340 <MX_USART2_UART_Init+0x4c>)
 80002fa:	4a12      	ldr	r2, [pc, #72]	; (8000344 <MX_USART2_UART_Init+0x50>)
 80002fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80002fe:	4b10      	ldr	r3, [pc, #64]	; (8000340 <MX_USART2_UART_Init+0x4c>)
 8000300:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000304:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000306:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <MX_USART2_UART_Init+0x4c>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800030c:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <MX_USART2_UART_Init+0x4c>)
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000312:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <MX_USART2_UART_Init+0x4c>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <MX_USART2_UART_Init+0x4c>)
 800031a:	220c      	movs	r2, #12
 800031c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031e:	4b08      	ldr	r3, [pc, #32]	; (8000340 <MX_USART2_UART_Init+0x4c>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <MX_USART2_UART_Init+0x4c>)
 8000326:	2200      	movs	r2, #0
 8000328:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800032a:	4805      	ldr	r0, [pc, #20]	; (8000340 <MX_USART2_UART_Init+0x4c>)
 800032c:	f001 fbc6 	bl	8001abc <HAL_UART_Init>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000336:	f000 f89d 	bl	8000474 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000344 	.word	0x20000344
 8000344:	40004400 	.word	0x40004400

08000348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034e:	f107 0308 	add.w	r3, r7, #8
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
 800035a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800035c:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <MX_GPIO_Init+0x78>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a17      	ldr	r2, [pc, #92]	; (80003c0 <MX_GPIO_Init+0x78>)
 8000362:	f043 0310 	orr.w	r3, r3, #16
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <MX_GPIO_Init+0x78>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	f003 0310 	and.w	r3, r3, #16
 8000370:	607b      	str	r3, [r7, #4]
 8000372:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000374:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <MX_GPIO_Init+0x78>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a11      	ldr	r2, [pc, #68]	; (80003c0 <MX_GPIO_Init+0x78>)
 800037a:	f043 0304 	orr.w	r3, r3, #4
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <MX_GPIO_Init+0x78>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0304 	and.w	r3, r3, #4
 8000388:	603b      	str	r3, [r7, #0]
 800038a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000392:	480c      	ldr	r0, [pc, #48]	; (80003c4 <MX_GPIO_Init+0x7c>)
 8000394:	f000 fce6 	bl	8000d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800039c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039e:	2301      	movs	r3, #1
 80003a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a2:	2300      	movs	r3, #0
 80003a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a6:	2302      	movs	r3, #2
 80003a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003aa:	f107 0308 	add.w	r3, r7, #8
 80003ae:	4619      	mov	r1, r3
 80003b0:	4804      	ldr	r0, [pc, #16]	; (80003c4 <MX_GPIO_Init+0x7c>)
 80003b2:	f000 fb53 	bl	8000a5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003b6:	bf00      	nop
 80003b8:	3718      	adds	r7, #24
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000
 80003c4:	40011000 	.word	0x40011000

080003c8 <task1_UART>:

/* USER CODE BEGIN 4 */

static void task1_UART(void * parameters)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n", (char*)parameters);
 80003d0:	6878      	ldr	r0, [r7, #4]
 80003d2:	f003 f8fb 	bl	80035cc <puts>
		vTaskDelay(100);
 80003d6:	2064      	movs	r0, #100	; 0x64
 80003d8:	f001 ff78 	bl	80022cc <vTaskDelay>
		printf("%s\n", (char*)parameters);
 80003dc:	e7f8      	b.n	80003d0 <task1_UART+0x8>

080003de <task2_UART>:
	}
}


static void task2_UART(void * parameters)
{
 80003de:	b580      	push	{r7, lr}
 80003e0:	b082      	sub	sp, #8
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n", (char*)parameters);
 80003e6:	6878      	ldr	r0, [r7, #4]
 80003e8:	f003 f8f0 	bl	80035cc <puts>
		vTaskDelay(100);
 80003ec:	2064      	movs	r0, #100	; 0x64
 80003ee:	f001 ff6d 	bl	80022cc <vTaskDelay>
		printf("%s\n", (char*)parameters);
 80003f2:	e7f8      	b.n	80003e6 <task2_UART+0x8>

080003f4 <task_LED>:
	}

}

static void task_LED(void * parameters)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000402:	4809      	ldr	r0, [pc, #36]	; (8000428 <task_LED+0x34>)
 8000404:	f000 fcae 	bl	8000d64 <HAL_GPIO_WritePin>
		vTaskDelay(500);
 8000408:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800040c:	f001 ff5e 	bl	80022cc <vTaskDelay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000410:	2201      	movs	r2, #1
 8000412:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000416:	4804      	ldr	r0, [pc, #16]	; (8000428 <task_LED+0x34>)
 8000418:	f000 fca4 	bl	8000d64 <HAL_GPIO_WritePin>
		vTaskDelay(500);
 800041c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000420:	f001 ff54 	bl	80022cc <vTaskDelay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000424:	e7ea      	b.n	80003fc <task_LED+0x8>
 8000426:	bf00      	nop
 8000428:	40011000 	.word	0x40011000

0800042c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000434:	1d39      	adds	r1, r7, #4
 8000436:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800043a:	2201      	movs	r2, #1
 800043c:	4803      	ldr	r0, [pc, #12]	; (800044c <__io_putchar+0x20>)
 800043e:	f001 fb8a 	bl	8001b56 <HAL_UART_Transmit>

  return ch;
 8000442:	687b      	ldr	r3, [r7, #4]
}
 8000444:	4618      	mov	r0, r3
 8000446:	3708      	adds	r7, #8
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20000344 	.word	0x20000344

08000450 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a04      	ldr	r2, [pc, #16]	; (8000470 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d101      	bne.n	8000466 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000462:	f000 f9ff 	bl	8000864 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	40000800 	.word	0x40000800

08000474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000478:	b672      	cpsid	i
}
 800047a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800047c:	e7fe      	b.n	800047c <Error_Handler+0x8>
	...

08000480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000486:	4b11      	ldr	r3, [pc, #68]	; (80004cc <HAL_MspInit+0x4c>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	4a10      	ldr	r2, [pc, #64]	; (80004cc <HAL_MspInit+0x4c>)
 800048c:	f043 0301 	orr.w	r3, r3, #1
 8000490:	6193      	str	r3, [r2, #24]
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <HAL_MspInit+0x4c>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <HAL_MspInit+0x4c>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	4a0a      	ldr	r2, [pc, #40]	; (80004cc <HAL_MspInit+0x4c>)
 80004a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a8:	61d3      	str	r3, [r2, #28]
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <HAL_MspInit+0x4c>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004b2:	603b      	str	r3, [r7, #0]
 80004b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004b6:	2200      	movs	r2, #0
 80004b8:	210f      	movs	r1, #15
 80004ba:	f06f 0001 	mvn.w	r0, #1
 80004be:	f000 faa2 	bl	8000a06 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c2:	bf00      	nop
 80004c4:	3708      	adds	r7, #8
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40021000 	.word	0x40021000

080004d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d8:	f107 0310 	add.w	r3, r7, #16
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a1b      	ldr	r2, [pc, #108]	; (8000558 <HAL_UART_MspInit+0x88>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d12f      	bne.n	8000550 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004f0:	4b1a      	ldr	r3, [pc, #104]	; (800055c <HAL_UART_MspInit+0x8c>)
 80004f2:	69db      	ldr	r3, [r3, #28]
 80004f4:	4a19      	ldr	r2, [pc, #100]	; (800055c <HAL_UART_MspInit+0x8c>)
 80004f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004fa:	61d3      	str	r3, [r2, #28]
 80004fc:	4b17      	ldr	r3, [pc, #92]	; (800055c <HAL_UART_MspInit+0x8c>)
 80004fe:	69db      	ldr	r3, [r3, #28]
 8000500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000508:	4b14      	ldr	r3, [pc, #80]	; (800055c <HAL_UART_MspInit+0x8c>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	4a13      	ldr	r2, [pc, #76]	; (800055c <HAL_UART_MspInit+0x8c>)
 800050e:	f043 0304 	orr.w	r3, r3, #4
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <HAL_UART_MspInit+0x8c>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f003 0304 	and.w	r3, r3, #4
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000520:	2304      	movs	r3, #4
 8000522:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000524:	2302      	movs	r3, #2
 8000526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000528:	2303      	movs	r3, #3
 800052a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	4619      	mov	r1, r3
 8000532:	480b      	ldr	r0, [pc, #44]	; (8000560 <HAL_UART_MspInit+0x90>)
 8000534:	f000 fa92 	bl	8000a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000538:	2308      	movs	r3, #8
 800053a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800053c:	2300      	movs	r3, #0
 800053e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000544:	f107 0310 	add.w	r3, r7, #16
 8000548:	4619      	mov	r1, r3
 800054a:	4805      	ldr	r0, [pc, #20]	; (8000560 <HAL_UART_MspInit+0x90>)
 800054c:	f000 fa86 	bl	8000a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000550:	bf00      	nop
 8000552:	3720      	adds	r7, #32
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40004400 	.word	0x40004400
 800055c:	40021000 	.word	0x40021000
 8000560:	40010800 	.word	0x40010800

08000564 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08e      	sub	sp, #56	; 0x38
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800056c:	2300      	movs	r3, #0
 800056e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000570:	2300      	movs	r3, #0
 8000572:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000574:	2300      	movs	r3, #0
 8000576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800057a:	4b34      	ldr	r3, [pc, #208]	; (800064c <HAL_InitTick+0xe8>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	4a33      	ldr	r2, [pc, #204]	; (800064c <HAL_InitTick+0xe8>)
 8000580:	f043 0304 	orr.w	r3, r3, #4
 8000584:	61d3      	str	r3, [r2, #28]
 8000586:	4b31      	ldr	r3, [pc, #196]	; (800064c <HAL_InitTick+0xe8>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	f003 0304 	and.w	r3, r3, #4
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000592:	f107 0210 	add.w	r2, r7, #16
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4611      	mov	r1, r2
 800059c:	4618      	mov	r0, r3
 800059e:	f000 fff5 	bl	800158c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80005a2:	6a3b      	ldr	r3, [r7, #32]
 80005a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80005a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d103      	bne.n	80005b4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005ac:	f000 ffc6 	bl	800153c <HAL_RCC_GetPCLK1Freq>
 80005b0:	6378      	str	r0, [r7, #52]	; 0x34
 80005b2:	e004      	b.n	80005be <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80005b4:	f000 ffc2 	bl	800153c <HAL_RCC_GetPCLK1Freq>
 80005b8:	4603      	mov	r3, r0
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005c0:	4a23      	ldr	r2, [pc, #140]	; (8000650 <HAL_InitTick+0xec>)
 80005c2:	fba2 2303 	umull	r2, r3, r2, r3
 80005c6:	0c9b      	lsrs	r3, r3, #18
 80005c8:	3b01      	subs	r3, #1
 80005ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80005cc:	4b21      	ldr	r3, [pc, #132]	; (8000654 <HAL_InitTick+0xf0>)
 80005ce:	4a22      	ldr	r2, [pc, #136]	; (8000658 <HAL_InitTick+0xf4>)
 80005d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80005d2:	4b20      	ldr	r3, [pc, #128]	; (8000654 <HAL_InitTick+0xf0>)
 80005d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005d8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80005da:	4a1e      	ldr	r2, [pc, #120]	; (8000654 <HAL_InitTick+0xf0>)
 80005dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005de:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80005e0:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <HAL_InitTick+0xf0>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e6:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <HAL_InitTick+0xf0>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ec:	4b19      	ldr	r3, [pc, #100]	; (8000654 <HAL_InitTick+0xf0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80005f2:	4818      	ldr	r0, [pc, #96]	; (8000654 <HAL_InitTick+0xf0>)
 80005f4:	f001 f818 	bl	8001628 <HAL_TIM_Base_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80005fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000602:	2b00      	cmp	r3, #0
 8000604:	d11b      	bne.n	800063e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000606:	4813      	ldr	r0, [pc, #76]	; (8000654 <HAL_InitTick+0xf0>)
 8000608:	f001 f866 	bl	80016d8 <HAL_TIM_Base_Start_IT>
 800060c:	4603      	mov	r3, r0
 800060e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000612:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000616:	2b00      	cmp	r3, #0
 8000618:	d111      	bne.n	800063e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800061a:	201e      	movs	r0, #30
 800061c:	f000 fa0f 	bl	8000a3e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2b0f      	cmp	r3, #15
 8000624:	d808      	bhi.n	8000638 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000626:	2200      	movs	r2, #0
 8000628:	6879      	ldr	r1, [r7, #4]
 800062a:	201e      	movs	r0, #30
 800062c:	f000 f9eb 	bl	8000a06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000630:	4a0a      	ldr	r2, [pc, #40]	; (800065c <HAL_InitTick+0xf8>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6013      	str	r3, [r2, #0]
 8000636:	e002      	b.n	800063e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000638:	2301      	movs	r3, #1
 800063a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800063e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000642:	4618      	mov	r0, r3
 8000644:	3738      	adds	r7, #56	; 0x38
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40021000 	.word	0x40021000
 8000650:	431bde83 	.word	0x431bde83
 8000654:	20000388 	.word	0x20000388
 8000658:	40000800 	.word	0x40000800
 800065c:	20000004 	.word	0x20000004

08000660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <NMI_Handler+0x4>

08000666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <HardFault_Handler+0x4>

0800066c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <MemManage_Handler+0x4>

08000672 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000676:	e7fe      	b.n	8000676 <BusFault_Handler+0x4>

08000678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800067c:	e7fe      	b.n	800067c <UsageFault_Handler+0x4>

0800067e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
	...

0800068c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000690:	4802      	ldr	r0, [pc, #8]	; (800069c <TIM4_IRQHandler+0x10>)
 8000692:	f001 f873 	bl	800177c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000388 	.word	0x20000388

080006a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
 80006b0:	e00a      	b.n	80006c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006b2:	f3af 8000 	nop.w
 80006b6:	4601      	mov	r1, r0
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	1c5a      	adds	r2, r3, #1
 80006bc:	60ba      	str	r2, [r7, #8]
 80006be:	b2ca      	uxtb	r2, r1
 80006c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	3301      	adds	r3, #1
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	dbf0      	blt.n	80006b2 <_read+0x12>
  }

  return len;
 80006d0:	687b      	ldr	r3, [r7, #4]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3718      	adds	r7, #24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b086      	sub	sp, #24
 80006de:	af00      	add	r7, sp, #0
 80006e0:	60f8      	str	r0, [r7, #12]
 80006e2:	60b9      	str	r1, [r7, #8]
 80006e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
 80006ea:	e009      	b.n	8000700 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	1c5a      	adds	r2, r3, #1
 80006f0:	60ba      	str	r2, [r7, #8]
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fe99 	bl	800042c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	3301      	adds	r3, #1
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	697a      	ldr	r2, [r7, #20]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	429a      	cmp	r2, r3
 8000706:	dbf1      	blt.n	80006ec <_write+0x12>
//    ITM_SendChar(*ptr++);
  }
  return len;
 8000708:	687b      	ldr	r3, [r7, #4]
}
 800070a:	4618      	mov	r0, r3
 800070c:	3718      	adds	r7, #24
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <_close>:

int _close(int file)
{
 8000712:	b480      	push	{r7}
 8000714:	b083      	sub	sp, #12
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800071e:	4618      	mov	r0, r3
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000738:	605a      	str	r2, [r3, #4]
  return 0;
 800073a:	2300      	movs	r3, #0
}
 800073c:	4618      	mov	r0, r3
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr

08000746 <_isatty>:

int _isatty(int file)
{
 8000746:	b480      	push	{r7}
 8000748:	b083      	sub	sp, #12
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800074e:	2301      	movs	r3, #1
}
 8000750:	4618      	mov	r0, r3
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr

0800075a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800075a:	b480      	push	{r7}
 800075c:	b085      	sub	sp, #20
 800075e:	af00      	add	r7, sp, #0
 8000760:	60f8      	str	r0, [r7, #12]
 8000762:	60b9      	str	r1, [r7, #8]
 8000764:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000766:	2300      	movs	r3, #0
}
 8000768:	4618      	mov	r0, r3
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
	...

08000774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800077c:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <_sbrk+0x5c>)
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <_sbrk+0x60>)
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <_sbrk+0x64>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d102      	bne.n	8000796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <_sbrk+0x64>)
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <_sbrk+0x68>)
 8000794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <_sbrk+0x64>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4413      	add	r3, r2
 800079e:	693a      	ldr	r2, [r7, #16]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d207      	bcs.n	80007b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007a4:	f002 fccc 	bl	8003140 <__errno>
 80007a8:	4603      	mov	r3, r0
 80007aa:	220c      	movs	r2, #12
 80007ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ae:	f04f 33ff 	mov.w	r3, #4294967295
 80007b2:	e009      	b.n	80007c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <_sbrk+0x64>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ba:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <_sbrk+0x64>)
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4413      	add	r3, r2
 80007c2:	4a05      	ldr	r2, [pc, #20]	; (80007d8 <_sbrk+0x64>)
 80007c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007c6:	68fb      	ldr	r3, [r7, #12]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3718      	adds	r7, #24
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20005000 	.word	0x20005000
 80007d4:	00000400 	.word	0x00000400
 80007d8:	200003d0 	.word	0x200003d0
 80007dc:	20001138 	.word	0x20001138

080007e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ec:	480c      	ldr	r0, [pc, #48]	; (8000820 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007ee:	490d      	ldr	r1, [pc, #52]	; (8000824 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007f0:	4a0d      	ldr	r2, [pc, #52]	; (8000828 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f4:	e002      	b.n	80007fc <LoopCopyDataInit>

080007f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fa:	3304      	adds	r3, #4

080007fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000800:	d3f9      	bcc.n	80007f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000804:	4c0a      	ldr	r4, [pc, #40]	; (8000830 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000808:	e001      	b.n	800080e <LoopFillZerobss>

0800080a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800080c:	3204      	adds	r2, #4

0800080e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000810:	d3fb      	bcc.n	800080a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000812:	f7ff ffe5 	bl	80007e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000816:	f002 fd8f 	bl	8003338 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800081a:	f7ff fcb1 	bl	8000180 <main>
  bx lr
 800081e:	4770      	bx	lr
  ldr r0, =_sdata
 8000820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000824:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000828:	080043dc 	.word	0x080043dc
  ldr r2, =_sbss
 800082c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000830:	20001134 	.word	0x20001134

08000834 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000834:	e7fe      	b.n	8000834 <ADC1_2_IRQHandler>
	...

08000838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_Init+0x28>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a07      	ldr	r2, [pc, #28]	; (8000860 <HAL_Init+0x28>)
 8000842:	f043 0310 	orr.w	r3, r3, #16
 8000846:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000848:	2003      	movs	r0, #3
 800084a:	f000 f8d1 	bl	80009f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800084e:	200f      	movs	r0, #15
 8000850:	f7ff fe88 	bl	8000564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000854:	f7ff fe14 	bl	8000480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40022000 	.word	0x40022000

08000864 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <HAL_IncTick+0x1c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	461a      	mov	r2, r3
 800086e:	4b05      	ldr	r3, [pc, #20]	; (8000884 <HAL_IncTick+0x20>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4413      	add	r3, r2
 8000874:	4a03      	ldr	r2, [pc, #12]	; (8000884 <HAL_IncTick+0x20>)
 8000876:	6013      	str	r3, [r2, #0]
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	20000008 	.word	0x20000008
 8000884:	200003d4 	.word	0x200003d4

08000888 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  return uwTick;
 800088c:	4b02      	ldr	r3, [pc, #8]	; (8000898 <HAL_GetTick+0x10>)
 800088e:	681b      	ldr	r3, [r3, #0]
}
 8000890:	4618      	mov	r0, r3
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	200003d4 	.word	0x200003d4

0800089c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <__NVIC_SetPriorityGrouping+0x44>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008b2:	68ba      	ldr	r2, [r7, #8]
 80008b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008b8:	4013      	ands	r3, r2
 80008ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ce:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <__NVIC_SetPriorityGrouping+0x44>)
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	60d3      	str	r3, [r2, #12]
}
 80008d4:	bf00      	nop
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e8:	4b04      	ldr	r3, [pc, #16]	; (80008fc <__NVIC_GetPriorityGrouping+0x18>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	0a1b      	lsrs	r3, r3, #8
 80008ee:	f003 0307 	and.w	r3, r3, #7
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090e:	2b00      	cmp	r3, #0
 8000910:	db0b      	blt.n	800092a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	f003 021f 	and.w	r2, r3, #31
 8000918:	4906      	ldr	r1, [pc, #24]	; (8000934 <__NVIC_EnableIRQ+0x34>)
 800091a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091e:	095b      	lsrs	r3, r3, #5
 8000920:	2001      	movs	r0, #1
 8000922:	fa00 f202 	lsl.w	r2, r0, r2
 8000926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	e000e100 	.word	0xe000e100

08000938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	6039      	str	r1, [r7, #0]
 8000942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000948:	2b00      	cmp	r3, #0
 800094a:	db0a      	blt.n	8000962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	b2da      	uxtb	r2, r3
 8000950:	490c      	ldr	r1, [pc, #48]	; (8000984 <__NVIC_SetPriority+0x4c>)
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	0112      	lsls	r2, r2, #4
 8000958:	b2d2      	uxtb	r2, r2
 800095a:	440b      	add	r3, r1
 800095c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000960:	e00a      	b.n	8000978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4908      	ldr	r1, [pc, #32]	; (8000988 <__NVIC_SetPriority+0x50>)
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	f003 030f 	and.w	r3, r3, #15
 800096e:	3b04      	subs	r3, #4
 8000970:	0112      	lsls	r2, r2, #4
 8000972:	b2d2      	uxtb	r2, r2
 8000974:	440b      	add	r3, r1
 8000976:	761a      	strb	r2, [r3, #24]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000e100 	.word	0xe000e100
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800098c:	b480      	push	{r7}
 800098e:	b089      	sub	sp, #36	; 0x24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	f1c3 0307 	rsb	r3, r3, #7
 80009a6:	2b04      	cmp	r3, #4
 80009a8:	bf28      	it	cs
 80009aa:	2304      	movcs	r3, #4
 80009ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3304      	adds	r3, #4
 80009b2:	2b06      	cmp	r3, #6
 80009b4:	d902      	bls.n	80009bc <NVIC_EncodePriority+0x30>
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	3b03      	subs	r3, #3
 80009ba:	e000      	b.n	80009be <NVIC_EncodePriority+0x32>
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c0:	f04f 32ff 	mov.w	r2, #4294967295
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	43da      	mvns	r2, r3
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	401a      	ands	r2, r3
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d4:	f04f 31ff 	mov.w	r1, #4294967295
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	fa01 f303 	lsl.w	r3, r1, r3
 80009de:	43d9      	mvns	r1, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e4:	4313      	orrs	r3, r2
         );
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3724      	adds	r7, #36	; 0x24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f7ff ff4f 	bl	800089c <__NVIC_SetPriorityGrouping>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b086      	sub	sp, #24
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	60b9      	str	r1, [r7, #8]
 8000a10:	607a      	str	r2, [r7, #4]
 8000a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a18:	f7ff ff64 	bl	80008e4 <__NVIC_GetPriorityGrouping>
 8000a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	68b9      	ldr	r1, [r7, #8]
 8000a22:	6978      	ldr	r0, [r7, #20]
 8000a24:	f7ff ffb2 	bl	800098c <NVIC_EncodePriority>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a2e:	4611      	mov	r1, r2
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff81 	bl	8000938 <__NVIC_SetPriority>
}
 8000a36:	bf00      	nop
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ff57 	bl	8000900 <__NVIC_EnableIRQ>
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b08b      	sub	sp, #44	; 0x2c
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a6e:	e169      	b.n	8000d44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a70:	2201      	movs	r2, #1
 8000a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	69fa      	ldr	r2, [r7, #28]
 8000a80:	4013      	ands	r3, r2
 8000a82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	f040 8158 	bne.w	8000d3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	4a9a      	ldr	r2, [pc, #616]	; (8000cfc <HAL_GPIO_Init+0x2a0>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d05e      	beq.n	8000b56 <HAL_GPIO_Init+0xfa>
 8000a98:	4a98      	ldr	r2, [pc, #608]	; (8000cfc <HAL_GPIO_Init+0x2a0>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d875      	bhi.n	8000b8a <HAL_GPIO_Init+0x12e>
 8000a9e:	4a98      	ldr	r2, [pc, #608]	; (8000d00 <HAL_GPIO_Init+0x2a4>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d058      	beq.n	8000b56 <HAL_GPIO_Init+0xfa>
 8000aa4:	4a96      	ldr	r2, [pc, #600]	; (8000d00 <HAL_GPIO_Init+0x2a4>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d86f      	bhi.n	8000b8a <HAL_GPIO_Init+0x12e>
 8000aaa:	4a96      	ldr	r2, [pc, #600]	; (8000d04 <HAL_GPIO_Init+0x2a8>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d052      	beq.n	8000b56 <HAL_GPIO_Init+0xfa>
 8000ab0:	4a94      	ldr	r2, [pc, #592]	; (8000d04 <HAL_GPIO_Init+0x2a8>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d869      	bhi.n	8000b8a <HAL_GPIO_Init+0x12e>
 8000ab6:	4a94      	ldr	r2, [pc, #592]	; (8000d08 <HAL_GPIO_Init+0x2ac>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d04c      	beq.n	8000b56 <HAL_GPIO_Init+0xfa>
 8000abc:	4a92      	ldr	r2, [pc, #584]	; (8000d08 <HAL_GPIO_Init+0x2ac>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d863      	bhi.n	8000b8a <HAL_GPIO_Init+0x12e>
 8000ac2:	4a92      	ldr	r2, [pc, #584]	; (8000d0c <HAL_GPIO_Init+0x2b0>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d046      	beq.n	8000b56 <HAL_GPIO_Init+0xfa>
 8000ac8:	4a90      	ldr	r2, [pc, #576]	; (8000d0c <HAL_GPIO_Init+0x2b0>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d85d      	bhi.n	8000b8a <HAL_GPIO_Init+0x12e>
 8000ace:	2b12      	cmp	r3, #18
 8000ad0:	d82a      	bhi.n	8000b28 <HAL_GPIO_Init+0xcc>
 8000ad2:	2b12      	cmp	r3, #18
 8000ad4:	d859      	bhi.n	8000b8a <HAL_GPIO_Init+0x12e>
 8000ad6:	a201      	add	r2, pc, #4	; (adr r2, 8000adc <HAL_GPIO_Init+0x80>)
 8000ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000adc:	08000b57 	.word	0x08000b57
 8000ae0:	08000b31 	.word	0x08000b31
 8000ae4:	08000b43 	.word	0x08000b43
 8000ae8:	08000b85 	.word	0x08000b85
 8000aec:	08000b8b 	.word	0x08000b8b
 8000af0:	08000b8b 	.word	0x08000b8b
 8000af4:	08000b8b 	.word	0x08000b8b
 8000af8:	08000b8b 	.word	0x08000b8b
 8000afc:	08000b8b 	.word	0x08000b8b
 8000b00:	08000b8b 	.word	0x08000b8b
 8000b04:	08000b8b 	.word	0x08000b8b
 8000b08:	08000b8b 	.word	0x08000b8b
 8000b0c:	08000b8b 	.word	0x08000b8b
 8000b10:	08000b8b 	.word	0x08000b8b
 8000b14:	08000b8b 	.word	0x08000b8b
 8000b18:	08000b8b 	.word	0x08000b8b
 8000b1c:	08000b8b 	.word	0x08000b8b
 8000b20:	08000b39 	.word	0x08000b39
 8000b24:	08000b4d 	.word	0x08000b4d
 8000b28:	4a79      	ldr	r2, [pc, #484]	; (8000d10 <HAL_GPIO_Init+0x2b4>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d013      	beq.n	8000b56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b2e:	e02c      	b.n	8000b8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	623b      	str	r3, [r7, #32]
          break;
 8000b36:	e029      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	623b      	str	r3, [r7, #32]
          break;
 8000b40:	e024      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	3308      	adds	r3, #8
 8000b48:	623b      	str	r3, [r7, #32]
          break;
 8000b4a:	e01f      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	330c      	adds	r3, #12
 8000b52:	623b      	str	r3, [r7, #32]
          break;
 8000b54:	e01a      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d102      	bne.n	8000b64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b5e:	2304      	movs	r3, #4
 8000b60:	623b      	str	r3, [r7, #32]
          break;
 8000b62:	e013      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d105      	bne.n	8000b78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	69fa      	ldr	r2, [r7, #28]
 8000b74:	611a      	str	r2, [r3, #16]
          break;
 8000b76:	e009      	b.n	8000b8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b78:	2308      	movs	r3, #8
 8000b7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	69fa      	ldr	r2, [r7, #28]
 8000b80:	615a      	str	r2, [r3, #20]
          break;
 8000b82:	e003      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
          break;
 8000b88:	e000      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          break;
 8000b8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	2bff      	cmp	r3, #255	; 0xff
 8000b90:	d801      	bhi.n	8000b96 <HAL_GPIO_Init+0x13a>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	e001      	b.n	8000b9a <HAL_GPIO_Init+0x13e>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	2bff      	cmp	r3, #255	; 0xff
 8000ba0:	d802      	bhi.n	8000ba8 <HAL_GPIO_Init+0x14c>
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	e002      	b.n	8000bae <HAL_GPIO_Init+0x152>
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000baa:	3b08      	subs	r3, #8
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	210f      	movs	r1, #15
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	6a39      	ldr	r1, [r7, #32]
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc8:	431a      	orrs	r2, r3
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f000 80b1 	beq.w	8000d3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bdc:	4b4d      	ldr	r3, [pc, #308]	; (8000d14 <HAL_GPIO_Init+0x2b8>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a4c      	ldr	r2, [pc, #304]	; (8000d14 <HAL_GPIO_Init+0x2b8>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b4a      	ldr	r3, [pc, #296]	; (8000d14 <HAL_GPIO_Init+0x2b8>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bf4:	4a48      	ldr	r2, [pc, #288]	; (8000d18 <HAL_GPIO_Init+0x2bc>)
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf8:	089b      	lsrs	r3, r3, #2
 8000bfa:	3302      	adds	r3, #2
 8000bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c04:	f003 0303 	and.w	r3, r3, #3
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	220f      	movs	r2, #15
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	43db      	mvns	r3, r3
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a40      	ldr	r2, [pc, #256]	; (8000d1c <HAL_GPIO_Init+0x2c0>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d013      	beq.n	8000c48 <HAL_GPIO_Init+0x1ec>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a3f      	ldr	r2, [pc, #252]	; (8000d20 <HAL_GPIO_Init+0x2c4>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d00d      	beq.n	8000c44 <HAL_GPIO_Init+0x1e8>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a3e      	ldr	r2, [pc, #248]	; (8000d24 <HAL_GPIO_Init+0x2c8>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d007      	beq.n	8000c40 <HAL_GPIO_Init+0x1e4>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a3d      	ldr	r2, [pc, #244]	; (8000d28 <HAL_GPIO_Init+0x2cc>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d101      	bne.n	8000c3c <HAL_GPIO_Init+0x1e0>
 8000c38:	2303      	movs	r3, #3
 8000c3a:	e006      	b.n	8000c4a <HAL_GPIO_Init+0x1ee>
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	e004      	b.n	8000c4a <HAL_GPIO_Init+0x1ee>
 8000c40:	2302      	movs	r3, #2
 8000c42:	e002      	b.n	8000c4a <HAL_GPIO_Init+0x1ee>
 8000c44:	2301      	movs	r3, #1
 8000c46:	e000      	b.n	8000c4a <HAL_GPIO_Init+0x1ee>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c4c:	f002 0203 	and.w	r2, r2, #3
 8000c50:	0092      	lsls	r2, r2, #2
 8000c52:	4093      	lsls	r3, r2
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c5a:	492f      	ldr	r1, [pc, #188]	; (8000d18 <HAL_GPIO_Init+0x2bc>)
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5e:	089b      	lsrs	r3, r3, #2
 8000c60:	3302      	adds	r3, #2
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d006      	beq.n	8000c82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c74:	4b2d      	ldr	r3, [pc, #180]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	492c      	ldr	r1, [pc, #176]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	600b      	str	r3, [r1, #0]
 8000c80:	e006      	b.n	8000c90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c82:	4b2a      	ldr	r3, [pc, #168]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	4928      	ldr	r1, [pc, #160]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d006      	beq.n	8000caa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c9c:	4b23      	ldr	r3, [pc, #140]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000c9e:	685a      	ldr	r2, [r3, #4]
 8000ca0:	4922      	ldr	r1, [pc, #136]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	604b      	str	r3, [r1, #4]
 8000ca8:	e006      	b.n	8000cb8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000caa:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cac:	685a      	ldr	r2, [r3, #4]
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	491e      	ldr	r1, [pc, #120]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d006      	beq.n	8000cd2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	4918      	ldr	r1, [pc, #96]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	608b      	str	r3, [r1, #8]
 8000cd0:	e006      	b.n	8000ce0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cd4:	689a      	ldr	r2, [r3, #8]
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	4914      	ldr	r1, [pc, #80]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cdc:	4013      	ands	r3, r2
 8000cde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d021      	beq.n	8000d30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cee:	68da      	ldr	r2, [r3, #12]
 8000cf0:	490e      	ldr	r1, [pc, #56]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	60cb      	str	r3, [r1, #12]
 8000cf8:	e021      	b.n	8000d3e <HAL_GPIO_Init+0x2e2>
 8000cfa:	bf00      	nop
 8000cfc:	10320000 	.word	0x10320000
 8000d00:	10310000 	.word	0x10310000
 8000d04:	10220000 	.word	0x10220000
 8000d08:	10210000 	.word	0x10210000
 8000d0c:	10120000 	.word	0x10120000
 8000d10:	10110000 	.word	0x10110000
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010000 	.word	0x40010000
 8000d1c:	40010800 	.word	0x40010800
 8000d20:	40010c00 	.word	0x40010c00
 8000d24:	40011000 	.word	0x40011000
 8000d28:	40011400 	.word	0x40011400
 8000d2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d30:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <HAL_GPIO_Init+0x304>)
 8000d32:	68da      	ldr	r2, [r3, #12]
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	43db      	mvns	r3, r3
 8000d38:	4909      	ldr	r1, [pc, #36]	; (8000d60 <HAL_GPIO_Init+0x304>)
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	3301      	adds	r3, #1
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f47f ae8e 	bne.w	8000a70 <HAL_GPIO_Init+0x14>
  }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	372c      	adds	r7, #44	; 0x2c
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	40010400 	.word	0x40010400

08000d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	807b      	strh	r3, [r7, #2]
 8000d70:	4613      	mov	r3, r2
 8000d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d74:	787b      	ldrb	r3, [r7, #1]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d003      	beq.n	8000d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d7a:	887a      	ldrh	r2, [r7, #2]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d80:	e003      	b.n	8000d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d82:	887b      	ldrh	r3, [r7, #2]
 8000d84:	041a      	lsls	r2, r3, #16
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	611a      	str	r2, [r3, #16]
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr

08000d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e272      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 8087 	beq.w	8000ec2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000db4:	4b92      	ldr	r3, [pc, #584]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 030c 	and.w	r3, r3, #12
 8000dbc:	2b04      	cmp	r3, #4
 8000dbe:	d00c      	beq.n	8000dda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dc0:	4b8f      	ldr	r3, [pc, #572]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 030c 	and.w	r3, r3, #12
 8000dc8:	2b08      	cmp	r3, #8
 8000dca:	d112      	bne.n	8000df2 <HAL_RCC_OscConfig+0x5e>
 8000dcc:	4b8c      	ldr	r3, [pc, #560]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dd8:	d10b      	bne.n	8000df2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dda:	4b89      	ldr	r3, [pc, #548]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d06c      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x12c>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d168      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e24c      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dfa:	d106      	bne.n	8000e0a <HAL_RCC_OscConfig+0x76>
 8000dfc:	4b80      	ldr	r3, [pc, #512]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a7f      	ldr	r2, [pc, #508]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	e02e      	b.n	8000e68 <HAL_RCC_OscConfig+0xd4>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10c      	bne.n	8000e2c <HAL_RCC_OscConfig+0x98>
 8000e12:	4b7b      	ldr	r3, [pc, #492]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a7a      	ldr	r2, [pc, #488]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	4b78      	ldr	r3, [pc, #480]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a77      	ldr	r2, [pc, #476]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	e01d      	b.n	8000e68 <HAL_RCC_OscConfig+0xd4>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e34:	d10c      	bne.n	8000e50 <HAL_RCC_OscConfig+0xbc>
 8000e36:	4b72      	ldr	r3, [pc, #456]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a71      	ldr	r2, [pc, #452]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e40:	6013      	str	r3, [r2, #0]
 8000e42:	4b6f      	ldr	r3, [pc, #444]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a6e      	ldr	r2, [pc, #440]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	e00b      	b.n	8000e68 <HAL_RCC_OscConfig+0xd4>
 8000e50:	4b6b      	ldr	r3, [pc, #428]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a6a      	ldr	r2, [pc, #424]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e5a:	6013      	str	r3, [r2, #0]
 8000e5c:	4b68      	ldr	r3, [pc, #416]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a67      	ldr	r2, [pc, #412]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d013      	beq.n	8000e98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e70:	f7ff fd0a 	bl	8000888 <HAL_GetTick>
 8000e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e76:	e008      	b.n	8000e8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e78:	f7ff fd06 	bl	8000888 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b64      	cmp	r3, #100	; 0x64
 8000e84:	d901      	bls.n	8000e8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e200      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e8a:	4b5d      	ldr	r3, [pc, #372]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d0f0      	beq.n	8000e78 <HAL_RCC_OscConfig+0xe4>
 8000e96:	e014      	b.n	8000ec2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e98:	f7ff fcf6 	bl	8000888 <HAL_GetTick>
 8000e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e9e:	e008      	b.n	8000eb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea0:	f7ff fcf2 	bl	8000888 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b64      	cmp	r3, #100	; 0x64
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e1ec      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eb2:	4b53      	ldr	r3, [pc, #332]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1f0      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x10c>
 8000ebe:	e000      	b.n	8000ec2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d063      	beq.n	8000f96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ece:	4b4c      	ldr	r3, [pc, #304]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 030c 	and.w	r3, r3, #12
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d00b      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000eda:	4b49      	ldr	r3, [pc, #292]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 030c 	and.w	r3, r3, #12
 8000ee2:	2b08      	cmp	r3, #8
 8000ee4:	d11c      	bne.n	8000f20 <HAL_RCC_OscConfig+0x18c>
 8000ee6:	4b46      	ldr	r3, [pc, #280]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d116      	bne.n	8000f20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ef2:	4b43      	ldr	r3, [pc, #268]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d005      	beq.n	8000f0a <HAL_RCC_OscConfig+0x176>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d001      	beq.n	8000f0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e1c0      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f0a:	4b3d      	ldr	r3, [pc, #244]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	4939      	ldr	r1, [pc, #228]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f1e:	e03a      	b.n	8000f96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	691b      	ldr	r3, [r3, #16]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d020      	beq.n	8000f6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f28:	4b36      	ldr	r3, [pc, #216]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2e:	f7ff fcab 	bl	8000888 <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f34:	e008      	b.n	8000f48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f36:	f7ff fca7 	bl	8000888 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e1a1      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f48:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d0f0      	beq.n	8000f36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f54:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	695b      	ldr	r3, [r3, #20]
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	4927      	ldr	r1, [pc, #156]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	4313      	orrs	r3, r2
 8000f66:	600b      	str	r3, [r1, #0]
 8000f68:	e015      	b.n	8000f96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f6a:	4b26      	ldr	r3, [pc, #152]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f70:	f7ff fc8a 	bl	8000888 <HAL_GetTick>
 8000f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f76:	e008      	b.n	8000f8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f78:	f7ff fc86 	bl	8000888 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d901      	bls.n	8000f8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e180      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1f0      	bne.n	8000f78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0308 	and.w	r3, r3, #8
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d03a      	beq.n	8001018 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d019      	beq.n	8000fde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000faa:	4b17      	ldr	r3, [pc, #92]	; (8001008 <HAL_RCC_OscConfig+0x274>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb0:	f7ff fc6a 	bl	8000888 <HAL_GetTick>
 8000fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fb6:	e008      	b.n	8000fca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb8:	f7ff fc66 	bl	8000888 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d901      	bls.n	8000fca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e160      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fca:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d0f0      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f000 fb08 	bl	80015ec <RCC_Delay>
 8000fdc:	e01c      	b.n	8001018 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_RCC_OscConfig+0x274>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe4:	f7ff fc50 	bl	8000888 <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fea:	e00f      	b.n	800100c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fec:	f7ff fc4c 	bl	8000888 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d908      	bls.n	800100c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e146      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
 8000ffe:	bf00      	nop
 8001000:	40021000 	.word	0x40021000
 8001004:	42420000 	.word	0x42420000
 8001008:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800100c:	4b92      	ldr	r3, [pc, #584]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800100e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1e9      	bne.n	8000fec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0304 	and.w	r3, r3, #4
 8001020:	2b00      	cmp	r3, #0
 8001022:	f000 80a6 	beq.w	8001172 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001026:	2300      	movs	r3, #0
 8001028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800102a:	4b8b      	ldr	r3, [pc, #556]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10d      	bne.n	8001052 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	4b88      	ldr	r3, [pc, #544]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	4a87      	ldr	r2, [pc, #540]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800103c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001040:	61d3      	str	r3, [r2, #28]
 8001042:	4b85      	ldr	r3, [pc, #532]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800104e:	2301      	movs	r3, #1
 8001050:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001052:	4b82      	ldr	r3, [pc, #520]	; (800125c <HAL_RCC_OscConfig+0x4c8>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105a:	2b00      	cmp	r3, #0
 800105c:	d118      	bne.n	8001090 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800105e:	4b7f      	ldr	r3, [pc, #508]	; (800125c <HAL_RCC_OscConfig+0x4c8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a7e      	ldr	r2, [pc, #504]	; (800125c <HAL_RCC_OscConfig+0x4c8>)
 8001064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800106a:	f7ff fc0d 	bl	8000888 <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001072:	f7ff fc09 	bl	8000888 <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b64      	cmp	r3, #100	; 0x64
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e103      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001084:	4b75      	ldr	r3, [pc, #468]	; (800125c <HAL_RCC_OscConfig+0x4c8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0f0      	beq.n	8001072 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d106      	bne.n	80010a6 <HAL_RCC_OscConfig+0x312>
 8001098:	4b6f      	ldr	r3, [pc, #444]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	4a6e      	ldr	r2, [pc, #440]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6213      	str	r3, [r2, #32]
 80010a4:	e02d      	b.n	8001102 <HAL_RCC_OscConfig+0x36e>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10c      	bne.n	80010c8 <HAL_RCC_OscConfig+0x334>
 80010ae:	4b6a      	ldr	r3, [pc, #424]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	4a69      	ldr	r2, [pc, #420]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010b4:	f023 0301 	bic.w	r3, r3, #1
 80010b8:	6213      	str	r3, [r2, #32]
 80010ba:	4b67      	ldr	r3, [pc, #412]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	4a66      	ldr	r2, [pc, #408]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010c0:	f023 0304 	bic.w	r3, r3, #4
 80010c4:	6213      	str	r3, [r2, #32]
 80010c6:	e01c      	b.n	8001102 <HAL_RCC_OscConfig+0x36e>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	2b05      	cmp	r3, #5
 80010ce:	d10c      	bne.n	80010ea <HAL_RCC_OscConfig+0x356>
 80010d0:	4b61      	ldr	r3, [pc, #388]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	4a60      	ldr	r2, [pc, #384]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	6213      	str	r3, [r2, #32]
 80010dc:	4b5e      	ldr	r3, [pc, #376]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	4a5d      	ldr	r2, [pc, #372]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	6213      	str	r3, [r2, #32]
 80010e8:	e00b      	b.n	8001102 <HAL_RCC_OscConfig+0x36e>
 80010ea:	4b5b      	ldr	r3, [pc, #364]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	6a1b      	ldr	r3, [r3, #32]
 80010ee:	4a5a      	ldr	r2, [pc, #360]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010f0:	f023 0301 	bic.w	r3, r3, #1
 80010f4:	6213      	str	r3, [r2, #32]
 80010f6:	4b58      	ldr	r3, [pc, #352]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	6a1b      	ldr	r3, [r3, #32]
 80010fa:	4a57      	ldr	r2, [pc, #348]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010fc:	f023 0304 	bic.w	r3, r3, #4
 8001100:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d015      	beq.n	8001136 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110a:	f7ff fbbd 	bl	8000888 <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001110:	e00a      	b.n	8001128 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001112:	f7ff fbb9 	bl	8000888 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001120:	4293      	cmp	r3, r2
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e0b1      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001128:	4b4b      	ldr	r3, [pc, #300]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0ee      	beq.n	8001112 <HAL_RCC_OscConfig+0x37e>
 8001134:	e014      	b.n	8001160 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001136:	f7ff fba7 	bl	8000888 <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800113c:	e00a      	b.n	8001154 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800113e:	f7ff fba3 	bl	8000888 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	f241 3288 	movw	r2, #5000	; 0x1388
 800114c:	4293      	cmp	r3, r2
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e09b      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001154:	4b40      	ldr	r3, [pc, #256]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1ee      	bne.n	800113e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001160:	7dfb      	ldrb	r3, [r7, #23]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d105      	bne.n	8001172 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001166:	4b3c      	ldr	r3, [pc, #240]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	4a3b      	ldr	r2, [pc, #236]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800116c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001170:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 8087 	beq.w	800128a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800117c:	4b36      	ldr	r3, [pc, #216]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 030c 	and.w	r3, r3, #12
 8001184:	2b08      	cmp	r3, #8
 8001186:	d061      	beq.n	800124c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69db      	ldr	r3, [r3, #28]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d146      	bne.n	800121e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001190:	4b33      	ldr	r3, [pc, #204]	; (8001260 <HAL_RCC_OscConfig+0x4cc>)
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001196:	f7ff fb77 	bl	8000888 <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800119e:	f7ff fb73 	bl	8000888 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e06d      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011b0:	4b29      	ldr	r3, [pc, #164]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1f0      	bne.n	800119e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c4:	d108      	bne.n	80011d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011c6:	4b24      	ldr	r3, [pc, #144]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	4921      	ldr	r1, [pc, #132]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011d8:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a19      	ldr	r1, [r3, #32]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e8:	430b      	orrs	r3, r1
 80011ea:	491b      	ldr	r1, [pc, #108]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80011ec:	4313      	orrs	r3, r2
 80011ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <HAL_RCC_OscConfig+0x4cc>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f6:	f7ff fb47 	bl	8000888 <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011fe:	f7ff fb43 	bl	8000888 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e03d      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0f0      	beq.n	80011fe <HAL_RCC_OscConfig+0x46a>
 800121c:	e035      	b.n	800128a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <HAL_RCC_OscConfig+0x4cc>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001224:	f7ff fb30 	bl	8000888 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800122c:	f7ff fb2c 	bl	8000888 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e026      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f0      	bne.n	800122c <HAL_RCC_OscConfig+0x498>
 800124a:	e01e      	b.n	800128a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d107      	bne.n	8001264 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e019      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
 8001258:	40021000 	.word	0x40021000
 800125c:	40007000 	.word	0x40007000
 8001260:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_RCC_OscConfig+0x500>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	429a      	cmp	r2, r3
 8001276:	d106      	bne.n	8001286 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001282:	429a      	cmp	r2, r3
 8001284:	d001      	beq.n	800128a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40021000 	.word	0x40021000

08001298 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e0d0      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012ac:	4b6a      	ldr	r3, [pc, #424]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0307 	and.w	r3, r3, #7
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d910      	bls.n	80012dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ba:	4b67      	ldr	r3, [pc, #412]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f023 0207 	bic.w	r2, r3, #7
 80012c2:	4965      	ldr	r1, [pc, #404]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ca:	4b63      	ldr	r3, [pc, #396]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d001      	beq.n	80012dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e0b8      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d020      	beq.n	800132a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012f4:	4b59      	ldr	r3, [pc, #356]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	4a58      	ldr	r2, [pc, #352]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 80012fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	2b00      	cmp	r3, #0
 800130a:	d005      	beq.n	8001318 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800130c:	4b53      	ldr	r3, [pc, #332]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	4a52      	ldr	r2, [pc, #328]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001312:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001316:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001318:	4b50      	ldr	r3, [pc, #320]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	494d      	ldr	r1, [pc, #308]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001326:	4313      	orrs	r3, r2
 8001328:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d040      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d107      	bne.n	800134e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133e:	4b47      	ldr	r3, [pc, #284]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d115      	bne.n	8001376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e07f      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d107      	bne.n	8001366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001356:	4b41      	ldr	r3, [pc, #260]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d109      	bne.n	8001376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e073      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001366:	4b3d      	ldr	r3, [pc, #244]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e06b      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001376:	4b39      	ldr	r3, [pc, #228]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f023 0203 	bic.w	r2, r3, #3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	4936      	ldr	r1, [pc, #216]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001384:	4313      	orrs	r3, r2
 8001386:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001388:	f7ff fa7e 	bl	8000888 <HAL_GetTick>
 800138c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138e:	e00a      	b.n	80013a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001390:	f7ff fa7a 	bl	8000888 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	f241 3288 	movw	r2, #5000	; 0x1388
 800139e:	4293      	cmp	r3, r2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e053      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013a6:	4b2d      	ldr	r3, [pc, #180]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 020c 	and.w	r2, r3, #12
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d1eb      	bne.n	8001390 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013b8:	4b27      	ldr	r3, [pc, #156]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d210      	bcs.n	80013e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c6:	4b24      	ldr	r3, [pc, #144]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 0207 	bic.w	r2, r3, #7
 80013ce:	4922      	ldr	r1, [pc, #136]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d001      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e032      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d008      	beq.n	8001406 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013f4:	4b19      	ldr	r3, [pc, #100]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	4916      	ldr	r1, [pc, #88]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	4313      	orrs	r3, r2
 8001404:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b00      	cmp	r3, #0
 8001410:	d009      	beq.n	8001426 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	490e      	ldr	r1, [pc, #56]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001422:	4313      	orrs	r3, r2
 8001424:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001426:	f000 f821 	bl	800146c <HAL_RCC_GetSysClockFreq>
 800142a:	4602      	mov	r2, r0
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	490a      	ldr	r1, [pc, #40]	; (8001460 <HAL_RCC_ClockConfig+0x1c8>)
 8001438:	5ccb      	ldrb	r3, [r1, r3]
 800143a:	fa22 f303 	lsr.w	r3, r2, r3
 800143e:	4a09      	ldr	r2, [pc, #36]	; (8001464 <HAL_RCC_ClockConfig+0x1cc>)
 8001440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_RCC_ClockConfig+0x1d0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f88c 	bl	8000564 <HAL_InitTick>

  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40022000 	.word	0x40022000
 800145c:	40021000 	.word	0x40021000
 8001460:	08004324 	.word	0x08004324
 8001464:	20000000 	.word	0x20000000
 8001468:	20000004 	.word	0x20000004

0800146c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800146c:	b490      	push	{r4, r7}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001472:	4b29      	ldr	r3, [pc, #164]	; (8001518 <HAL_RCC_GetSysClockFreq+0xac>)
 8001474:	1d3c      	adds	r4, r7, #4
 8001476:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001478:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800147c:	f240 2301 	movw	r3, #513	; 0x201
 8001480:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	d002      	beq.n	80014ac <HAL_RCC_GetSysClockFreq+0x40>
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d003      	beq.n	80014b2 <HAL_RCC_GetSysClockFreq+0x46>
 80014aa:	e02b      	b.n	8001504 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014ac:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014ae:	623b      	str	r3, [r7, #32]
      break;
 80014b0:	e02b      	b.n	800150a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	0c9b      	lsrs	r3, r3, #18
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	3328      	adds	r3, #40	; 0x28
 80014bc:	443b      	add	r3, r7
 80014be:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80014c2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d012      	beq.n	80014f4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <HAL_RCC_GetSysClockFreq+0xb0>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	0c5b      	lsrs	r3, r3, #17
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	3328      	adds	r3, #40	; 0x28
 80014da:	443b      	add	r3, r7
 80014dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014e6:	fb03 f202 	mul.w	r2, r3, r2
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
 80014f2:	e004      	b.n	80014fe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014f8:	fb02 f303 	mul.w	r3, r2, r3
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	623b      	str	r3, [r7, #32]
      break;
 8001502:	e002      	b.n	800150a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001506:	623b      	str	r3, [r7, #32]
      break;
 8001508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800150a:	6a3b      	ldr	r3, [r7, #32]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3728      	adds	r7, #40	; 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bc90      	pop	{r4, r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	0800430c 	.word	0x0800430c
 800151c:	40021000 	.word	0x40021000
 8001520:	007a1200 	.word	0x007a1200
 8001524:	003d0900 	.word	0x003d0900

08001528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800152c:	4b02      	ldr	r3, [pc, #8]	; (8001538 <HAL_RCC_GetHCLKFreq+0x10>)
 800152e:	681b      	ldr	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	20000000 	.word	0x20000000

0800153c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001540:	f7ff fff2 	bl	8001528 <HAL_RCC_GetHCLKFreq>
 8001544:	4602      	mov	r2, r0
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	0a1b      	lsrs	r3, r3, #8
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	4903      	ldr	r1, [pc, #12]	; (8001560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001552:	5ccb      	ldrb	r3, [r1, r3]
 8001554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001558:	4618      	mov	r0, r3
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40021000 	.word	0x40021000
 8001560:	08004334 	.word	0x08004334

08001564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001568:	f7ff ffde 	bl	8001528 <HAL_RCC_GetHCLKFreq>
 800156c:	4602      	mov	r2, r0
 800156e:	4b05      	ldr	r3, [pc, #20]	; (8001584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	0adb      	lsrs	r3, r3, #11
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	4903      	ldr	r1, [pc, #12]	; (8001588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800157a:	5ccb      	ldrb	r3, [r1, r3]
 800157c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001580:	4618      	mov	r0, r3
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40021000 	.word	0x40021000
 8001588:	08004334 	.word	0x08004334

0800158c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	220f      	movs	r2, #15
 800159a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <HAL_RCC_GetClockConfig+0x58>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0203 	and.w	r2, r3, #3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015a8:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <HAL_RCC_GetClockConfig+0x58>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <HAL_RCC_GetClockConfig+0x58>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <HAL_RCC_GetClockConfig+0x58>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	08db      	lsrs	r3, r3, #3
 80015c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_RCC_GetClockConfig+0x5c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0207 	and.w	r2, r3, #7
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40022000 	.word	0x40022000

080015ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015f4:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <RCC_Delay+0x34>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <RCC_Delay+0x38>)
 80015fa:	fba2 2303 	umull	r2, r3, r2, r3
 80015fe:	0a5b      	lsrs	r3, r3, #9
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	fb02 f303 	mul.w	r3, r2, r3
 8001606:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001608:	bf00      	nop
  }
  while (Delay --);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	1e5a      	subs	r2, r3, #1
 800160e:	60fa      	str	r2, [r7, #12]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f9      	bne.n	8001608 <RCC_Delay+0x1c>
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	20000000 	.word	0x20000000
 8001624:	10624dd3 	.word	0x10624dd3

08001628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e041      	b.n	80016be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d106      	bne.n	8001654 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f839 	bl	80016c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2202      	movs	r2, #2
 8001658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3304      	adds	r3, #4
 8001664:	4619      	mov	r1, r3
 8001666:	4610      	mov	r0, r2
 8001668:	f000 f9b4 	bl	80019d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d001      	beq.n	80016f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e03a      	b.n	8001766 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2202      	movs	r2, #2
 80016f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68da      	ldr	r2, [r3, #12]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f042 0201 	orr.w	r2, r2, #1
 8001706:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a18      	ldr	r2, [pc, #96]	; (8001770 <HAL_TIM_Base_Start_IT+0x98>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d00e      	beq.n	8001730 <HAL_TIM_Base_Start_IT+0x58>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800171a:	d009      	beq.n	8001730 <HAL_TIM_Base_Start_IT+0x58>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a14      	ldr	r2, [pc, #80]	; (8001774 <HAL_TIM_Base_Start_IT+0x9c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d004      	beq.n	8001730 <HAL_TIM_Base_Start_IT+0x58>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a13      	ldr	r2, [pc, #76]	; (8001778 <HAL_TIM_Base_Start_IT+0xa0>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d111      	bne.n	8001754 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2b06      	cmp	r3, #6
 8001740:	d010      	beq.n	8001764 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f042 0201 	orr.w	r2, r2, #1
 8001750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001752:	e007      	b.n	8001764 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0201 	orr.w	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	40012c00 	.word	0x40012c00
 8001774:	40000400 	.word	0x40000400
 8001778:	40000800 	.word	0x40000800

0800177c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b02      	cmp	r3, #2
 8001790:	d122      	bne.n	80017d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b02      	cmp	r3, #2
 800179e:	d11b      	bne.n	80017d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f06f 0202 	mvn.w	r2, #2
 80017a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f8ed 	bl	800199e <HAL_TIM_IC_CaptureCallback>
 80017c4:	e005      	b.n	80017d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f8e0 	bl	800198c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 f8ef 	bl	80019b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	d122      	bne.n	800182c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	2b04      	cmp	r3, #4
 80017f2:	d11b      	bne.n	800182c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f06f 0204 	mvn.w	r2, #4
 80017fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2202      	movs	r2, #2
 8001802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f8c3 	bl	800199e <HAL_TIM_IC_CaptureCallback>
 8001818:	e005      	b.n	8001826 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f8b6 	bl	800198c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 f8c5 	bl	80019b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b08      	cmp	r3, #8
 8001838:	d122      	bne.n	8001880 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	2b08      	cmp	r3, #8
 8001846:	d11b      	bne.n	8001880 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f06f 0208 	mvn.w	r2, #8
 8001850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2204      	movs	r2, #4
 8001856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f899 	bl	800199e <HAL_TIM_IC_CaptureCallback>
 800186c:	e005      	b.n	800187a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f88c 	bl	800198c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 f89b 	bl	80019b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	f003 0310 	and.w	r3, r3, #16
 800188a:	2b10      	cmp	r3, #16
 800188c:	d122      	bne.n	80018d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	2b10      	cmp	r3, #16
 800189a:	d11b      	bne.n	80018d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f06f 0210 	mvn.w	r2, #16
 80018a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2208      	movs	r2, #8
 80018aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f86f 	bl	800199e <HAL_TIM_IC_CaptureCallback>
 80018c0:	e005      	b.n	80018ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f862 	bl	800198c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 f871 	bl	80019b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d10e      	bne.n	8001900 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d107      	bne.n	8001900 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f06f 0201 	mvn.w	r2, #1
 80018f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7fe fda8 	bl	8000450 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800190a:	2b80      	cmp	r3, #128	; 0x80
 800190c:	d10e      	bne.n	800192c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001918:	2b80      	cmp	r3, #128	; 0x80
 800191a:	d107      	bne.n	800192c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f8bf 	bl	8001aaa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001936:	2b40      	cmp	r3, #64	; 0x40
 8001938:	d10e      	bne.n	8001958 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001944:	2b40      	cmp	r3, #64	; 0x40
 8001946:	d107      	bne.n	8001958 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f835 	bl	80019c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	f003 0320 	and.w	r3, r3, #32
 8001962:	2b20      	cmp	r3, #32
 8001964:	d10e      	bne.n	8001984 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	f003 0320 	and.w	r3, r3, #32
 8001970:	2b20      	cmp	r3, #32
 8001972:	d107      	bne.n	8001984 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f06f 0220 	mvn.w	r2, #32
 800197c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f88a 	bl	8001a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a29      	ldr	r2, [pc, #164]	; (8001a8c <TIM_Base_SetConfig+0xb8>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d00b      	beq.n	8001a04 <TIM_Base_SetConfig+0x30>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019f2:	d007      	beq.n	8001a04 <TIM_Base_SetConfig+0x30>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a26      	ldr	r2, [pc, #152]	; (8001a90 <TIM_Base_SetConfig+0xbc>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d003      	beq.n	8001a04 <TIM_Base_SetConfig+0x30>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a25      	ldr	r2, [pc, #148]	; (8001a94 <TIM_Base_SetConfig+0xc0>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d108      	bne.n	8001a16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a1c      	ldr	r2, [pc, #112]	; (8001a8c <TIM_Base_SetConfig+0xb8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d00b      	beq.n	8001a36 <TIM_Base_SetConfig+0x62>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a24:	d007      	beq.n	8001a36 <TIM_Base_SetConfig+0x62>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a19      	ldr	r2, [pc, #100]	; (8001a90 <TIM_Base_SetConfig+0xbc>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d003      	beq.n	8001a36 <TIM_Base_SetConfig+0x62>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a18      	ldr	r2, [pc, #96]	; (8001a94 <TIM_Base_SetConfig+0xc0>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d108      	bne.n	8001a48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a07      	ldr	r2, [pc, #28]	; (8001a8c <TIM_Base_SetConfig+0xb8>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d103      	bne.n	8001a7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	615a      	str	r2, [r3, #20]
}
 8001a82:	bf00      	nop
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	40012c00 	.word	0x40012c00
 8001a90:	40000400 	.word	0x40000400
 8001a94:	40000800 	.word	0x40000800

08001a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr

08001aaa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e03f      	b.n	8001b4e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d106      	bne.n	8001ae8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7fe fcf4 	bl	80004d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2224      	movs	r2, #36	; 0x24
 8001aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001afe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f905 	bl	8001d10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	691a      	ldr	r2, [r3, #16]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	695a      	ldr	r2, [r3, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68da      	ldr	r2, [r3, #12]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2220      	movs	r2, #32
 8001b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b08a      	sub	sp, #40	; 0x28
 8001b5a:	af02      	add	r7, sp, #8
 8001b5c:	60f8      	str	r0, [r7, #12]
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	603b      	str	r3, [r7, #0]
 8001b62:	4613      	mov	r3, r2
 8001b64:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b20      	cmp	r3, #32
 8001b74:	d17c      	bne.n	8001c70 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <HAL_UART_Transmit+0x2c>
 8001b7c:	88fb      	ldrh	r3, [r7, #6]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e075      	b.n	8001c72 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <HAL_UART_Transmit+0x3e>
 8001b90:	2302      	movs	r3, #2
 8001b92:	e06e      	b.n	8001c72 <HAL_UART_Transmit+0x11c>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2221      	movs	r2, #33	; 0x21
 8001ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001baa:	f7fe fe6d 	bl	8000888 <HAL_GetTick>
 8001bae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	88fa      	ldrh	r2, [r7, #6]
 8001bb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	88fa      	ldrh	r2, [r7, #6]
 8001bba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bc4:	d108      	bne.n	8001bd8 <HAL_UART_Transmit+0x82>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d104      	bne.n	8001bd8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	61bb      	str	r3, [r7, #24]
 8001bd6:	e003      	b.n	8001be0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001be8:	e02a      	b.n	8001c40 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2180      	movs	r1, #128	; 0x80
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 f840 	bl	8001c7a <UART_WaitOnFlagUntilTimeout>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e036      	b.n	8001c72 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10b      	bne.n	8001c22 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	e007      	b.n	8001c32 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	781a      	ldrb	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1cf      	bne.n	8001bea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2200      	movs	r2, #0
 8001c52:	2140      	movs	r1, #64	; 0x40
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 f810 	bl	8001c7a <UART_WaitOnFlagUntilTimeout>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e006      	b.n	8001c72 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2220      	movs	r2, #32
 8001c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e000      	b.n	8001c72 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c70:	2302      	movs	r3, #2
  }
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3720      	adds	r7, #32
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	603b      	str	r3, [r7, #0]
 8001c86:	4613      	mov	r3, r2
 8001c88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c8a:	e02c      	b.n	8001ce6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c92:	d028      	beq.n	8001ce6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d007      	beq.n	8001caa <UART_WaitOnFlagUntilTimeout+0x30>
 8001c9a:	f7fe fdf5 	bl	8000888 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d21d      	bcs.n	8001ce6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001cb8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695a      	ldr	r2, [r3, #20]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0201 	bic.w	r2, r2, #1
 8001cc8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e00f      	b.n	8001d06 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	bf0c      	ite	eq
 8001cf6:	2301      	moveq	r3, #1
 8001cf8:	2300      	movne	r3, #0
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d0c3      	beq.n	8001c8c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d4a:	f023 030c 	bic.w	r3, r3, #12
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6812      	ldr	r2, [r2, #0]
 8001d52:	68b9      	ldr	r1, [r7, #8]
 8001d54:	430b      	orrs	r3, r1
 8001d56:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699a      	ldr	r2, [r3, #24]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a2c      	ldr	r2, [pc, #176]	; (8001e24 <UART_SetConfig+0x114>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d103      	bne.n	8001d80 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d78:	f7ff fbf4 	bl	8001564 <HAL_RCC_GetPCLK2Freq>
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	e002      	b.n	8001d86 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d80:	f7ff fbdc 	bl	800153c <HAL_RCC_GetPCLK1Freq>
 8001d84:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	009a      	lsls	r2, r3, #2
 8001d90:	441a      	add	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9c:	4a22      	ldr	r2, [pc, #136]	; (8001e28 <UART_SetConfig+0x118>)
 8001d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001da2:	095b      	lsrs	r3, r3, #5
 8001da4:	0119      	lsls	r1, r3, #4
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	009a      	lsls	r2, r3, #2
 8001db0:	441a      	add	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <UART_SetConfig+0x118>)
 8001dbe:	fba3 0302 	umull	r0, r3, r3, r2
 8001dc2:	095b      	lsrs	r3, r3, #5
 8001dc4:	2064      	movs	r0, #100	; 0x64
 8001dc6:	fb00 f303 	mul.w	r3, r0, r3
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	3332      	adds	r3, #50	; 0x32
 8001dd0:	4a15      	ldr	r2, [pc, #84]	; (8001e28 <UART_SetConfig+0x118>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	095b      	lsrs	r3, r3, #5
 8001dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ddc:	4419      	add	r1, r3
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	009a      	lsls	r2, r3, #2
 8001de8:	441a      	add	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <UART_SetConfig+0x118>)
 8001df6:	fba3 0302 	umull	r0, r3, r3, r2
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	2064      	movs	r0, #100	; 0x64
 8001dfe:	fb00 f303 	mul.w	r3, r0, r3
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	3332      	adds	r3, #50	; 0x32
 8001e08:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <UART_SetConfig+0x118>)
 8001e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	f003 020f 	and.w	r2, r3, #15
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	440a      	add	r2, r1
 8001e1a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40013800 	.word	0x40013800
 8001e28:	51eb851f 	.word	0x51eb851f

08001e2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f103 0208 	add.w	r2, r3, #8
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f04f 32ff 	mov.w	r2, #4294967295
 8001e44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f103 0208 	add.w	r2, r3, #8
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f103 0208 	add.w	r2, r3, #8
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr

08001e6a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr

08001e82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e82:	b480      	push	{r7}
 8001e84:	b085      	sub	sp, #20
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	601a      	str	r2, [r3, #0]
}
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ede:	d103      	bne.n	8001ee8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	e00c      	b.n	8001f02 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3308      	adds	r3, #8
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	e002      	b.n	8001ef6 <vListInsert+0x2e>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d2f6      	bcs.n	8001ef0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	601a      	str	r2, [r3, #0]
}
 8001f2e:	bf00      	nop
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6892      	ldr	r2, [r2, #8]
 8001f4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6852      	ldr	r2, [r2, #4]
 8001f58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d103      	bne.n	8001f6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	1e5a      	subs	r2, r3, #1
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr

08001f8a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b08e      	sub	sp, #56	; 0x38
 8001f8e:	af04      	add	r7, sp, #16
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10a      	bne.n	8001fb4 <xTaskCreateStatic+0x2a>
	__asm volatile
 8001f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa2:	f383 8811 	msr	BASEPRI, r3
 8001fa6:	f3bf 8f6f 	isb	sy
 8001faa:	f3bf 8f4f 	dsb	sy
 8001fae:	623b      	str	r3, [r7, #32]
}
 8001fb0:	bf00      	nop
 8001fb2:	e7fe      	b.n	8001fb2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10a      	bne.n	8001fd0 <xTaskCreateStatic+0x46>
	__asm volatile
 8001fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fbe:	f383 8811 	msr	BASEPRI, r3
 8001fc2:	f3bf 8f6f 	isb	sy
 8001fc6:	f3bf 8f4f 	dsb	sy
 8001fca:	61fb      	str	r3, [r7, #28]
}
 8001fcc:	bf00      	nop
 8001fce:	e7fe      	b.n	8001fce <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001fd0:	23b4      	movs	r3, #180	; 0xb4
 8001fd2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	2bb4      	cmp	r3, #180	; 0xb4
 8001fd8:	d00a      	beq.n	8001ff0 <xTaskCreateStatic+0x66>
	__asm volatile
 8001fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fde:	f383 8811 	msr	BASEPRI, r3
 8001fe2:	f3bf 8f6f 	isb	sy
 8001fe6:	f3bf 8f4f 	dsb	sy
 8001fea:	61bb      	str	r3, [r7, #24]
}
 8001fec:	bf00      	nop
 8001fee:	e7fe      	b.n	8001fee <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d01e      	beq.n	8002034 <xTaskCreateStatic+0xaa>
 8001ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01b      	beq.n	8002034 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002004:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	2202      	movs	r2, #2
 800200a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800200e:	2300      	movs	r3, #0
 8002010:	9303      	str	r3, [sp, #12]
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	9302      	str	r3, [sp, #8]
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	9301      	str	r3, [sp, #4]
 800201c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 f850 	bl	80020cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800202c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800202e:	f000 f8e3 	bl	80021f8 <prvAddNewTaskToReadyList>
 8002032:	e001      	b.n	8002038 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002038:	697b      	ldr	r3, [r7, #20]
	}
 800203a:	4618      	mov	r0, r3
 800203c:	3728      	adds	r7, #40	; 0x28
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002042:	b580      	push	{r7, lr}
 8002044:	b08c      	sub	sp, #48	; 0x30
 8002046:	af04      	add	r7, sp, #16
 8002048:	60f8      	str	r0, [r7, #12]
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	603b      	str	r3, [r7, #0]
 800204e:	4613      	mov	r3, r2
 8002050:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002052:	88fb      	ldrh	r3, [r7, #6]
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4618      	mov	r0, r3
 8002058:	f000 fe9a 	bl	8002d90 <pvPortMalloc>
 800205c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00e      	beq.n	8002082 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002064:	20b4      	movs	r0, #180	; 0xb4
 8002066:	f000 fe93 	bl	8002d90 <pvPortMalloc>
 800206a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	631a      	str	r2, [r3, #48]	; 0x30
 8002078:	e005      	b.n	8002086 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800207a:	6978      	ldr	r0, [r7, #20]
 800207c:	f000 ff4c 	bl	8002f18 <vPortFree>
 8002080:	e001      	b.n	8002086 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d017      	beq.n	80020bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002094:	88fa      	ldrh	r2, [r7, #6]
 8002096:	2300      	movs	r3, #0
 8002098:	9303      	str	r3, [sp, #12]
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	9302      	str	r3, [sp, #8]
 800209e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a0:	9301      	str	r3, [sp, #4]
 80020a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 f80e 	bl	80020cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80020b0:	69f8      	ldr	r0, [r7, #28]
 80020b2:	f000 f8a1 	bl	80021f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80020b6:	2301      	movs	r3, #1
 80020b8:	61bb      	str	r3, [r7, #24]
 80020ba:	e002      	b.n	80020c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80020bc:	f04f 33ff 	mov.w	r3, #4294967295
 80020c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80020c2:	69bb      	ldr	r3, [r7, #24]
	}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3720      	adds	r7, #32
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
 80020d8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80020da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020e4:	3b01      	subs	r3, #1
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	f023 0307 	bic.w	r3, r3, #7
 80020f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <prvInitialiseNewTask+0x48>
	__asm volatile
 80020fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002102:	f383 8811 	msr	BASEPRI, r3
 8002106:	f3bf 8f6f 	isb	sy
 800210a:	f3bf 8f4f 	dsb	sy
 800210e:	617b      	str	r3, [r7, #20]
}
 8002110:	bf00      	nop
 8002112:	e7fe      	b.n	8002112 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002114:	2300      	movs	r3, #0
 8002116:	61fb      	str	r3, [r7, #28]
 8002118:	e012      	b.n	8002140 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	4413      	add	r3, r2
 8002120:	7819      	ldrb	r1, [r3, #0]
 8002122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	4413      	add	r3, r2
 8002128:	3334      	adds	r3, #52	; 0x34
 800212a:	460a      	mov	r2, r1
 800212c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	4413      	add	r3, r2
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d006      	beq.n	8002148 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3301      	adds	r3, #1
 800213e:	61fb      	str	r3, [r7, #28]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	2b0f      	cmp	r3, #15
 8002144:	d9e9      	bls.n	800211a <prvInitialiseNewTask+0x4e>
 8002146:	e000      	b.n	800214a <prvInitialiseNewTask+0x7e>
		{
			break;
 8002148:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800214a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002154:	2b06      	cmp	r3, #6
 8002156:	d901      	bls.n	800215c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002158:	2306      	movs	r3, #6
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800215c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002160:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002166:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216a:	2200      	movs	r2, #0
 800216c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800216e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002170:	3304      	adds	r3, #4
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fe79 	bl	8001e6a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217a:	3318      	adds	r3, #24
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fe74 	bl	8001e6a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002186:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218a:	f1c3 0207 	rsb	r2, r3, #7
 800218e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002190:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002196:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219a:	2200      	movs	r2, #0
 800219c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80021a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80021a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021aa:	334c      	adds	r3, #76	; 0x4c
 80021ac:	2260      	movs	r2, #96	; 0x60
 80021ae:	2100      	movs	r1, #0
 80021b0:	4618      	mov	r0, r3
 80021b2:	f001 f8e8 	bl	8003386 <memset>
 80021b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b8:	4a0c      	ldr	r2, [pc, #48]	; (80021ec <prvInitialiseNewTask+0x120>)
 80021ba:	651a      	str	r2, [r3, #80]	; 0x50
 80021bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021be:	4a0c      	ldr	r2, [pc, #48]	; (80021f0 <prvInitialiseNewTask+0x124>)
 80021c0:	655a      	str	r2, [r3, #84]	; 0x54
 80021c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c4:	4a0b      	ldr	r2, [pc, #44]	; (80021f4 <prvInitialiseNewTask+0x128>)
 80021c6:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	68f9      	ldr	r1, [r7, #12]
 80021cc:	69b8      	ldr	r0, [r7, #24]
 80021ce:	f000 fc29 	bl	8002a24 <pxPortInitialiseStack>
 80021d2:	4602      	mov	r2, r0
 80021d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80021d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80021de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80021e4:	bf00      	nop
 80021e6:	3720      	adds	r7, #32
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	0800435c 	.word	0x0800435c
 80021f0:	0800437c 	.word	0x0800437c
 80021f4:	0800433c 	.word	0x0800433c

080021f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002200:	f000 fd04 	bl	8002c0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002204:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <prvAddNewTaskToReadyList+0xb8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	3301      	adds	r3, #1
 800220a:	4a29      	ldr	r2, [pc, #164]	; (80022b0 <prvAddNewTaskToReadyList+0xb8>)
 800220c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800220e:	4b29      	ldr	r3, [pc, #164]	; (80022b4 <prvAddNewTaskToReadyList+0xbc>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d109      	bne.n	800222a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002216:	4a27      	ldr	r2, [pc, #156]	; (80022b4 <prvAddNewTaskToReadyList+0xbc>)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800221c:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <prvAddNewTaskToReadyList+0xb8>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d110      	bne.n	8002246 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002224:	f000 fad2 	bl	80027cc <prvInitialiseTaskLists>
 8002228:	e00d      	b.n	8002246 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800222a:	4b23      	ldr	r3, [pc, #140]	; (80022b8 <prvAddNewTaskToReadyList+0xc0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d109      	bne.n	8002246 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002232:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <prvAddNewTaskToReadyList+0xbc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	429a      	cmp	r2, r3
 800223e:	d802      	bhi.n	8002246 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002240:	4a1c      	ldr	r2, [pc, #112]	; (80022b4 <prvAddNewTaskToReadyList+0xbc>)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <prvAddNewTaskToReadyList+0xc4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	3301      	adds	r3, #1
 800224c:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <prvAddNewTaskToReadyList+0xc4>)
 800224e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	2201      	movs	r2, #1
 8002256:	409a      	lsls	r2, r3
 8002258:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <prvAddNewTaskToReadyList+0xc8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4313      	orrs	r3, r2
 800225e:	4a18      	ldr	r2, [pc, #96]	; (80022c0 <prvAddNewTaskToReadyList+0xc8>)
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4a15      	ldr	r2, [pc, #84]	; (80022c4 <prvAddNewTaskToReadyList+0xcc>)
 8002270:	441a      	add	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3304      	adds	r3, #4
 8002276:	4619      	mov	r1, r3
 8002278:	4610      	mov	r0, r2
 800227a:	f7ff fe02 	bl	8001e82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800227e:	f000 fcf5 	bl	8002c6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002282:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <prvAddNewTaskToReadyList+0xc0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00e      	beq.n	80022a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800228a:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <prvAddNewTaskToReadyList+0xbc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	429a      	cmp	r2, r3
 8002296:	d207      	bcs.n	80022a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <prvAddNewTaskToReadyList+0xd0>)
 800229a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	f3bf 8f4f 	dsb	sy
 80022a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80022a8:	bf00      	nop
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	200004d8 	.word	0x200004d8
 80022b4:	200003d8 	.word	0x200003d8
 80022b8:	200004e4 	.word	0x200004e4
 80022bc:	200004f4 	.word	0x200004f4
 80022c0:	200004e0 	.word	0x200004e0
 80022c4:	200003dc 	.word	0x200003dc
 80022c8:	e000ed04 	.word	0xe000ed04

080022cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d017      	beq.n	800230e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80022de:	4b13      	ldr	r3, [pc, #76]	; (800232c <vTaskDelay+0x60>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00a      	beq.n	80022fc <vTaskDelay+0x30>
	__asm volatile
 80022e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ea:	f383 8811 	msr	BASEPRI, r3
 80022ee:	f3bf 8f6f 	isb	sy
 80022f2:	f3bf 8f4f 	dsb	sy
 80022f6:	60bb      	str	r3, [r7, #8]
}
 80022f8:	bf00      	nop
 80022fa:	e7fe      	b.n	80022fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80022fc:	f000 f884 	bl	8002408 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002300:	2100      	movs	r1, #0
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 fb28 	bl	8002958 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002308:	f000 f88c 	bl	8002424 <xTaskResumeAll>
 800230c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d107      	bne.n	8002324 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <vTaskDelay+0x64>)
 8002316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	f3bf 8f4f 	dsb	sy
 8002320:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002324:	bf00      	nop
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000500 	.word	0x20000500
 8002330:	e000ed04 	.word	0xe000ed04

08002334 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	; 0x28
 8002338:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800233e:	2300      	movs	r3, #0
 8002340:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002342:	463a      	mov	r2, r7
 8002344:	1d39      	adds	r1, r7, #4
 8002346:	f107 0308 	add.w	r3, r7, #8
 800234a:	4618      	mov	r0, r3
 800234c:	f7fd ff00 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002350:	6839      	ldr	r1, [r7, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	9202      	str	r2, [sp, #8]
 8002358:	9301      	str	r3, [sp, #4]
 800235a:	2300      	movs	r3, #0
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	2300      	movs	r3, #0
 8002360:	460a      	mov	r2, r1
 8002362:	4921      	ldr	r1, [pc, #132]	; (80023e8 <vTaskStartScheduler+0xb4>)
 8002364:	4821      	ldr	r0, [pc, #132]	; (80023ec <vTaskStartScheduler+0xb8>)
 8002366:	f7ff fe10 	bl	8001f8a <xTaskCreateStatic>
 800236a:	4603      	mov	r3, r0
 800236c:	4a20      	ldr	r2, [pc, #128]	; (80023f0 <vTaskStartScheduler+0xbc>)
 800236e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002370:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <vTaskStartScheduler+0xbc>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002378:	2301      	movs	r3, #1
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	e001      	b.n	8002382 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d11b      	bne.n	80023c0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800238c:	f383 8811 	msr	BASEPRI, r3
 8002390:	f3bf 8f6f 	isb	sy
 8002394:	f3bf 8f4f 	dsb	sy
 8002398:	613b      	str	r3, [r7, #16]
}
 800239a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800239c:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <vTaskStartScheduler+0xc0>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	334c      	adds	r3, #76	; 0x4c
 80023a2:	4a15      	ldr	r2, [pc, #84]	; (80023f8 <vTaskStartScheduler+0xc4>)
 80023a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80023a6:	4b15      	ldr	r3, [pc, #84]	; (80023fc <vTaskStartScheduler+0xc8>)
 80023a8:	f04f 32ff 	mov.w	r2, #4294967295
 80023ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80023ae:	4b14      	ldr	r3, [pc, #80]	; (8002400 <vTaskStartScheduler+0xcc>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <vTaskStartScheduler+0xd0>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80023ba:	f000 fbb5 	bl	8002b28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80023be:	e00e      	b.n	80023de <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c6:	d10a      	bne.n	80023de <vTaskStartScheduler+0xaa>
	__asm volatile
 80023c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023cc:	f383 8811 	msr	BASEPRI, r3
 80023d0:	f3bf 8f6f 	isb	sy
 80023d4:	f3bf 8f4f 	dsb	sy
 80023d8:	60fb      	str	r3, [r7, #12]
}
 80023da:	bf00      	nop
 80023dc:	e7fe      	b.n	80023dc <vTaskStartScheduler+0xa8>
}
 80023de:	bf00      	nop
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	0800431c 	.word	0x0800431c
 80023ec:	0800279d 	.word	0x0800279d
 80023f0:	200004fc 	.word	0x200004fc
 80023f4:	200003d8 	.word	0x200003d8
 80023f8:	20000010 	.word	0x20000010
 80023fc:	200004f8 	.word	0x200004f8
 8002400:	200004e4 	.word	0x200004e4
 8002404:	200004dc 	.word	0x200004dc

08002408 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800240c:	4b04      	ldr	r3, [pc, #16]	; (8002420 <vTaskSuspendAll+0x18>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3301      	adds	r3, #1
 8002412:	4a03      	ldr	r2, [pc, #12]	; (8002420 <vTaskSuspendAll+0x18>)
 8002414:	6013      	str	r3, [r2, #0]
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000500 	.word	0x20000500

08002424 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800242e:	2300      	movs	r3, #0
 8002430:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002432:	4b41      	ldr	r3, [pc, #260]	; (8002538 <xTaskResumeAll+0x114>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10a      	bne.n	8002450 <xTaskResumeAll+0x2c>
	__asm volatile
 800243a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243e:	f383 8811 	msr	BASEPRI, r3
 8002442:	f3bf 8f6f 	isb	sy
 8002446:	f3bf 8f4f 	dsb	sy
 800244a:	603b      	str	r3, [r7, #0]
}
 800244c:	bf00      	nop
 800244e:	e7fe      	b.n	800244e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002450:	f000 fbdc 	bl	8002c0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002454:	4b38      	ldr	r3, [pc, #224]	; (8002538 <xTaskResumeAll+0x114>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	3b01      	subs	r3, #1
 800245a:	4a37      	ldr	r2, [pc, #220]	; (8002538 <xTaskResumeAll+0x114>)
 800245c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800245e:	4b36      	ldr	r3, [pc, #216]	; (8002538 <xTaskResumeAll+0x114>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d161      	bne.n	800252a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002466:	4b35      	ldr	r3, [pc, #212]	; (800253c <xTaskResumeAll+0x118>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d05d      	beq.n	800252a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800246e:	e02e      	b.n	80024ce <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002470:	4b33      	ldr	r3, [pc, #204]	; (8002540 <xTaskResumeAll+0x11c>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	3318      	adds	r3, #24
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff fd5b 	bl	8001f38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	3304      	adds	r3, #4
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fd56 	bl	8001f38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	2201      	movs	r2, #1
 8002492:	409a      	lsls	r2, r3
 8002494:	4b2b      	ldr	r3, [pc, #172]	; (8002544 <xTaskResumeAll+0x120>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4313      	orrs	r3, r2
 800249a:	4a2a      	ldr	r2, [pc, #168]	; (8002544 <xTaskResumeAll+0x120>)
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4a27      	ldr	r2, [pc, #156]	; (8002548 <xTaskResumeAll+0x124>)
 80024ac:	441a      	add	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	3304      	adds	r3, #4
 80024b2:	4619      	mov	r1, r3
 80024b4:	4610      	mov	r0, r2
 80024b6:	f7ff fce4 	bl	8001e82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024be:	4b23      	ldr	r3, [pc, #140]	; (800254c <xTaskResumeAll+0x128>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d302      	bcc.n	80024ce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80024c8:	4b21      	ldr	r3, [pc, #132]	; (8002550 <xTaskResumeAll+0x12c>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024ce:	4b1c      	ldr	r3, [pc, #112]	; (8002540 <xTaskResumeAll+0x11c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1cc      	bne.n	8002470 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80024dc:	f000 fa18 	bl	8002910 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80024e0:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <xTaskResumeAll+0x130>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d010      	beq.n	800250e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80024ec:	f000 f836 	bl	800255c <xTaskIncrementTick>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80024f6:	4b16      	ldr	r3, [pc, #88]	; (8002550 <xTaskResumeAll+0x12c>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3b01      	subs	r3, #1
 8002500:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f1      	bne.n	80024ec <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <xTaskResumeAll+0x130>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800250e:	4b10      	ldr	r3, [pc, #64]	; (8002550 <xTaskResumeAll+0x12c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d009      	beq.n	800252a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002516:	2301      	movs	r3, #1
 8002518:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800251a:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <xTaskResumeAll+0x134>)
 800251c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	f3bf 8f4f 	dsb	sy
 8002526:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800252a:	f000 fb9f 	bl	8002c6c <vPortExitCritical>

	return xAlreadyYielded;
 800252e:	68bb      	ldr	r3, [r7, #8]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000500 	.word	0x20000500
 800253c:	200004d8 	.word	0x200004d8
 8002540:	20000498 	.word	0x20000498
 8002544:	200004e0 	.word	0x200004e0
 8002548:	200003dc 	.word	0x200003dc
 800254c:	200003d8 	.word	0x200003d8
 8002550:	200004ec 	.word	0x200004ec
 8002554:	200004e8 	.word	0x200004e8
 8002558:	e000ed04 	.word	0xe000ed04

0800255c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002566:	4b51      	ldr	r3, [pc, #324]	; (80026ac <xTaskIncrementTick+0x150>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	f040 808d 	bne.w	800268a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002570:	4b4f      	ldr	r3, [pc, #316]	; (80026b0 <xTaskIncrementTick+0x154>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	3301      	adds	r3, #1
 8002576:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002578:	4a4d      	ldr	r2, [pc, #308]	; (80026b0 <xTaskIncrementTick+0x154>)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d120      	bne.n	80025c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002584:	4b4b      	ldr	r3, [pc, #300]	; (80026b4 <xTaskIncrementTick+0x158>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00a      	beq.n	80025a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800258e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002592:	f383 8811 	msr	BASEPRI, r3
 8002596:	f3bf 8f6f 	isb	sy
 800259a:	f3bf 8f4f 	dsb	sy
 800259e:	603b      	str	r3, [r7, #0]
}
 80025a0:	bf00      	nop
 80025a2:	e7fe      	b.n	80025a2 <xTaskIncrementTick+0x46>
 80025a4:	4b43      	ldr	r3, [pc, #268]	; (80026b4 <xTaskIncrementTick+0x158>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	4b43      	ldr	r3, [pc, #268]	; (80026b8 <xTaskIncrementTick+0x15c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a41      	ldr	r2, [pc, #260]	; (80026b4 <xTaskIncrementTick+0x158>)
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	4a41      	ldr	r2, [pc, #260]	; (80026b8 <xTaskIncrementTick+0x15c>)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	4b40      	ldr	r3, [pc, #256]	; (80026bc <xTaskIncrementTick+0x160>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	3301      	adds	r3, #1
 80025be:	4a3f      	ldr	r2, [pc, #252]	; (80026bc <xTaskIncrementTick+0x160>)
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	f000 f9a5 	bl	8002910 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80025c6:	4b3e      	ldr	r3, [pc, #248]	; (80026c0 <xTaskIncrementTick+0x164>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d34d      	bcc.n	800266c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025d0:	4b38      	ldr	r3, [pc, #224]	; (80026b4 <xTaskIncrementTick+0x158>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <xTaskIncrementTick+0x82>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <xTaskIncrementTick+0x84>
 80025de:	2300      	movs	r3, #0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d004      	beq.n	80025ee <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025e4:	4b36      	ldr	r3, [pc, #216]	; (80026c0 <xTaskIncrementTick+0x164>)
 80025e6:	f04f 32ff 	mov.w	r2, #4294967295
 80025ea:	601a      	str	r2, [r3, #0]
					break;
 80025ec:	e03e      	b.n	800266c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80025ee:	4b31      	ldr	r3, [pc, #196]	; (80026b4 <xTaskIncrementTick+0x158>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	429a      	cmp	r2, r3
 8002604:	d203      	bcs.n	800260e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002606:	4a2e      	ldr	r2, [pc, #184]	; (80026c0 <xTaskIncrementTick+0x164>)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6013      	str	r3, [r2, #0]
						break;
 800260c:	e02e      	b.n	800266c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	3304      	adds	r3, #4
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fc90 	bl	8001f38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	2b00      	cmp	r3, #0
 800261e:	d004      	beq.n	800262a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	3318      	adds	r3, #24
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff fc87 	bl	8001f38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262e:	2201      	movs	r2, #1
 8002630:	409a      	lsls	r2, r3
 8002632:	4b24      	ldr	r3, [pc, #144]	; (80026c4 <xTaskIncrementTick+0x168>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4313      	orrs	r3, r2
 8002638:	4a22      	ldr	r2, [pc, #136]	; (80026c4 <xTaskIncrementTick+0x168>)
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4a1f      	ldr	r2, [pc, #124]	; (80026c8 <xTaskIncrementTick+0x16c>)
 800264a:	441a      	add	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	3304      	adds	r3, #4
 8002650:	4619      	mov	r1, r3
 8002652:	4610      	mov	r0, r2
 8002654:	f7ff fc15 	bl	8001e82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800265c:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <xTaskIncrementTick+0x170>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002662:	429a      	cmp	r2, r3
 8002664:	d3b4      	bcc.n	80025d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002666:	2301      	movs	r3, #1
 8002668:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800266a:	e7b1      	b.n	80025d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800266c:	4b17      	ldr	r3, [pc, #92]	; (80026cc <xTaskIncrementTick+0x170>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002672:	4915      	ldr	r1, [pc, #84]	; (80026c8 <xTaskIncrementTick+0x16c>)
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d907      	bls.n	8002694 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002684:	2301      	movs	r3, #1
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	e004      	b.n	8002694 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <xTaskIncrementTick+0x174>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	3301      	adds	r3, #1
 8002690:	4a0f      	ldr	r2, [pc, #60]	; (80026d0 <xTaskIncrementTick+0x174>)
 8002692:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002694:	4b0f      	ldr	r3, [pc, #60]	; (80026d4 <xTaskIncrementTick+0x178>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800269c:	2301      	movs	r3, #1
 800269e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80026a0:	697b      	ldr	r3, [r7, #20]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000500 	.word	0x20000500
 80026b0:	200004dc 	.word	0x200004dc
 80026b4:	20000490 	.word	0x20000490
 80026b8:	20000494 	.word	0x20000494
 80026bc:	200004f0 	.word	0x200004f0
 80026c0:	200004f8 	.word	0x200004f8
 80026c4:	200004e0 	.word	0x200004e0
 80026c8:	200003dc 	.word	0x200003dc
 80026cc:	200003d8 	.word	0x200003d8
 80026d0:	200004e8 	.word	0x200004e8
 80026d4:	200004ec 	.word	0x200004ec

080026d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80026d8:	b480      	push	{r7}
 80026da:	b087      	sub	sp, #28
 80026dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80026de:	4b29      	ldr	r3, [pc, #164]	; (8002784 <vTaskSwitchContext+0xac>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80026e6:	4b28      	ldr	r3, [pc, #160]	; (8002788 <vTaskSwitchContext+0xb0>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80026ec:	e044      	b.n	8002778 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80026ee:	4b26      	ldr	r3, [pc, #152]	; (8002788 <vTaskSwitchContext+0xb0>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80026f4:	4b25      	ldr	r3, [pc, #148]	; (800278c <vTaskSwitchContext+0xb4>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002702:	7afb      	ldrb	r3, [r7, #11]
 8002704:	f1c3 031f 	rsb	r3, r3, #31
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	4921      	ldr	r1, [pc, #132]	; (8002790 <vTaskSwitchContext+0xb8>)
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10a      	bne.n	8002734 <vTaskSwitchContext+0x5c>
	__asm volatile
 800271e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002722:	f383 8811 	msr	BASEPRI, r3
 8002726:	f3bf 8f6f 	isb	sy
 800272a:	f3bf 8f4f 	dsb	sy
 800272e:	607b      	str	r3, [r7, #4]
}
 8002730:	bf00      	nop
 8002732:	e7fe      	b.n	8002732 <vTaskSwitchContext+0x5a>
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4a14      	ldr	r2, [pc, #80]	; (8002790 <vTaskSwitchContext+0xb8>)
 8002740:	4413      	add	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	3308      	adds	r3, #8
 8002756:	429a      	cmp	r2, r3
 8002758:	d104      	bne.n	8002764 <vTaskSwitchContext+0x8c>
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	605a      	str	r2, [r3, #4]
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	4a0a      	ldr	r2, [pc, #40]	; (8002794 <vTaskSwitchContext+0xbc>)
 800276c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800276e:	4b09      	ldr	r3, [pc, #36]	; (8002794 <vTaskSwitchContext+0xbc>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	334c      	adds	r3, #76	; 0x4c
 8002774:	4a08      	ldr	r2, [pc, #32]	; (8002798 <vTaskSwitchContext+0xc0>)
 8002776:	6013      	str	r3, [r2, #0]
}
 8002778:	bf00      	nop
 800277a:	371c      	adds	r7, #28
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20000500 	.word	0x20000500
 8002788:	200004ec 	.word	0x200004ec
 800278c:	200004e0 	.word	0x200004e0
 8002790:	200003dc 	.word	0x200003dc
 8002794:	200003d8 	.word	0x200003d8
 8002798:	20000010 	.word	0x20000010

0800279c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80027a4:	f000 f852 	bl	800284c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <prvIdleTask+0x28>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d9f9      	bls.n	80027a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <prvIdleTask+0x2c>)
 80027b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	f3bf 8f4f 	dsb	sy
 80027bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80027c0:	e7f0      	b.n	80027a4 <prvIdleTask+0x8>
 80027c2:	bf00      	nop
 80027c4:	200003dc 	.word	0x200003dc
 80027c8:	e000ed04 	.word	0xe000ed04

080027cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80027d2:	2300      	movs	r3, #0
 80027d4:	607b      	str	r3, [r7, #4]
 80027d6:	e00c      	b.n	80027f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4a12      	ldr	r2, [pc, #72]	; (800282c <prvInitialiseTaskLists+0x60>)
 80027e4:	4413      	add	r3, r2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fb20 	bl	8001e2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3301      	adds	r3, #1
 80027f0:	607b      	str	r3, [r7, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b06      	cmp	r3, #6
 80027f6:	d9ef      	bls.n	80027d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80027f8:	480d      	ldr	r0, [pc, #52]	; (8002830 <prvInitialiseTaskLists+0x64>)
 80027fa:	f7ff fb17 	bl	8001e2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80027fe:	480d      	ldr	r0, [pc, #52]	; (8002834 <prvInitialiseTaskLists+0x68>)
 8002800:	f7ff fb14 	bl	8001e2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002804:	480c      	ldr	r0, [pc, #48]	; (8002838 <prvInitialiseTaskLists+0x6c>)
 8002806:	f7ff fb11 	bl	8001e2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800280a:	480c      	ldr	r0, [pc, #48]	; (800283c <prvInitialiseTaskLists+0x70>)
 800280c:	f7ff fb0e 	bl	8001e2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002810:	480b      	ldr	r0, [pc, #44]	; (8002840 <prvInitialiseTaskLists+0x74>)
 8002812:	f7ff fb0b 	bl	8001e2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002816:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <prvInitialiseTaskLists+0x78>)
 8002818:	4a05      	ldr	r2, [pc, #20]	; (8002830 <prvInitialiseTaskLists+0x64>)
 800281a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800281c:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <prvInitialiseTaskLists+0x7c>)
 800281e:	4a05      	ldr	r2, [pc, #20]	; (8002834 <prvInitialiseTaskLists+0x68>)
 8002820:	601a      	str	r2, [r3, #0]
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	200003dc 	.word	0x200003dc
 8002830:	20000468 	.word	0x20000468
 8002834:	2000047c 	.word	0x2000047c
 8002838:	20000498 	.word	0x20000498
 800283c:	200004ac 	.word	0x200004ac
 8002840:	200004c4 	.word	0x200004c4
 8002844:	20000490 	.word	0x20000490
 8002848:	20000494 	.word	0x20000494

0800284c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002852:	e019      	b.n	8002888 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002854:	f000 f9da 	bl	8002c0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002858:	4b10      	ldr	r3, [pc, #64]	; (800289c <prvCheckTasksWaitingTermination+0x50>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3304      	adds	r3, #4
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fb67 	bl	8001f38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800286a:	4b0d      	ldr	r3, [pc, #52]	; (80028a0 <prvCheckTasksWaitingTermination+0x54>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	3b01      	subs	r3, #1
 8002870:	4a0b      	ldr	r2, [pc, #44]	; (80028a0 <prvCheckTasksWaitingTermination+0x54>)
 8002872:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002874:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <prvCheckTasksWaitingTermination+0x58>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	3b01      	subs	r3, #1
 800287a:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <prvCheckTasksWaitingTermination+0x58>)
 800287c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800287e:	f000 f9f5 	bl	8002c6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f810 	bl	80028a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <prvCheckTasksWaitingTermination+0x58>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1e1      	bne.n	8002854 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002890:	bf00      	nop
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200004ac 	.word	0x200004ac
 80028a0:	200004d8 	.word	0x200004d8
 80028a4:	200004c0 	.word	0x200004c0

080028a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	334c      	adds	r3, #76	; 0x4c
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fe9f 	bl	80035f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d108      	bne.n	80028d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 fb25 	bl	8002f18 <vPortFree>
				vPortFree( pxTCB );
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 fb22 	bl	8002f18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80028d4:	e018      	b.n	8002908 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d103      	bne.n	80028e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 fb19 	bl	8002f18 <vPortFree>
	}
 80028e6:	e00f      	b.n	8002908 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d00a      	beq.n	8002908 <prvDeleteTCB+0x60>
	__asm volatile
 80028f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f6:	f383 8811 	msr	BASEPRI, r3
 80028fa:	f3bf 8f6f 	isb	sy
 80028fe:	f3bf 8f4f 	dsb	sy
 8002902:	60fb      	str	r3, [r7, #12]
}
 8002904:	bf00      	nop
 8002906:	e7fe      	b.n	8002906 <prvDeleteTCB+0x5e>
	}
 8002908:	bf00      	nop
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002916:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <prvResetNextTaskUnblockTime+0x40>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <prvResetNextTaskUnblockTime+0x14>
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <prvResetNextTaskUnblockTime+0x16>
 8002924:	2300      	movs	r3, #0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d004      	beq.n	8002934 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800292a:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <prvResetNextTaskUnblockTime+0x44>)
 800292c:	f04f 32ff 	mov.w	r2, #4294967295
 8002930:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002932:	e008      	b.n	8002946 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <prvResetNextTaskUnblockTime+0x40>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4a04      	ldr	r2, [pc, #16]	; (8002954 <prvResetNextTaskUnblockTime+0x44>)
 8002944:	6013      	str	r3, [r2, #0]
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr
 8002950:	20000490 	.word	0x20000490
 8002954:	200004f8 	.word	0x200004f8

08002958 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002962:	4b29      	ldr	r3, [pc, #164]	; (8002a08 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002968:	4b28      	ldr	r3, [pc, #160]	; (8002a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	3304      	adds	r3, #4
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff fae2 	bl	8001f38 <uxListRemove>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10b      	bne.n	8002992 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800297a:	4b24      	ldr	r3, [pc, #144]	; (8002a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	2201      	movs	r2, #1
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43da      	mvns	r2, r3
 8002988:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <prvAddCurrentTaskToDelayedList+0xb8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4013      	ands	r3, r2
 800298e:	4a20      	ldr	r2, [pc, #128]	; (8002a10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002990:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002998:	d10a      	bne.n	80029b0 <prvAddCurrentTaskToDelayedList+0x58>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d007      	beq.n	80029b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029a0:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	3304      	adds	r3, #4
 80029a6:	4619      	mov	r1, r3
 80029a8:	481a      	ldr	r0, [pc, #104]	; (8002a14 <prvAddCurrentTaskToDelayedList+0xbc>)
 80029aa:	f7ff fa6a 	bl	8001e82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80029ae:	e026      	b.n	80029fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4413      	add	r3, r2
 80029b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d209      	bcs.n	80029dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029c8:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <prvAddCurrentTaskToDelayedList+0xc0>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	3304      	adds	r3, #4
 80029d2:	4619      	mov	r1, r3
 80029d4:	4610      	mov	r0, r2
 80029d6:	f7ff fa77 	bl	8001ec8 <vListInsert>
}
 80029da:	e010      	b.n	80029fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029dc:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <prvAddCurrentTaskToDelayedList+0xc4>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3304      	adds	r3, #4
 80029e6:	4619      	mov	r1, r3
 80029e8:	4610      	mov	r0, r2
 80029ea:	f7ff fa6d 	bl	8001ec8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80029ee:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <prvAddCurrentTaskToDelayedList+0xc8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d202      	bcs.n	80029fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80029f8:	4a09      	ldr	r2, [pc, #36]	; (8002a20 <prvAddCurrentTaskToDelayedList+0xc8>)
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	6013      	str	r3, [r2, #0]
}
 80029fe:	bf00      	nop
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	200004dc 	.word	0x200004dc
 8002a0c:	200003d8 	.word	0x200003d8
 8002a10:	200004e0 	.word	0x200004e0
 8002a14:	200004c4 	.word	0x200004c4
 8002a18:	20000494 	.word	0x20000494
 8002a1c:	20000490 	.word	0x20000490
 8002a20:	200004f8 	.word	0x200004f8

08002a24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	3b04      	subs	r3, #4
 8002a34:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	3b04      	subs	r3, #4
 8002a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f023 0201 	bic.w	r2, r3, #1
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	3b04      	subs	r3, #4
 8002a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002a54:	4a08      	ldr	r2, [pc, #32]	; (8002a78 <pxPortInitialiseStack+0x54>)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	3b14      	subs	r3, #20
 8002a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	3b20      	subs	r3, #32
 8002a6a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	08002a7d 	.word	0x08002a7d

08002a7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002a86:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <prvTaskExitError+0x54>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8e:	d00a      	beq.n	8002aa6 <prvTaskExitError+0x2a>
	__asm volatile
 8002a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a94:	f383 8811 	msr	BASEPRI, r3
 8002a98:	f3bf 8f6f 	isb	sy
 8002a9c:	f3bf 8f4f 	dsb	sy
 8002aa0:	60fb      	str	r3, [r7, #12]
}
 8002aa2:	bf00      	nop
 8002aa4:	e7fe      	b.n	8002aa4 <prvTaskExitError+0x28>
	__asm volatile
 8002aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aaa:	f383 8811 	msr	BASEPRI, r3
 8002aae:	f3bf 8f6f 	isb	sy
 8002ab2:	f3bf 8f4f 	dsb	sy
 8002ab6:	60bb      	str	r3, [r7, #8]
}
 8002ab8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002aba:	bf00      	nop
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0fc      	beq.n	8002abc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002ac2:	bf00      	nop
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	2000000c 	.word	0x2000000c
	...

08002ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002ae0:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <pxCurrentTCBConst2>)
 8002ae2:	6819      	ldr	r1, [r3, #0]
 8002ae4:	6808      	ldr	r0, [r1, #0]
 8002ae6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002aea:	f380 8809 	msr	PSP, r0
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f04f 0000 	mov.w	r0, #0
 8002af6:	f380 8811 	msr	BASEPRI, r0
 8002afa:	f04e 0e0d 	orr.w	lr, lr, #13
 8002afe:	4770      	bx	lr

08002b00 <pxCurrentTCBConst2>:
 8002b00:	200003d8 	.word	0x200003d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002b04:	bf00      	nop
 8002b06:	bf00      	nop

08002b08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002b08:	4806      	ldr	r0, [pc, #24]	; (8002b24 <prvPortStartFirstTask+0x1c>)
 8002b0a:	6800      	ldr	r0, [r0, #0]
 8002b0c:	6800      	ldr	r0, [r0, #0]
 8002b0e:	f380 8808 	msr	MSP, r0
 8002b12:	b662      	cpsie	i
 8002b14:	b661      	cpsie	f
 8002b16:	f3bf 8f4f 	dsb	sy
 8002b1a:	f3bf 8f6f 	isb	sy
 8002b1e:	df00      	svc	0
 8002b20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002b22:	bf00      	nop
 8002b24:	e000ed08 	.word	0xe000ed08

08002b28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b2e:	4b32      	ldr	r3, [pc, #200]	; (8002bf8 <xPortStartScheduler+0xd0>)
 8002b30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	22ff      	movs	r2, #255	; 0xff
 8002b3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b48:	78fb      	ldrb	r3, [r7, #3]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4b2a      	ldr	r3, [pc, #168]	; (8002bfc <xPortStartScheduler+0xd4>)
 8002b54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b56:	4b2a      	ldr	r3, [pc, #168]	; (8002c00 <xPortStartScheduler+0xd8>)
 8002b58:	2207      	movs	r2, #7
 8002b5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b5c:	e009      	b.n	8002b72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002b5e:	4b28      	ldr	r3, [pc, #160]	; (8002c00 <xPortStartScheduler+0xd8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	4a26      	ldr	r2, [pc, #152]	; (8002c00 <xPortStartScheduler+0xd8>)
 8002b66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b72:	78fb      	ldrb	r3, [r7, #3]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7a:	2b80      	cmp	r3, #128	; 0x80
 8002b7c:	d0ef      	beq.n	8002b5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002b7e:	4b20      	ldr	r3, [pc, #128]	; (8002c00 <xPortStartScheduler+0xd8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f1c3 0307 	rsb	r3, r3, #7
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d00a      	beq.n	8002ba0 <xPortStartScheduler+0x78>
	__asm volatile
 8002b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8e:	f383 8811 	msr	BASEPRI, r3
 8002b92:	f3bf 8f6f 	isb	sy
 8002b96:	f3bf 8f4f 	dsb	sy
 8002b9a:	60bb      	str	r3, [r7, #8]
}
 8002b9c:	bf00      	nop
 8002b9e:	e7fe      	b.n	8002b9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ba0:	4b17      	ldr	r3, [pc, #92]	; (8002c00 <xPortStartScheduler+0xd8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	4a16      	ldr	r2, [pc, #88]	; (8002c00 <xPortStartScheduler+0xd8>)
 8002ba8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002baa:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <xPortStartScheduler+0xd8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bb2:	4a13      	ldr	r2, [pc, #76]	; (8002c00 <xPortStartScheduler+0xd8>)
 8002bb4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002bbe:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <xPortStartScheduler+0xdc>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a10      	ldr	r2, [pc, #64]	; (8002c04 <xPortStartScheduler+0xdc>)
 8002bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002bca:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <xPortStartScheduler+0xdc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a0d      	ldr	r2, [pc, #52]	; (8002c04 <xPortStartScheduler+0xdc>)
 8002bd0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002bd4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002bd6:	f000 f8b9 	bl	8002d4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002bda:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <xPortStartScheduler+0xe0>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002be0:	f7ff ff92 	bl	8002b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002be4:	f7ff fd78 	bl	80026d8 <vTaskSwitchContext>
	prvTaskExitError();
 8002be8:	f7ff ff48 	bl	8002a7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	e000e400 	.word	0xe000e400
 8002bfc:	20000504 	.word	0x20000504
 8002c00:	20000508 	.word	0x20000508
 8002c04:	e000ed20 	.word	0xe000ed20
 8002c08:	2000000c 	.word	0x2000000c

08002c0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
	__asm volatile
 8002c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c16:	f383 8811 	msr	BASEPRI, r3
 8002c1a:	f3bf 8f6f 	isb	sy
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	607b      	str	r3, [r7, #4]
}
 8002c24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002c26:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <vPortEnterCritical+0x58>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	4a0d      	ldr	r2, [pc, #52]	; (8002c64 <vPortEnterCritical+0x58>)
 8002c2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <vPortEnterCritical+0x58>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d10f      	bne.n	8002c58 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <vPortEnterCritical+0x5c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <vPortEnterCritical+0x4c>
	__asm volatile
 8002c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c46:	f383 8811 	msr	BASEPRI, r3
 8002c4a:	f3bf 8f6f 	isb	sy
 8002c4e:	f3bf 8f4f 	dsb	sy
 8002c52:	603b      	str	r3, [r7, #0]
}
 8002c54:	bf00      	nop
 8002c56:	e7fe      	b.n	8002c56 <vPortEnterCritical+0x4a>
	}
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	2000000c 	.word	0x2000000c
 8002c68:	e000ed04 	.word	0xe000ed04

08002c6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002c72:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <vPortExitCritical+0x4c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10a      	bne.n	8002c90 <vPortExitCritical+0x24>
	__asm volatile
 8002c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7e:	f383 8811 	msr	BASEPRI, r3
 8002c82:	f3bf 8f6f 	isb	sy
 8002c86:	f3bf 8f4f 	dsb	sy
 8002c8a:	607b      	str	r3, [r7, #4]
}
 8002c8c:	bf00      	nop
 8002c8e:	e7fe      	b.n	8002c8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002c90:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <vPortExitCritical+0x4c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	3b01      	subs	r3, #1
 8002c96:	4a08      	ldr	r2, [pc, #32]	; (8002cb8 <vPortExitCritical+0x4c>)
 8002c98:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002c9a:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <vPortExitCritical+0x4c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d105      	bne.n	8002cae <vPortExitCritical+0x42>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002cac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr
 8002cb8:	2000000c 	.word	0x2000000c
 8002cbc:	00000000 	.word	0x00000000

08002cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002cc0:	f3ef 8009 	mrs	r0, PSP
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <pxCurrentTCBConst>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002cd0:	6010      	str	r0, [r2, #0]
 8002cd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002cd6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002cda:	f380 8811 	msr	BASEPRI, r0
 8002cde:	f7ff fcfb 	bl	80026d8 <vTaskSwitchContext>
 8002ce2:	f04f 0000 	mov.w	r0, #0
 8002ce6:	f380 8811 	msr	BASEPRI, r0
 8002cea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002cee:	6819      	ldr	r1, [r3, #0]
 8002cf0:	6808      	ldr	r0, [r1, #0]
 8002cf2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002cf6:	f380 8809 	msr	PSP, r0
 8002cfa:	f3bf 8f6f 	isb	sy
 8002cfe:	4770      	bx	lr

08002d00 <pxCurrentTCBConst>:
 8002d00:	200003d8 	.word	0x200003d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002d04:	bf00      	nop
 8002d06:	bf00      	nop

08002d08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8002d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d12:	f383 8811 	msr	BASEPRI, r3
 8002d16:	f3bf 8f6f 	isb	sy
 8002d1a:	f3bf 8f4f 	dsb	sy
 8002d1e:	607b      	str	r3, [r7, #4]
}
 8002d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002d22:	f7ff fc1b 	bl	800255c <xTaskIncrementTick>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002d2c:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <SysTick_Handler+0x40>)
 8002d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	2300      	movs	r3, #0
 8002d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	f383 8811 	msr	BASEPRI, r3
}
 8002d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	e000ed04 	.word	0xe000ed04

08002d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002d50:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <vPortSetupTimerInterrupt+0x30>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002d56:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <vPortSetupTimerInterrupt+0x34>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002d5c:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <vPortSetupTimerInterrupt+0x38>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a09      	ldr	r2, [pc, #36]	; (8002d88 <vPortSetupTimerInterrupt+0x3c>)
 8002d62:	fba2 2303 	umull	r2, r3, r2, r3
 8002d66:	099b      	lsrs	r3, r3, #6
 8002d68:	4a08      	ldr	r2, [pc, #32]	; (8002d8c <vPortSetupTimerInterrupt+0x40>)
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002d6e:	4b03      	ldr	r3, [pc, #12]	; (8002d7c <vPortSetupTimerInterrupt+0x30>)
 8002d70:	2207      	movs	r2, #7
 8002d72:	601a      	str	r2, [r3, #0]
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	e000e010 	.word	0xe000e010
 8002d80:	e000e018 	.word	0xe000e018
 8002d84:	20000000 	.word	0x20000000
 8002d88:	10624dd3 	.word	0x10624dd3
 8002d8c:	e000e014 	.word	0xe000e014

08002d90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	; 0x28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002d9c:	f7ff fb34 	bl	8002408 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002da0:	4b58      	ldr	r3, [pc, #352]	; (8002f04 <pvPortMalloc+0x174>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002da8:	f000 f910 	bl	8002fcc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002dac:	4b56      	ldr	r3, [pc, #344]	; (8002f08 <pvPortMalloc+0x178>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f040 808e 	bne.w	8002ed6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d01d      	beq.n	8002dfc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002dc0:	2208      	movs	r2, #8
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d014      	beq.n	8002dfc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f023 0307 	bic.w	r3, r3, #7
 8002dd8:	3308      	adds	r3, #8
 8002dda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00a      	beq.n	8002dfc <pvPortMalloc+0x6c>
	__asm volatile
 8002de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dea:	f383 8811 	msr	BASEPRI, r3
 8002dee:	f3bf 8f6f 	isb	sy
 8002df2:	f3bf 8f4f 	dsb	sy
 8002df6:	617b      	str	r3, [r7, #20]
}
 8002df8:	bf00      	nop
 8002dfa:	e7fe      	b.n	8002dfa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d069      	beq.n	8002ed6 <pvPortMalloc+0x146>
 8002e02:	4b42      	ldr	r3, [pc, #264]	; (8002f0c <pvPortMalloc+0x17c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d864      	bhi.n	8002ed6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002e0c:	4b40      	ldr	r3, [pc, #256]	; (8002f10 <pvPortMalloc+0x180>)
 8002e0e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002e10:	4b3f      	ldr	r3, [pc, #252]	; (8002f10 <pvPortMalloc+0x180>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e16:	e004      	b.n	8002e22 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d903      	bls.n	8002e34 <pvPortMalloc+0xa4>
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1f1      	bne.n	8002e18 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002e34:	4b33      	ldr	r3, [pc, #204]	; (8002f04 <pvPortMalloc+0x174>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d04b      	beq.n	8002ed6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2208      	movs	r2, #8
 8002e44:	4413      	add	r3, r2
 8002e46:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	1ad2      	subs	r2, r2, r3
 8002e58:	2308      	movs	r3, #8
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d91f      	bls.n	8002ea0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <pvPortMalloc+0xf8>
	__asm volatile
 8002e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e76:	f383 8811 	msr	BASEPRI, r3
 8002e7a:	f3bf 8f6f 	isb	sy
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	613b      	str	r3, [r7, #16]
}
 8002e84:	bf00      	nop
 8002e86:	e7fe      	b.n	8002e86 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	1ad2      	subs	r2, r2, r3
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002e9a:	69b8      	ldr	r0, [r7, #24]
 8002e9c:	f000 f8f8 	bl	8003090 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ea0:	4b1a      	ldr	r3, [pc, #104]	; (8002f0c <pvPortMalloc+0x17c>)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	4a18      	ldr	r2, [pc, #96]	; (8002f0c <pvPortMalloc+0x17c>)
 8002eac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002eae:	4b17      	ldr	r3, [pc, #92]	; (8002f0c <pvPortMalloc+0x17c>)
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	4b18      	ldr	r3, [pc, #96]	; (8002f14 <pvPortMalloc+0x184>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d203      	bcs.n	8002ec2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002eba:	4b14      	ldr	r3, [pc, #80]	; (8002f0c <pvPortMalloc+0x17c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a15      	ldr	r2, [pc, #84]	; (8002f14 <pvPortMalloc+0x184>)
 8002ec0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <pvPortMalloc+0x178>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002ed6:	f7ff faa5 	bl	8002424 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00a      	beq.n	8002efa <pvPortMalloc+0x16a>
	__asm volatile
 8002ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee8:	f383 8811 	msr	BASEPRI, r3
 8002eec:	f3bf 8f6f 	isb	sy
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	60fb      	str	r3, [r7, #12]
}
 8002ef6:	bf00      	nop
 8002ef8:	e7fe      	b.n	8002ef8 <pvPortMalloc+0x168>
	return pvReturn;
 8002efa:	69fb      	ldr	r3, [r7, #28]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3728      	adds	r7, #40	; 0x28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20001114 	.word	0x20001114
 8002f08:	20001120 	.word	0x20001120
 8002f0c:	20001118 	.word	0x20001118
 8002f10:	2000110c 	.word	0x2000110c
 8002f14:	2000111c 	.word	0x2000111c

08002f18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d048      	beq.n	8002fbc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002f2a:	2308      	movs	r3, #8
 8002f2c:	425b      	negs	r3, r3
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	4413      	add	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	4b21      	ldr	r3, [pc, #132]	; (8002fc4 <vPortFree+0xac>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10a      	bne.n	8002f5c <vPortFree+0x44>
	__asm volatile
 8002f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4a:	f383 8811 	msr	BASEPRI, r3
 8002f4e:	f3bf 8f6f 	isb	sy
 8002f52:	f3bf 8f4f 	dsb	sy
 8002f56:	60fb      	str	r3, [r7, #12]
}
 8002f58:	bf00      	nop
 8002f5a:	e7fe      	b.n	8002f5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00a      	beq.n	8002f7a <vPortFree+0x62>
	__asm volatile
 8002f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	60bb      	str	r3, [r7, #8]
}
 8002f76:	bf00      	nop
 8002f78:	e7fe      	b.n	8002f78 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <vPortFree+0xac>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d019      	beq.n	8002fbc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d115      	bne.n	8002fbc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <vPortFree+0xac>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002fa0:	f7ff fa32 	bl	8002408 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <vPortFree+0xb0>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4413      	add	r3, r2
 8002fae:	4a06      	ldr	r2, [pc, #24]	; (8002fc8 <vPortFree+0xb0>)
 8002fb0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002fb2:	6938      	ldr	r0, [r7, #16]
 8002fb4:	f000 f86c 	bl	8003090 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002fb8:	f7ff fa34 	bl	8002424 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002fbc:	bf00      	nop
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	20001120 	.word	0x20001120
 8002fc8:	20001118 	.word	0x20001118

08002fcc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002fd2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002fd6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002fd8:	4b27      	ldr	r3, [pc, #156]	; (8003078 <prvHeapInit+0xac>)
 8002fda:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00c      	beq.n	8003000 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	3307      	adds	r3, #7
 8002fea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f023 0307 	bic.w	r3, r3, #7
 8002ff2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	4a1f      	ldr	r2, [pc, #124]	; (8003078 <prvHeapInit+0xac>)
 8002ffc:	4413      	add	r3, r2
 8002ffe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003004:	4a1d      	ldr	r2, [pc, #116]	; (800307c <prvHeapInit+0xb0>)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800300a:	4b1c      	ldr	r3, [pc, #112]	; (800307c <prvHeapInit+0xb0>)
 800300c:	2200      	movs	r2, #0
 800300e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	4413      	add	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003018:	2208      	movs	r2, #8
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1a9b      	subs	r3, r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0307 	bic.w	r3, r3, #7
 8003026:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4a15      	ldr	r2, [pc, #84]	; (8003080 <prvHeapInit+0xb4>)
 800302c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800302e:	4b14      	ldr	r3, [pc, #80]	; (8003080 <prvHeapInit+0xb4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2200      	movs	r2, #0
 8003034:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003036:	4b12      	ldr	r3, [pc, #72]	; (8003080 <prvHeapInit+0xb4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	1ad2      	subs	r2, r2, r3
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800304c:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <prvHeapInit+0xb4>)
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <prvHeapInit+0xb8>)
 800305a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	4a09      	ldr	r2, [pc, #36]	; (8003088 <prvHeapInit+0xbc>)
 8003062:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003064:	4b09      	ldr	r3, [pc, #36]	; (800308c <prvHeapInit+0xc0>)
 8003066:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800306a:	601a      	str	r2, [r3, #0]
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	2000050c 	.word	0x2000050c
 800307c:	2000110c 	.word	0x2000110c
 8003080:	20001114 	.word	0x20001114
 8003084:	2000111c 	.word	0x2000111c
 8003088:	20001118 	.word	0x20001118
 800308c:	20001120 	.word	0x20001120

08003090 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003098:	4b27      	ldr	r3, [pc, #156]	; (8003138 <prvInsertBlockIntoFreeList+0xa8>)
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	e002      	b.n	80030a4 <prvInsertBlockIntoFreeList+0x14>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d8f7      	bhi.n	800309e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	4413      	add	r3, r2
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d108      	bne.n	80030d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	441a      	add	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	441a      	add	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d118      	bne.n	8003118 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4b14      	ldr	r3, [pc, #80]	; (800313c <prvInsertBlockIntoFreeList+0xac>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d00d      	beq.n	800310e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	441a      	add	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	e008      	b.n	8003120 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800310e:	4b0b      	ldr	r3, [pc, #44]	; (800313c <prvInsertBlockIntoFreeList+0xac>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	e003      	b.n	8003120 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	429a      	cmp	r2, r3
 8003126:	d002      	beq.n	800312e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800312e:	bf00      	nop
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr
 8003138:	2000110c 	.word	0x2000110c
 800313c:	20001114 	.word	0x20001114

08003140 <__errno>:
 8003140:	4b01      	ldr	r3, [pc, #4]	; (8003148 <__errno+0x8>)
 8003142:	6818      	ldr	r0, [r3, #0]
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	20000010 	.word	0x20000010

0800314c <std>:
 800314c:	2300      	movs	r3, #0
 800314e:	b510      	push	{r4, lr}
 8003150:	4604      	mov	r4, r0
 8003152:	e9c0 3300 	strd	r3, r3, [r0]
 8003156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800315a:	6083      	str	r3, [r0, #8]
 800315c:	8181      	strh	r1, [r0, #12]
 800315e:	6643      	str	r3, [r0, #100]	; 0x64
 8003160:	81c2      	strh	r2, [r0, #14]
 8003162:	6183      	str	r3, [r0, #24]
 8003164:	4619      	mov	r1, r3
 8003166:	2208      	movs	r2, #8
 8003168:	305c      	adds	r0, #92	; 0x5c
 800316a:	f000 f90c 	bl	8003386 <memset>
 800316e:	4b05      	ldr	r3, [pc, #20]	; (8003184 <std+0x38>)
 8003170:	6224      	str	r4, [r4, #32]
 8003172:	6263      	str	r3, [r4, #36]	; 0x24
 8003174:	4b04      	ldr	r3, [pc, #16]	; (8003188 <std+0x3c>)
 8003176:	62a3      	str	r3, [r4, #40]	; 0x28
 8003178:	4b04      	ldr	r3, [pc, #16]	; (800318c <std+0x40>)
 800317a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800317c:	4b04      	ldr	r3, [pc, #16]	; (8003190 <std+0x44>)
 800317e:	6323      	str	r3, [r4, #48]	; 0x30
 8003180:	bd10      	pop	{r4, pc}
 8003182:	bf00      	nop
 8003184:	080036d1 	.word	0x080036d1
 8003188:	080036f3 	.word	0x080036f3
 800318c:	0800372b 	.word	0x0800372b
 8003190:	0800374f 	.word	0x0800374f

08003194 <_cleanup_r>:
 8003194:	4901      	ldr	r1, [pc, #4]	; (800319c <_cleanup_r+0x8>)
 8003196:	f000 b8af 	b.w	80032f8 <_fwalk_reent>
 800319a:	bf00      	nop
 800319c:	08003a21 	.word	0x08003a21

080031a0 <__sfmoreglue>:
 80031a0:	2268      	movs	r2, #104	; 0x68
 80031a2:	b570      	push	{r4, r5, r6, lr}
 80031a4:	1e4d      	subs	r5, r1, #1
 80031a6:	4355      	muls	r5, r2
 80031a8:	460e      	mov	r6, r1
 80031aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80031ae:	f000 f913 	bl	80033d8 <_malloc_r>
 80031b2:	4604      	mov	r4, r0
 80031b4:	b140      	cbz	r0, 80031c8 <__sfmoreglue+0x28>
 80031b6:	2100      	movs	r1, #0
 80031b8:	e9c0 1600 	strd	r1, r6, [r0]
 80031bc:	300c      	adds	r0, #12
 80031be:	60a0      	str	r0, [r4, #8]
 80031c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80031c4:	f000 f8df 	bl	8003386 <memset>
 80031c8:	4620      	mov	r0, r4
 80031ca:	bd70      	pop	{r4, r5, r6, pc}

080031cc <__sfp_lock_acquire>:
 80031cc:	4801      	ldr	r0, [pc, #4]	; (80031d4 <__sfp_lock_acquire+0x8>)
 80031ce:	f000 b8d8 	b.w	8003382 <__retarget_lock_acquire_recursive>
 80031d2:	bf00      	nop
 80031d4:	20001125 	.word	0x20001125

080031d8 <__sfp_lock_release>:
 80031d8:	4801      	ldr	r0, [pc, #4]	; (80031e0 <__sfp_lock_release+0x8>)
 80031da:	f000 b8d3 	b.w	8003384 <__retarget_lock_release_recursive>
 80031de:	bf00      	nop
 80031e0:	20001125 	.word	0x20001125

080031e4 <__sinit_lock_acquire>:
 80031e4:	4801      	ldr	r0, [pc, #4]	; (80031ec <__sinit_lock_acquire+0x8>)
 80031e6:	f000 b8cc 	b.w	8003382 <__retarget_lock_acquire_recursive>
 80031ea:	bf00      	nop
 80031ec:	20001126 	.word	0x20001126

080031f0 <__sinit_lock_release>:
 80031f0:	4801      	ldr	r0, [pc, #4]	; (80031f8 <__sinit_lock_release+0x8>)
 80031f2:	f000 b8c7 	b.w	8003384 <__retarget_lock_release_recursive>
 80031f6:	bf00      	nop
 80031f8:	20001126 	.word	0x20001126

080031fc <__sinit>:
 80031fc:	b510      	push	{r4, lr}
 80031fe:	4604      	mov	r4, r0
 8003200:	f7ff fff0 	bl	80031e4 <__sinit_lock_acquire>
 8003204:	69a3      	ldr	r3, [r4, #24]
 8003206:	b11b      	cbz	r3, 8003210 <__sinit+0x14>
 8003208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800320c:	f7ff bff0 	b.w	80031f0 <__sinit_lock_release>
 8003210:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003214:	6523      	str	r3, [r4, #80]	; 0x50
 8003216:	4b13      	ldr	r3, [pc, #76]	; (8003264 <__sinit+0x68>)
 8003218:	4a13      	ldr	r2, [pc, #76]	; (8003268 <__sinit+0x6c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	62a2      	str	r2, [r4, #40]	; 0x28
 800321e:	42a3      	cmp	r3, r4
 8003220:	bf08      	it	eq
 8003222:	2301      	moveq	r3, #1
 8003224:	4620      	mov	r0, r4
 8003226:	bf08      	it	eq
 8003228:	61a3      	streq	r3, [r4, #24]
 800322a:	f000 f81f 	bl	800326c <__sfp>
 800322e:	6060      	str	r0, [r4, #4]
 8003230:	4620      	mov	r0, r4
 8003232:	f000 f81b 	bl	800326c <__sfp>
 8003236:	60a0      	str	r0, [r4, #8]
 8003238:	4620      	mov	r0, r4
 800323a:	f000 f817 	bl	800326c <__sfp>
 800323e:	2200      	movs	r2, #0
 8003240:	2104      	movs	r1, #4
 8003242:	60e0      	str	r0, [r4, #12]
 8003244:	6860      	ldr	r0, [r4, #4]
 8003246:	f7ff ff81 	bl	800314c <std>
 800324a:	2201      	movs	r2, #1
 800324c:	2109      	movs	r1, #9
 800324e:	68a0      	ldr	r0, [r4, #8]
 8003250:	f7ff ff7c 	bl	800314c <std>
 8003254:	2202      	movs	r2, #2
 8003256:	2112      	movs	r1, #18
 8003258:	68e0      	ldr	r0, [r4, #12]
 800325a:	f7ff ff77 	bl	800314c <std>
 800325e:	2301      	movs	r3, #1
 8003260:	61a3      	str	r3, [r4, #24]
 8003262:	e7d1      	b.n	8003208 <__sinit+0xc>
 8003264:	0800439c 	.word	0x0800439c
 8003268:	08003195 	.word	0x08003195

0800326c <__sfp>:
 800326c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800326e:	4607      	mov	r7, r0
 8003270:	f7ff ffac 	bl	80031cc <__sfp_lock_acquire>
 8003274:	4b1e      	ldr	r3, [pc, #120]	; (80032f0 <__sfp+0x84>)
 8003276:	681e      	ldr	r6, [r3, #0]
 8003278:	69b3      	ldr	r3, [r6, #24]
 800327a:	b913      	cbnz	r3, 8003282 <__sfp+0x16>
 800327c:	4630      	mov	r0, r6
 800327e:	f7ff ffbd 	bl	80031fc <__sinit>
 8003282:	3648      	adds	r6, #72	; 0x48
 8003284:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003288:	3b01      	subs	r3, #1
 800328a:	d503      	bpl.n	8003294 <__sfp+0x28>
 800328c:	6833      	ldr	r3, [r6, #0]
 800328e:	b30b      	cbz	r3, 80032d4 <__sfp+0x68>
 8003290:	6836      	ldr	r6, [r6, #0]
 8003292:	e7f7      	b.n	8003284 <__sfp+0x18>
 8003294:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003298:	b9d5      	cbnz	r5, 80032d0 <__sfp+0x64>
 800329a:	4b16      	ldr	r3, [pc, #88]	; (80032f4 <__sfp+0x88>)
 800329c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80032a0:	60e3      	str	r3, [r4, #12]
 80032a2:	6665      	str	r5, [r4, #100]	; 0x64
 80032a4:	f000 f86c 	bl	8003380 <__retarget_lock_init_recursive>
 80032a8:	f7ff ff96 	bl	80031d8 <__sfp_lock_release>
 80032ac:	2208      	movs	r2, #8
 80032ae:	4629      	mov	r1, r5
 80032b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80032b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80032b8:	6025      	str	r5, [r4, #0]
 80032ba:	61a5      	str	r5, [r4, #24]
 80032bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80032c0:	f000 f861 	bl	8003386 <memset>
 80032c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80032c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80032cc:	4620      	mov	r0, r4
 80032ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032d0:	3468      	adds	r4, #104	; 0x68
 80032d2:	e7d9      	b.n	8003288 <__sfp+0x1c>
 80032d4:	2104      	movs	r1, #4
 80032d6:	4638      	mov	r0, r7
 80032d8:	f7ff ff62 	bl	80031a0 <__sfmoreglue>
 80032dc:	4604      	mov	r4, r0
 80032de:	6030      	str	r0, [r6, #0]
 80032e0:	2800      	cmp	r0, #0
 80032e2:	d1d5      	bne.n	8003290 <__sfp+0x24>
 80032e4:	f7ff ff78 	bl	80031d8 <__sfp_lock_release>
 80032e8:	230c      	movs	r3, #12
 80032ea:	603b      	str	r3, [r7, #0]
 80032ec:	e7ee      	b.n	80032cc <__sfp+0x60>
 80032ee:	bf00      	nop
 80032f0:	0800439c 	.word	0x0800439c
 80032f4:	ffff0001 	.word	0xffff0001

080032f8 <_fwalk_reent>:
 80032f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032fc:	4606      	mov	r6, r0
 80032fe:	4688      	mov	r8, r1
 8003300:	2700      	movs	r7, #0
 8003302:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003306:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800330a:	f1b9 0901 	subs.w	r9, r9, #1
 800330e:	d505      	bpl.n	800331c <_fwalk_reent+0x24>
 8003310:	6824      	ldr	r4, [r4, #0]
 8003312:	2c00      	cmp	r4, #0
 8003314:	d1f7      	bne.n	8003306 <_fwalk_reent+0xe>
 8003316:	4638      	mov	r0, r7
 8003318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800331c:	89ab      	ldrh	r3, [r5, #12]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d907      	bls.n	8003332 <_fwalk_reent+0x3a>
 8003322:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003326:	3301      	adds	r3, #1
 8003328:	d003      	beq.n	8003332 <_fwalk_reent+0x3a>
 800332a:	4629      	mov	r1, r5
 800332c:	4630      	mov	r0, r6
 800332e:	47c0      	blx	r8
 8003330:	4307      	orrs	r7, r0
 8003332:	3568      	adds	r5, #104	; 0x68
 8003334:	e7e9      	b.n	800330a <_fwalk_reent+0x12>
	...

08003338 <__libc_init_array>:
 8003338:	b570      	push	{r4, r5, r6, lr}
 800333a:	2600      	movs	r6, #0
 800333c:	4d0c      	ldr	r5, [pc, #48]	; (8003370 <__libc_init_array+0x38>)
 800333e:	4c0d      	ldr	r4, [pc, #52]	; (8003374 <__libc_init_array+0x3c>)
 8003340:	1b64      	subs	r4, r4, r5
 8003342:	10a4      	asrs	r4, r4, #2
 8003344:	42a6      	cmp	r6, r4
 8003346:	d109      	bne.n	800335c <__libc_init_array+0x24>
 8003348:	f000 ffa2 	bl	8004290 <_init>
 800334c:	2600      	movs	r6, #0
 800334e:	4d0a      	ldr	r5, [pc, #40]	; (8003378 <__libc_init_array+0x40>)
 8003350:	4c0a      	ldr	r4, [pc, #40]	; (800337c <__libc_init_array+0x44>)
 8003352:	1b64      	subs	r4, r4, r5
 8003354:	10a4      	asrs	r4, r4, #2
 8003356:	42a6      	cmp	r6, r4
 8003358:	d105      	bne.n	8003366 <__libc_init_array+0x2e>
 800335a:	bd70      	pop	{r4, r5, r6, pc}
 800335c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003360:	4798      	blx	r3
 8003362:	3601      	adds	r6, #1
 8003364:	e7ee      	b.n	8003344 <__libc_init_array+0xc>
 8003366:	f855 3b04 	ldr.w	r3, [r5], #4
 800336a:	4798      	blx	r3
 800336c:	3601      	adds	r6, #1
 800336e:	e7f2      	b.n	8003356 <__libc_init_array+0x1e>
 8003370:	080043d4 	.word	0x080043d4
 8003374:	080043d4 	.word	0x080043d4
 8003378:	080043d4 	.word	0x080043d4
 800337c:	080043d8 	.word	0x080043d8

08003380 <__retarget_lock_init_recursive>:
 8003380:	4770      	bx	lr

08003382 <__retarget_lock_acquire_recursive>:
 8003382:	4770      	bx	lr

08003384 <__retarget_lock_release_recursive>:
 8003384:	4770      	bx	lr

08003386 <memset>:
 8003386:	4603      	mov	r3, r0
 8003388:	4402      	add	r2, r0
 800338a:	4293      	cmp	r3, r2
 800338c:	d100      	bne.n	8003390 <memset+0xa>
 800338e:	4770      	bx	lr
 8003390:	f803 1b01 	strb.w	r1, [r3], #1
 8003394:	e7f9      	b.n	800338a <memset+0x4>
	...

08003398 <sbrk_aligned>:
 8003398:	b570      	push	{r4, r5, r6, lr}
 800339a:	4e0e      	ldr	r6, [pc, #56]	; (80033d4 <sbrk_aligned+0x3c>)
 800339c:	460c      	mov	r4, r1
 800339e:	6831      	ldr	r1, [r6, #0]
 80033a0:	4605      	mov	r5, r0
 80033a2:	b911      	cbnz	r1, 80033aa <sbrk_aligned+0x12>
 80033a4:	f000 f984 	bl	80036b0 <_sbrk_r>
 80033a8:	6030      	str	r0, [r6, #0]
 80033aa:	4621      	mov	r1, r4
 80033ac:	4628      	mov	r0, r5
 80033ae:	f000 f97f 	bl	80036b0 <_sbrk_r>
 80033b2:	1c43      	adds	r3, r0, #1
 80033b4:	d00a      	beq.n	80033cc <sbrk_aligned+0x34>
 80033b6:	1cc4      	adds	r4, r0, #3
 80033b8:	f024 0403 	bic.w	r4, r4, #3
 80033bc:	42a0      	cmp	r0, r4
 80033be:	d007      	beq.n	80033d0 <sbrk_aligned+0x38>
 80033c0:	1a21      	subs	r1, r4, r0
 80033c2:	4628      	mov	r0, r5
 80033c4:	f000 f974 	bl	80036b0 <_sbrk_r>
 80033c8:	3001      	adds	r0, #1
 80033ca:	d101      	bne.n	80033d0 <sbrk_aligned+0x38>
 80033cc:	f04f 34ff 	mov.w	r4, #4294967295
 80033d0:	4620      	mov	r0, r4
 80033d2:	bd70      	pop	{r4, r5, r6, pc}
 80033d4:	2000112c 	.word	0x2000112c

080033d8 <_malloc_r>:
 80033d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033dc:	1ccd      	adds	r5, r1, #3
 80033de:	f025 0503 	bic.w	r5, r5, #3
 80033e2:	3508      	adds	r5, #8
 80033e4:	2d0c      	cmp	r5, #12
 80033e6:	bf38      	it	cc
 80033e8:	250c      	movcc	r5, #12
 80033ea:	2d00      	cmp	r5, #0
 80033ec:	4607      	mov	r7, r0
 80033ee:	db01      	blt.n	80033f4 <_malloc_r+0x1c>
 80033f0:	42a9      	cmp	r1, r5
 80033f2:	d905      	bls.n	8003400 <_malloc_r+0x28>
 80033f4:	230c      	movs	r3, #12
 80033f6:	2600      	movs	r6, #0
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	4630      	mov	r0, r6
 80033fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003400:	4e2e      	ldr	r6, [pc, #184]	; (80034bc <_malloc_r+0xe4>)
 8003402:	f000 fbc1 	bl	8003b88 <__malloc_lock>
 8003406:	6833      	ldr	r3, [r6, #0]
 8003408:	461c      	mov	r4, r3
 800340a:	bb34      	cbnz	r4, 800345a <_malloc_r+0x82>
 800340c:	4629      	mov	r1, r5
 800340e:	4638      	mov	r0, r7
 8003410:	f7ff ffc2 	bl	8003398 <sbrk_aligned>
 8003414:	1c43      	adds	r3, r0, #1
 8003416:	4604      	mov	r4, r0
 8003418:	d14d      	bne.n	80034b6 <_malloc_r+0xde>
 800341a:	6834      	ldr	r4, [r6, #0]
 800341c:	4626      	mov	r6, r4
 800341e:	2e00      	cmp	r6, #0
 8003420:	d140      	bne.n	80034a4 <_malloc_r+0xcc>
 8003422:	6823      	ldr	r3, [r4, #0]
 8003424:	4631      	mov	r1, r6
 8003426:	4638      	mov	r0, r7
 8003428:	eb04 0803 	add.w	r8, r4, r3
 800342c:	f000 f940 	bl	80036b0 <_sbrk_r>
 8003430:	4580      	cmp	r8, r0
 8003432:	d13a      	bne.n	80034aa <_malloc_r+0xd2>
 8003434:	6821      	ldr	r1, [r4, #0]
 8003436:	3503      	adds	r5, #3
 8003438:	1a6d      	subs	r5, r5, r1
 800343a:	f025 0503 	bic.w	r5, r5, #3
 800343e:	3508      	adds	r5, #8
 8003440:	2d0c      	cmp	r5, #12
 8003442:	bf38      	it	cc
 8003444:	250c      	movcc	r5, #12
 8003446:	4638      	mov	r0, r7
 8003448:	4629      	mov	r1, r5
 800344a:	f7ff ffa5 	bl	8003398 <sbrk_aligned>
 800344e:	3001      	adds	r0, #1
 8003450:	d02b      	beq.n	80034aa <_malloc_r+0xd2>
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	442b      	add	r3, r5
 8003456:	6023      	str	r3, [r4, #0]
 8003458:	e00e      	b.n	8003478 <_malloc_r+0xa0>
 800345a:	6822      	ldr	r2, [r4, #0]
 800345c:	1b52      	subs	r2, r2, r5
 800345e:	d41e      	bmi.n	800349e <_malloc_r+0xc6>
 8003460:	2a0b      	cmp	r2, #11
 8003462:	d916      	bls.n	8003492 <_malloc_r+0xba>
 8003464:	1961      	adds	r1, r4, r5
 8003466:	42a3      	cmp	r3, r4
 8003468:	6025      	str	r5, [r4, #0]
 800346a:	bf18      	it	ne
 800346c:	6059      	strne	r1, [r3, #4]
 800346e:	6863      	ldr	r3, [r4, #4]
 8003470:	bf08      	it	eq
 8003472:	6031      	streq	r1, [r6, #0]
 8003474:	5162      	str	r2, [r4, r5]
 8003476:	604b      	str	r3, [r1, #4]
 8003478:	4638      	mov	r0, r7
 800347a:	f104 060b 	add.w	r6, r4, #11
 800347e:	f000 fb89 	bl	8003b94 <__malloc_unlock>
 8003482:	f026 0607 	bic.w	r6, r6, #7
 8003486:	1d23      	adds	r3, r4, #4
 8003488:	1af2      	subs	r2, r6, r3
 800348a:	d0b6      	beq.n	80033fa <_malloc_r+0x22>
 800348c:	1b9b      	subs	r3, r3, r6
 800348e:	50a3      	str	r3, [r4, r2]
 8003490:	e7b3      	b.n	80033fa <_malloc_r+0x22>
 8003492:	6862      	ldr	r2, [r4, #4]
 8003494:	42a3      	cmp	r3, r4
 8003496:	bf0c      	ite	eq
 8003498:	6032      	streq	r2, [r6, #0]
 800349a:	605a      	strne	r2, [r3, #4]
 800349c:	e7ec      	b.n	8003478 <_malloc_r+0xa0>
 800349e:	4623      	mov	r3, r4
 80034a0:	6864      	ldr	r4, [r4, #4]
 80034a2:	e7b2      	b.n	800340a <_malloc_r+0x32>
 80034a4:	4634      	mov	r4, r6
 80034a6:	6876      	ldr	r6, [r6, #4]
 80034a8:	e7b9      	b.n	800341e <_malloc_r+0x46>
 80034aa:	230c      	movs	r3, #12
 80034ac:	4638      	mov	r0, r7
 80034ae:	603b      	str	r3, [r7, #0]
 80034b0:	f000 fb70 	bl	8003b94 <__malloc_unlock>
 80034b4:	e7a1      	b.n	80033fa <_malloc_r+0x22>
 80034b6:	6025      	str	r5, [r4, #0]
 80034b8:	e7de      	b.n	8003478 <_malloc_r+0xa0>
 80034ba:	bf00      	nop
 80034bc:	20001128 	.word	0x20001128

080034c0 <iprintf>:
 80034c0:	b40f      	push	{r0, r1, r2, r3}
 80034c2:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <iprintf+0x2c>)
 80034c4:	b513      	push	{r0, r1, r4, lr}
 80034c6:	681c      	ldr	r4, [r3, #0]
 80034c8:	b124      	cbz	r4, 80034d4 <iprintf+0x14>
 80034ca:	69a3      	ldr	r3, [r4, #24]
 80034cc:	b913      	cbnz	r3, 80034d4 <iprintf+0x14>
 80034ce:	4620      	mov	r0, r4
 80034d0:	f7ff fe94 	bl	80031fc <__sinit>
 80034d4:	ab05      	add	r3, sp, #20
 80034d6:	4620      	mov	r0, r4
 80034d8:	9a04      	ldr	r2, [sp, #16]
 80034da:	68a1      	ldr	r1, [r4, #8]
 80034dc:	9301      	str	r3, [sp, #4]
 80034de:	f000 fbcf 	bl	8003c80 <_vfiprintf_r>
 80034e2:	b002      	add	sp, #8
 80034e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034e8:	b004      	add	sp, #16
 80034ea:	4770      	bx	lr
 80034ec:	20000010 	.word	0x20000010

080034f0 <_puts_r>:
 80034f0:	b570      	push	{r4, r5, r6, lr}
 80034f2:	460e      	mov	r6, r1
 80034f4:	4605      	mov	r5, r0
 80034f6:	b118      	cbz	r0, 8003500 <_puts_r+0x10>
 80034f8:	6983      	ldr	r3, [r0, #24]
 80034fa:	b90b      	cbnz	r3, 8003500 <_puts_r+0x10>
 80034fc:	f7ff fe7e 	bl	80031fc <__sinit>
 8003500:	69ab      	ldr	r3, [r5, #24]
 8003502:	68ac      	ldr	r4, [r5, #8]
 8003504:	b913      	cbnz	r3, 800350c <_puts_r+0x1c>
 8003506:	4628      	mov	r0, r5
 8003508:	f7ff fe78 	bl	80031fc <__sinit>
 800350c:	4b2c      	ldr	r3, [pc, #176]	; (80035c0 <_puts_r+0xd0>)
 800350e:	429c      	cmp	r4, r3
 8003510:	d120      	bne.n	8003554 <_puts_r+0x64>
 8003512:	686c      	ldr	r4, [r5, #4]
 8003514:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003516:	07db      	lsls	r3, r3, #31
 8003518:	d405      	bmi.n	8003526 <_puts_r+0x36>
 800351a:	89a3      	ldrh	r3, [r4, #12]
 800351c:	0598      	lsls	r0, r3, #22
 800351e:	d402      	bmi.n	8003526 <_puts_r+0x36>
 8003520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003522:	f7ff ff2e 	bl	8003382 <__retarget_lock_acquire_recursive>
 8003526:	89a3      	ldrh	r3, [r4, #12]
 8003528:	0719      	lsls	r1, r3, #28
 800352a:	d51d      	bpl.n	8003568 <_puts_r+0x78>
 800352c:	6923      	ldr	r3, [r4, #16]
 800352e:	b1db      	cbz	r3, 8003568 <_puts_r+0x78>
 8003530:	3e01      	subs	r6, #1
 8003532:	68a3      	ldr	r3, [r4, #8]
 8003534:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003538:	3b01      	subs	r3, #1
 800353a:	60a3      	str	r3, [r4, #8]
 800353c:	bb39      	cbnz	r1, 800358e <_puts_r+0x9e>
 800353e:	2b00      	cmp	r3, #0
 8003540:	da38      	bge.n	80035b4 <_puts_r+0xc4>
 8003542:	4622      	mov	r2, r4
 8003544:	210a      	movs	r1, #10
 8003546:	4628      	mov	r0, r5
 8003548:	f000 f906 	bl	8003758 <__swbuf_r>
 800354c:	3001      	adds	r0, #1
 800354e:	d011      	beq.n	8003574 <_puts_r+0x84>
 8003550:	250a      	movs	r5, #10
 8003552:	e011      	b.n	8003578 <_puts_r+0x88>
 8003554:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <_puts_r+0xd4>)
 8003556:	429c      	cmp	r4, r3
 8003558:	d101      	bne.n	800355e <_puts_r+0x6e>
 800355a:	68ac      	ldr	r4, [r5, #8]
 800355c:	e7da      	b.n	8003514 <_puts_r+0x24>
 800355e:	4b1a      	ldr	r3, [pc, #104]	; (80035c8 <_puts_r+0xd8>)
 8003560:	429c      	cmp	r4, r3
 8003562:	bf08      	it	eq
 8003564:	68ec      	ldreq	r4, [r5, #12]
 8003566:	e7d5      	b.n	8003514 <_puts_r+0x24>
 8003568:	4621      	mov	r1, r4
 800356a:	4628      	mov	r0, r5
 800356c:	f000 f958 	bl	8003820 <__swsetup_r>
 8003570:	2800      	cmp	r0, #0
 8003572:	d0dd      	beq.n	8003530 <_puts_r+0x40>
 8003574:	f04f 35ff 	mov.w	r5, #4294967295
 8003578:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800357a:	07da      	lsls	r2, r3, #31
 800357c:	d405      	bmi.n	800358a <_puts_r+0x9a>
 800357e:	89a3      	ldrh	r3, [r4, #12]
 8003580:	059b      	lsls	r3, r3, #22
 8003582:	d402      	bmi.n	800358a <_puts_r+0x9a>
 8003584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003586:	f7ff fefd 	bl	8003384 <__retarget_lock_release_recursive>
 800358a:	4628      	mov	r0, r5
 800358c:	bd70      	pop	{r4, r5, r6, pc}
 800358e:	2b00      	cmp	r3, #0
 8003590:	da04      	bge.n	800359c <_puts_r+0xac>
 8003592:	69a2      	ldr	r2, [r4, #24]
 8003594:	429a      	cmp	r2, r3
 8003596:	dc06      	bgt.n	80035a6 <_puts_r+0xb6>
 8003598:	290a      	cmp	r1, #10
 800359a:	d004      	beq.n	80035a6 <_puts_r+0xb6>
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	6022      	str	r2, [r4, #0]
 80035a2:	7019      	strb	r1, [r3, #0]
 80035a4:	e7c5      	b.n	8003532 <_puts_r+0x42>
 80035a6:	4622      	mov	r2, r4
 80035a8:	4628      	mov	r0, r5
 80035aa:	f000 f8d5 	bl	8003758 <__swbuf_r>
 80035ae:	3001      	adds	r0, #1
 80035b0:	d1bf      	bne.n	8003532 <_puts_r+0x42>
 80035b2:	e7df      	b.n	8003574 <_puts_r+0x84>
 80035b4:	250a      	movs	r5, #10
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	6022      	str	r2, [r4, #0]
 80035bc:	701d      	strb	r5, [r3, #0]
 80035be:	e7db      	b.n	8003578 <_puts_r+0x88>
 80035c0:	0800435c 	.word	0x0800435c
 80035c4:	0800437c 	.word	0x0800437c
 80035c8:	0800433c 	.word	0x0800433c

080035cc <puts>:
 80035cc:	4b02      	ldr	r3, [pc, #8]	; (80035d8 <puts+0xc>)
 80035ce:	4601      	mov	r1, r0
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	f7ff bf8d 	b.w	80034f0 <_puts_r>
 80035d6:	bf00      	nop
 80035d8:	20000010 	.word	0x20000010

080035dc <cleanup_glue>:
 80035dc:	b538      	push	{r3, r4, r5, lr}
 80035de:	460c      	mov	r4, r1
 80035e0:	6809      	ldr	r1, [r1, #0]
 80035e2:	4605      	mov	r5, r0
 80035e4:	b109      	cbz	r1, 80035ea <cleanup_glue+0xe>
 80035e6:	f7ff fff9 	bl	80035dc <cleanup_glue>
 80035ea:	4621      	mov	r1, r4
 80035ec:	4628      	mov	r0, r5
 80035ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035f2:	f000 bad5 	b.w	8003ba0 <_free_r>
	...

080035f8 <_reclaim_reent>:
 80035f8:	4b2c      	ldr	r3, [pc, #176]	; (80036ac <_reclaim_reent+0xb4>)
 80035fa:	b570      	push	{r4, r5, r6, lr}
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4604      	mov	r4, r0
 8003600:	4283      	cmp	r3, r0
 8003602:	d051      	beq.n	80036a8 <_reclaim_reent+0xb0>
 8003604:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003606:	b143      	cbz	r3, 800361a <_reclaim_reent+0x22>
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d14a      	bne.n	80036a4 <_reclaim_reent+0xac>
 800360e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003610:	6819      	ldr	r1, [r3, #0]
 8003612:	b111      	cbz	r1, 800361a <_reclaim_reent+0x22>
 8003614:	4620      	mov	r0, r4
 8003616:	f000 fac3 	bl	8003ba0 <_free_r>
 800361a:	6961      	ldr	r1, [r4, #20]
 800361c:	b111      	cbz	r1, 8003624 <_reclaim_reent+0x2c>
 800361e:	4620      	mov	r0, r4
 8003620:	f000 fabe 	bl	8003ba0 <_free_r>
 8003624:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003626:	b111      	cbz	r1, 800362e <_reclaim_reent+0x36>
 8003628:	4620      	mov	r0, r4
 800362a:	f000 fab9 	bl	8003ba0 <_free_r>
 800362e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003630:	b111      	cbz	r1, 8003638 <_reclaim_reent+0x40>
 8003632:	4620      	mov	r0, r4
 8003634:	f000 fab4 	bl	8003ba0 <_free_r>
 8003638:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800363a:	b111      	cbz	r1, 8003642 <_reclaim_reent+0x4a>
 800363c:	4620      	mov	r0, r4
 800363e:	f000 faaf 	bl	8003ba0 <_free_r>
 8003642:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003644:	b111      	cbz	r1, 800364c <_reclaim_reent+0x54>
 8003646:	4620      	mov	r0, r4
 8003648:	f000 faaa 	bl	8003ba0 <_free_r>
 800364c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800364e:	b111      	cbz	r1, 8003656 <_reclaim_reent+0x5e>
 8003650:	4620      	mov	r0, r4
 8003652:	f000 faa5 	bl	8003ba0 <_free_r>
 8003656:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003658:	b111      	cbz	r1, 8003660 <_reclaim_reent+0x68>
 800365a:	4620      	mov	r0, r4
 800365c:	f000 faa0 	bl	8003ba0 <_free_r>
 8003660:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003662:	b111      	cbz	r1, 800366a <_reclaim_reent+0x72>
 8003664:	4620      	mov	r0, r4
 8003666:	f000 fa9b 	bl	8003ba0 <_free_r>
 800366a:	69a3      	ldr	r3, [r4, #24]
 800366c:	b1e3      	cbz	r3, 80036a8 <_reclaim_reent+0xb0>
 800366e:	4620      	mov	r0, r4
 8003670:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003672:	4798      	blx	r3
 8003674:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003676:	b1b9      	cbz	r1, 80036a8 <_reclaim_reent+0xb0>
 8003678:	4620      	mov	r0, r4
 800367a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800367e:	f7ff bfad 	b.w	80035dc <cleanup_glue>
 8003682:	5949      	ldr	r1, [r1, r5]
 8003684:	b941      	cbnz	r1, 8003698 <_reclaim_reent+0xa0>
 8003686:	3504      	adds	r5, #4
 8003688:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800368a:	2d80      	cmp	r5, #128	; 0x80
 800368c:	68d9      	ldr	r1, [r3, #12]
 800368e:	d1f8      	bne.n	8003682 <_reclaim_reent+0x8a>
 8003690:	4620      	mov	r0, r4
 8003692:	f000 fa85 	bl	8003ba0 <_free_r>
 8003696:	e7ba      	b.n	800360e <_reclaim_reent+0x16>
 8003698:	680e      	ldr	r6, [r1, #0]
 800369a:	4620      	mov	r0, r4
 800369c:	f000 fa80 	bl	8003ba0 <_free_r>
 80036a0:	4631      	mov	r1, r6
 80036a2:	e7ef      	b.n	8003684 <_reclaim_reent+0x8c>
 80036a4:	2500      	movs	r5, #0
 80036a6:	e7ef      	b.n	8003688 <_reclaim_reent+0x90>
 80036a8:	bd70      	pop	{r4, r5, r6, pc}
 80036aa:	bf00      	nop
 80036ac:	20000010 	.word	0x20000010

080036b0 <_sbrk_r>:
 80036b0:	b538      	push	{r3, r4, r5, lr}
 80036b2:	2300      	movs	r3, #0
 80036b4:	4d05      	ldr	r5, [pc, #20]	; (80036cc <_sbrk_r+0x1c>)
 80036b6:	4604      	mov	r4, r0
 80036b8:	4608      	mov	r0, r1
 80036ba:	602b      	str	r3, [r5, #0]
 80036bc:	f7fd f85a 	bl	8000774 <_sbrk>
 80036c0:	1c43      	adds	r3, r0, #1
 80036c2:	d102      	bne.n	80036ca <_sbrk_r+0x1a>
 80036c4:	682b      	ldr	r3, [r5, #0]
 80036c6:	b103      	cbz	r3, 80036ca <_sbrk_r+0x1a>
 80036c8:	6023      	str	r3, [r4, #0]
 80036ca:	bd38      	pop	{r3, r4, r5, pc}
 80036cc:	20001130 	.word	0x20001130

080036d0 <__sread>:
 80036d0:	b510      	push	{r4, lr}
 80036d2:	460c      	mov	r4, r1
 80036d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036d8:	f000 fd98 	bl	800420c <_read_r>
 80036dc:	2800      	cmp	r0, #0
 80036de:	bfab      	itete	ge
 80036e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80036e2:	89a3      	ldrhlt	r3, [r4, #12]
 80036e4:	181b      	addge	r3, r3, r0
 80036e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80036ea:	bfac      	ite	ge
 80036ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80036ee:	81a3      	strhlt	r3, [r4, #12]
 80036f0:	bd10      	pop	{r4, pc}

080036f2 <__swrite>:
 80036f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036f6:	461f      	mov	r7, r3
 80036f8:	898b      	ldrh	r3, [r1, #12]
 80036fa:	4605      	mov	r5, r0
 80036fc:	05db      	lsls	r3, r3, #23
 80036fe:	460c      	mov	r4, r1
 8003700:	4616      	mov	r6, r2
 8003702:	d505      	bpl.n	8003710 <__swrite+0x1e>
 8003704:	2302      	movs	r3, #2
 8003706:	2200      	movs	r2, #0
 8003708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800370c:	f000 f9c4 	bl	8003a98 <_lseek_r>
 8003710:	89a3      	ldrh	r3, [r4, #12]
 8003712:	4632      	mov	r2, r6
 8003714:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003718:	81a3      	strh	r3, [r4, #12]
 800371a:	4628      	mov	r0, r5
 800371c:	463b      	mov	r3, r7
 800371e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003726:	f000 b869 	b.w	80037fc <_write_r>

0800372a <__sseek>:
 800372a:	b510      	push	{r4, lr}
 800372c:	460c      	mov	r4, r1
 800372e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003732:	f000 f9b1 	bl	8003a98 <_lseek_r>
 8003736:	1c43      	adds	r3, r0, #1
 8003738:	89a3      	ldrh	r3, [r4, #12]
 800373a:	bf15      	itete	ne
 800373c:	6560      	strne	r0, [r4, #84]	; 0x54
 800373e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003742:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003746:	81a3      	strheq	r3, [r4, #12]
 8003748:	bf18      	it	ne
 800374a:	81a3      	strhne	r3, [r4, #12]
 800374c:	bd10      	pop	{r4, pc}

0800374e <__sclose>:
 800374e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003752:	f000 b8d3 	b.w	80038fc <_close_r>
	...

08003758 <__swbuf_r>:
 8003758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375a:	460e      	mov	r6, r1
 800375c:	4614      	mov	r4, r2
 800375e:	4605      	mov	r5, r0
 8003760:	b118      	cbz	r0, 800376a <__swbuf_r+0x12>
 8003762:	6983      	ldr	r3, [r0, #24]
 8003764:	b90b      	cbnz	r3, 800376a <__swbuf_r+0x12>
 8003766:	f7ff fd49 	bl	80031fc <__sinit>
 800376a:	4b21      	ldr	r3, [pc, #132]	; (80037f0 <__swbuf_r+0x98>)
 800376c:	429c      	cmp	r4, r3
 800376e:	d12b      	bne.n	80037c8 <__swbuf_r+0x70>
 8003770:	686c      	ldr	r4, [r5, #4]
 8003772:	69a3      	ldr	r3, [r4, #24]
 8003774:	60a3      	str	r3, [r4, #8]
 8003776:	89a3      	ldrh	r3, [r4, #12]
 8003778:	071a      	lsls	r2, r3, #28
 800377a:	d52f      	bpl.n	80037dc <__swbuf_r+0x84>
 800377c:	6923      	ldr	r3, [r4, #16]
 800377e:	b36b      	cbz	r3, 80037dc <__swbuf_r+0x84>
 8003780:	6923      	ldr	r3, [r4, #16]
 8003782:	6820      	ldr	r0, [r4, #0]
 8003784:	b2f6      	uxtb	r6, r6
 8003786:	1ac0      	subs	r0, r0, r3
 8003788:	6963      	ldr	r3, [r4, #20]
 800378a:	4637      	mov	r7, r6
 800378c:	4283      	cmp	r3, r0
 800378e:	dc04      	bgt.n	800379a <__swbuf_r+0x42>
 8003790:	4621      	mov	r1, r4
 8003792:	4628      	mov	r0, r5
 8003794:	f000 f944 	bl	8003a20 <_fflush_r>
 8003798:	bb30      	cbnz	r0, 80037e8 <__swbuf_r+0x90>
 800379a:	68a3      	ldr	r3, [r4, #8]
 800379c:	3001      	adds	r0, #1
 800379e:	3b01      	subs	r3, #1
 80037a0:	60a3      	str	r3, [r4, #8]
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	6022      	str	r2, [r4, #0]
 80037a8:	701e      	strb	r6, [r3, #0]
 80037aa:	6963      	ldr	r3, [r4, #20]
 80037ac:	4283      	cmp	r3, r0
 80037ae:	d004      	beq.n	80037ba <__swbuf_r+0x62>
 80037b0:	89a3      	ldrh	r3, [r4, #12]
 80037b2:	07db      	lsls	r3, r3, #31
 80037b4:	d506      	bpl.n	80037c4 <__swbuf_r+0x6c>
 80037b6:	2e0a      	cmp	r6, #10
 80037b8:	d104      	bne.n	80037c4 <__swbuf_r+0x6c>
 80037ba:	4621      	mov	r1, r4
 80037bc:	4628      	mov	r0, r5
 80037be:	f000 f92f 	bl	8003a20 <_fflush_r>
 80037c2:	b988      	cbnz	r0, 80037e8 <__swbuf_r+0x90>
 80037c4:	4638      	mov	r0, r7
 80037c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037c8:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <__swbuf_r+0x9c>)
 80037ca:	429c      	cmp	r4, r3
 80037cc:	d101      	bne.n	80037d2 <__swbuf_r+0x7a>
 80037ce:	68ac      	ldr	r4, [r5, #8]
 80037d0:	e7cf      	b.n	8003772 <__swbuf_r+0x1a>
 80037d2:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <__swbuf_r+0xa0>)
 80037d4:	429c      	cmp	r4, r3
 80037d6:	bf08      	it	eq
 80037d8:	68ec      	ldreq	r4, [r5, #12]
 80037da:	e7ca      	b.n	8003772 <__swbuf_r+0x1a>
 80037dc:	4621      	mov	r1, r4
 80037de:	4628      	mov	r0, r5
 80037e0:	f000 f81e 	bl	8003820 <__swsetup_r>
 80037e4:	2800      	cmp	r0, #0
 80037e6:	d0cb      	beq.n	8003780 <__swbuf_r+0x28>
 80037e8:	f04f 37ff 	mov.w	r7, #4294967295
 80037ec:	e7ea      	b.n	80037c4 <__swbuf_r+0x6c>
 80037ee:	bf00      	nop
 80037f0:	0800435c 	.word	0x0800435c
 80037f4:	0800437c 	.word	0x0800437c
 80037f8:	0800433c 	.word	0x0800433c

080037fc <_write_r>:
 80037fc:	b538      	push	{r3, r4, r5, lr}
 80037fe:	4604      	mov	r4, r0
 8003800:	4608      	mov	r0, r1
 8003802:	4611      	mov	r1, r2
 8003804:	2200      	movs	r2, #0
 8003806:	4d05      	ldr	r5, [pc, #20]	; (800381c <_write_r+0x20>)
 8003808:	602a      	str	r2, [r5, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	f7fc ff65 	bl	80006da <_write>
 8003810:	1c43      	adds	r3, r0, #1
 8003812:	d102      	bne.n	800381a <_write_r+0x1e>
 8003814:	682b      	ldr	r3, [r5, #0]
 8003816:	b103      	cbz	r3, 800381a <_write_r+0x1e>
 8003818:	6023      	str	r3, [r4, #0]
 800381a:	bd38      	pop	{r3, r4, r5, pc}
 800381c:	20001130 	.word	0x20001130

08003820 <__swsetup_r>:
 8003820:	4b32      	ldr	r3, [pc, #200]	; (80038ec <__swsetup_r+0xcc>)
 8003822:	b570      	push	{r4, r5, r6, lr}
 8003824:	681d      	ldr	r5, [r3, #0]
 8003826:	4606      	mov	r6, r0
 8003828:	460c      	mov	r4, r1
 800382a:	b125      	cbz	r5, 8003836 <__swsetup_r+0x16>
 800382c:	69ab      	ldr	r3, [r5, #24]
 800382e:	b913      	cbnz	r3, 8003836 <__swsetup_r+0x16>
 8003830:	4628      	mov	r0, r5
 8003832:	f7ff fce3 	bl	80031fc <__sinit>
 8003836:	4b2e      	ldr	r3, [pc, #184]	; (80038f0 <__swsetup_r+0xd0>)
 8003838:	429c      	cmp	r4, r3
 800383a:	d10f      	bne.n	800385c <__swsetup_r+0x3c>
 800383c:	686c      	ldr	r4, [r5, #4]
 800383e:	89a3      	ldrh	r3, [r4, #12]
 8003840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003844:	0719      	lsls	r1, r3, #28
 8003846:	d42c      	bmi.n	80038a2 <__swsetup_r+0x82>
 8003848:	06dd      	lsls	r5, r3, #27
 800384a:	d411      	bmi.n	8003870 <__swsetup_r+0x50>
 800384c:	2309      	movs	r3, #9
 800384e:	6033      	str	r3, [r6, #0]
 8003850:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003854:	f04f 30ff 	mov.w	r0, #4294967295
 8003858:	81a3      	strh	r3, [r4, #12]
 800385a:	e03e      	b.n	80038da <__swsetup_r+0xba>
 800385c:	4b25      	ldr	r3, [pc, #148]	; (80038f4 <__swsetup_r+0xd4>)
 800385e:	429c      	cmp	r4, r3
 8003860:	d101      	bne.n	8003866 <__swsetup_r+0x46>
 8003862:	68ac      	ldr	r4, [r5, #8]
 8003864:	e7eb      	b.n	800383e <__swsetup_r+0x1e>
 8003866:	4b24      	ldr	r3, [pc, #144]	; (80038f8 <__swsetup_r+0xd8>)
 8003868:	429c      	cmp	r4, r3
 800386a:	bf08      	it	eq
 800386c:	68ec      	ldreq	r4, [r5, #12]
 800386e:	e7e6      	b.n	800383e <__swsetup_r+0x1e>
 8003870:	0758      	lsls	r0, r3, #29
 8003872:	d512      	bpl.n	800389a <__swsetup_r+0x7a>
 8003874:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003876:	b141      	cbz	r1, 800388a <__swsetup_r+0x6a>
 8003878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800387c:	4299      	cmp	r1, r3
 800387e:	d002      	beq.n	8003886 <__swsetup_r+0x66>
 8003880:	4630      	mov	r0, r6
 8003882:	f000 f98d 	bl	8003ba0 <_free_r>
 8003886:	2300      	movs	r3, #0
 8003888:	6363      	str	r3, [r4, #52]	; 0x34
 800388a:	89a3      	ldrh	r3, [r4, #12]
 800388c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003890:	81a3      	strh	r3, [r4, #12]
 8003892:	2300      	movs	r3, #0
 8003894:	6063      	str	r3, [r4, #4]
 8003896:	6923      	ldr	r3, [r4, #16]
 8003898:	6023      	str	r3, [r4, #0]
 800389a:	89a3      	ldrh	r3, [r4, #12]
 800389c:	f043 0308 	orr.w	r3, r3, #8
 80038a0:	81a3      	strh	r3, [r4, #12]
 80038a2:	6923      	ldr	r3, [r4, #16]
 80038a4:	b94b      	cbnz	r3, 80038ba <__swsetup_r+0x9a>
 80038a6:	89a3      	ldrh	r3, [r4, #12]
 80038a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80038ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b0:	d003      	beq.n	80038ba <__swsetup_r+0x9a>
 80038b2:	4621      	mov	r1, r4
 80038b4:	4630      	mov	r0, r6
 80038b6:	f000 f927 	bl	8003b08 <__smakebuf_r>
 80038ba:	89a0      	ldrh	r0, [r4, #12]
 80038bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038c0:	f010 0301 	ands.w	r3, r0, #1
 80038c4:	d00a      	beq.n	80038dc <__swsetup_r+0xbc>
 80038c6:	2300      	movs	r3, #0
 80038c8:	60a3      	str	r3, [r4, #8]
 80038ca:	6963      	ldr	r3, [r4, #20]
 80038cc:	425b      	negs	r3, r3
 80038ce:	61a3      	str	r3, [r4, #24]
 80038d0:	6923      	ldr	r3, [r4, #16]
 80038d2:	b943      	cbnz	r3, 80038e6 <__swsetup_r+0xc6>
 80038d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80038d8:	d1ba      	bne.n	8003850 <__swsetup_r+0x30>
 80038da:	bd70      	pop	{r4, r5, r6, pc}
 80038dc:	0781      	lsls	r1, r0, #30
 80038de:	bf58      	it	pl
 80038e0:	6963      	ldrpl	r3, [r4, #20]
 80038e2:	60a3      	str	r3, [r4, #8]
 80038e4:	e7f4      	b.n	80038d0 <__swsetup_r+0xb0>
 80038e6:	2000      	movs	r0, #0
 80038e8:	e7f7      	b.n	80038da <__swsetup_r+0xba>
 80038ea:	bf00      	nop
 80038ec:	20000010 	.word	0x20000010
 80038f0:	0800435c 	.word	0x0800435c
 80038f4:	0800437c 	.word	0x0800437c
 80038f8:	0800433c 	.word	0x0800433c

080038fc <_close_r>:
 80038fc:	b538      	push	{r3, r4, r5, lr}
 80038fe:	2300      	movs	r3, #0
 8003900:	4d05      	ldr	r5, [pc, #20]	; (8003918 <_close_r+0x1c>)
 8003902:	4604      	mov	r4, r0
 8003904:	4608      	mov	r0, r1
 8003906:	602b      	str	r3, [r5, #0]
 8003908:	f7fc ff03 	bl	8000712 <_close>
 800390c:	1c43      	adds	r3, r0, #1
 800390e:	d102      	bne.n	8003916 <_close_r+0x1a>
 8003910:	682b      	ldr	r3, [r5, #0]
 8003912:	b103      	cbz	r3, 8003916 <_close_r+0x1a>
 8003914:	6023      	str	r3, [r4, #0]
 8003916:	bd38      	pop	{r3, r4, r5, pc}
 8003918:	20001130 	.word	0x20001130

0800391c <__sflush_r>:
 800391c:	898a      	ldrh	r2, [r1, #12]
 800391e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003920:	4605      	mov	r5, r0
 8003922:	0710      	lsls	r0, r2, #28
 8003924:	460c      	mov	r4, r1
 8003926:	d457      	bmi.n	80039d8 <__sflush_r+0xbc>
 8003928:	684b      	ldr	r3, [r1, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	dc04      	bgt.n	8003938 <__sflush_r+0x1c>
 800392e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003930:	2b00      	cmp	r3, #0
 8003932:	dc01      	bgt.n	8003938 <__sflush_r+0x1c>
 8003934:	2000      	movs	r0, #0
 8003936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800393a:	2e00      	cmp	r6, #0
 800393c:	d0fa      	beq.n	8003934 <__sflush_r+0x18>
 800393e:	2300      	movs	r3, #0
 8003940:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003944:	682f      	ldr	r7, [r5, #0]
 8003946:	602b      	str	r3, [r5, #0]
 8003948:	d032      	beq.n	80039b0 <__sflush_r+0x94>
 800394a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800394c:	89a3      	ldrh	r3, [r4, #12]
 800394e:	075a      	lsls	r2, r3, #29
 8003950:	d505      	bpl.n	800395e <__sflush_r+0x42>
 8003952:	6863      	ldr	r3, [r4, #4]
 8003954:	1ac0      	subs	r0, r0, r3
 8003956:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003958:	b10b      	cbz	r3, 800395e <__sflush_r+0x42>
 800395a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800395c:	1ac0      	subs	r0, r0, r3
 800395e:	2300      	movs	r3, #0
 8003960:	4602      	mov	r2, r0
 8003962:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003964:	4628      	mov	r0, r5
 8003966:	6a21      	ldr	r1, [r4, #32]
 8003968:	47b0      	blx	r6
 800396a:	1c43      	adds	r3, r0, #1
 800396c:	89a3      	ldrh	r3, [r4, #12]
 800396e:	d106      	bne.n	800397e <__sflush_r+0x62>
 8003970:	6829      	ldr	r1, [r5, #0]
 8003972:	291d      	cmp	r1, #29
 8003974:	d82c      	bhi.n	80039d0 <__sflush_r+0xb4>
 8003976:	4a29      	ldr	r2, [pc, #164]	; (8003a1c <__sflush_r+0x100>)
 8003978:	40ca      	lsrs	r2, r1
 800397a:	07d6      	lsls	r6, r2, #31
 800397c:	d528      	bpl.n	80039d0 <__sflush_r+0xb4>
 800397e:	2200      	movs	r2, #0
 8003980:	6062      	str	r2, [r4, #4]
 8003982:	6922      	ldr	r2, [r4, #16]
 8003984:	04d9      	lsls	r1, r3, #19
 8003986:	6022      	str	r2, [r4, #0]
 8003988:	d504      	bpl.n	8003994 <__sflush_r+0x78>
 800398a:	1c42      	adds	r2, r0, #1
 800398c:	d101      	bne.n	8003992 <__sflush_r+0x76>
 800398e:	682b      	ldr	r3, [r5, #0]
 8003990:	b903      	cbnz	r3, 8003994 <__sflush_r+0x78>
 8003992:	6560      	str	r0, [r4, #84]	; 0x54
 8003994:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003996:	602f      	str	r7, [r5, #0]
 8003998:	2900      	cmp	r1, #0
 800399a:	d0cb      	beq.n	8003934 <__sflush_r+0x18>
 800399c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039a0:	4299      	cmp	r1, r3
 80039a2:	d002      	beq.n	80039aa <__sflush_r+0x8e>
 80039a4:	4628      	mov	r0, r5
 80039a6:	f000 f8fb 	bl	8003ba0 <_free_r>
 80039aa:	2000      	movs	r0, #0
 80039ac:	6360      	str	r0, [r4, #52]	; 0x34
 80039ae:	e7c2      	b.n	8003936 <__sflush_r+0x1a>
 80039b0:	6a21      	ldr	r1, [r4, #32]
 80039b2:	2301      	movs	r3, #1
 80039b4:	4628      	mov	r0, r5
 80039b6:	47b0      	blx	r6
 80039b8:	1c41      	adds	r1, r0, #1
 80039ba:	d1c7      	bne.n	800394c <__sflush_r+0x30>
 80039bc:	682b      	ldr	r3, [r5, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0c4      	beq.n	800394c <__sflush_r+0x30>
 80039c2:	2b1d      	cmp	r3, #29
 80039c4:	d001      	beq.n	80039ca <__sflush_r+0xae>
 80039c6:	2b16      	cmp	r3, #22
 80039c8:	d101      	bne.n	80039ce <__sflush_r+0xb2>
 80039ca:	602f      	str	r7, [r5, #0]
 80039cc:	e7b2      	b.n	8003934 <__sflush_r+0x18>
 80039ce:	89a3      	ldrh	r3, [r4, #12]
 80039d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039d4:	81a3      	strh	r3, [r4, #12]
 80039d6:	e7ae      	b.n	8003936 <__sflush_r+0x1a>
 80039d8:	690f      	ldr	r7, [r1, #16]
 80039da:	2f00      	cmp	r7, #0
 80039dc:	d0aa      	beq.n	8003934 <__sflush_r+0x18>
 80039de:	0793      	lsls	r3, r2, #30
 80039e0:	bf18      	it	ne
 80039e2:	2300      	movne	r3, #0
 80039e4:	680e      	ldr	r6, [r1, #0]
 80039e6:	bf08      	it	eq
 80039e8:	694b      	ldreq	r3, [r1, #20]
 80039ea:	1bf6      	subs	r6, r6, r7
 80039ec:	600f      	str	r7, [r1, #0]
 80039ee:	608b      	str	r3, [r1, #8]
 80039f0:	2e00      	cmp	r6, #0
 80039f2:	dd9f      	ble.n	8003934 <__sflush_r+0x18>
 80039f4:	4633      	mov	r3, r6
 80039f6:	463a      	mov	r2, r7
 80039f8:	4628      	mov	r0, r5
 80039fa:	6a21      	ldr	r1, [r4, #32]
 80039fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003a00:	47e0      	blx	ip
 8003a02:	2800      	cmp	r0, #0
 8003a04:	dc06      	bgt.n	8003a14 <__sflush_r+0xf8>
 8003a06:	89a3      	ldrh	r3, [r4, #12]
 8003a08:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a10:	81a3      	strh	r3, [r4, #12]
 8003a12:	e790      	b.n	8003936 <__sflush_r+0x1a>
 8003a14:	4407      	add	r7, r0
 8003a16:	1a36      	subs	r6, r6, r0
 8003a18:	e7ea      	b.n	80039f0 <__sflush_r+0xd4>
 8003a1a:	bf00      	nop
 8003a1c:	20400001 	.word	0x20400001

08003a20 <_fflush_r>:
 8003a20:	b538      	push	{r3, r4, r5, lr}
 8003a22:	690b      	ldr	r3, [r1, #16]
 8003a24:	4605      	mov	r5, r0
 8003a26:	460c      	mov	r4, r1
 8003a28:	b913      	cbnz	r3, 8003a30 <_fflush_r+0x10>
 8003a2a:	2500      	movs	r5, #0
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	bd38      	pop	{r3, r4, r5, pc}
 8003a30:	b118      	cbz	r0, 8003a3a <_fflush_r+0x1a>
 8003a32:	6983      	ldr	r3, [r0, #24]
 8003a34:	b90b      	cbnz	r3, 8003a3a <_fflush_r+0x1a>
 8003a36:	f7ff fbe1 	bl	80031fc <__sinit>
 8003a3a:	4b14      	ldr	r3, [pc, #80]	; (8003a8c <_fflush_r+0x6c>)
 8003a3c:	429c      	cmp	r4, r3
 8003a3e:	d11b      	bne.n	8003a78 <_fflush_r+0x58>
 8003a40:	686c      	ldr	r4, [r5, #4]
 8003a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0ef      	beq.n	8003a2a <_fflush_r+0xa>
 8003a4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a4c:	07d0      	lsls	r0, r2, #31
 8003a4e:	d404      	bmi.n	8003a5a <_fflush_r+0x3a>
 8003a50:	0599      	lsls	r1, r3, #22
 8003a52:	d402      	bmi.n	8003a5a <_fflush_r+0x3a>
 8003a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a56:	f7ff fc94 	bl	8003382 <__retarget_lock_acquire_recursive>
 8003a5a:	4628      	mov	r0, r5
 8003a5c:	4621      	mov	r1, r4
 8003a5e:	f7ff ff5d 	bl	800391c <__sflush_r>
 8003a62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a64:	4605      	mov	r5, r0
 8003a66:	07da      	lsls	r2, r3, #31
 8003a68:	d4e0      	bmi.n	8003a2c <_fflush_r+0xc>
 8003a6a:	89a3      	ldrh	r3, [r4, #12]
 8003a6c:	059b      	lsls	r3, r3, #22
 8003a6e:	d4dd      	bmi.n	8003a2c <_fflush_r+0xc>
 8003a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a72:	f7ff fc87 	bl	8003384 <__retarget_lock_release_recursive>
 8003a76:	e7d9      	b.n	8003a2c <_fflush_r+0xc>
 8003a78:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <_fflush_r+0x70>)
 8003a7a:	429c      	cmp	r4, r3
 8003a7c:	d101      	bne.n	8003a82 <_fflush_r+0x62>
 8003a7e:	68ac      	ldr	r4, [r5, #8]
 8003a80:	e7df      	b.n	8003a42 <_fflush_r+0x22>
 8003a82:	4b04      	ldr	r3, [pc, #16]	; (8003a94 <_fflush_r+0x74>)
 8003a84:	429c      	cmp	r4, r3
 8003a86:	bf08      	it	eq
 8003a88:	68ec      	ldreq	r4, [r5, #12]
 8003a8a:	e7da      	b.n	8003a42 <_fflush_r+0x22>
 8003a8c:	0800435c 	.word	0x0800435c
 8003a90:	0800437c 	.word	0x0800437c
 8003a94:	0800433c 	.word	0x0800433c

08003a98 <_lseek_r>:
 8003a98:	b538      	push	{r3, r4, r5, lr}
 8003a9a:	4604      	mov	r4, r0
 8003a9c:	4608      	mov	r0, r1
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	4d05      	ldr	r5, [pc, #20]	; (8003ab8 <_lseek_r+0x20>)
 8003aa4:	602a      	str	r2, [r5, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	f7fc fe57 	bl	800075a <_lseek>
 8003aac:	1c43      	adds	r3, r0, #1
 8003aae:	d102      	bne.n	8003ab6 <_lseek_r+0x1e>
 8003ab0:	682b      	ldr	r3, [r5, #0]
 8003ab2:	b103      	cbz	r3, 8003ab6 <_lseek_r+0x1e>
 8003ab4:	6023      	str	r3, [r4, #0]
 8003ab6:	bd38      	pop	{r3, r4, r5, pc}
 8003ab8:	20001130 	.word	0x20001130

08003abc <__swhatbuf_r>:
 8003abc:	b570      	push	{r4, r5, r6, lr}
 8003abe:	460e      	mov	r6, r1
 8003ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ac4:	4614      	mov	r4, r2
 8003ac6:	2900      	cmp	r1, #0
 8003ac8:	461d      	mov	r5, r3
 8003aca:	b096      	sub	sp, #88	; 0x58
 8003acc:	da08      	bge.n	8003ae0 <__swhatbuf_r+0x24>
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003ad4:	602a      	str	r2, [r5, #0]
 8003ad6:	061a      	lsls	r2, r3, #24
 8003ad8:	d410      	bmi.n	8003afc <__swhatbuf_r+0x40>
 8003ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ade:	e00e      	b.n	8003afe <__swhatbuf_r+0x42>
 8003ae0:	466a      	mov	r2, sp
 8003ae2:	f000 fba5 	bl	8004230 <_fstat_r>
 8003ae6:	2800      	cmp	r0, #0
 8003ae8:	dbf1      	blt.n	8003ace <__swhatbuf_r+0x12>
 8003aea:	9a01      	ldr	r2, [sp, #4]
 8003aec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003af0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003af4:	425a      	negs	r2, r3
 8003af6:	415a      	adcs	r2, r3
 8003af8:	602a      	str	r2, [r5, #0]
 8003afa:	e7ee      	b.n	8003ada <__swhatbuf_r+0x1e>
 8003afc:	2340      	movs	r3, #64	; 0x40
 8003afe:	2000      	movs	r0, #0
 8003b00:	6023      	str	r3, [r4, #0]
 8003b02:	b016      	add	sp, #88	; 0x58
 8003b04:	bd70      	pop	{r4, r5, r6, pc}
	...

08003b08 <__smakebuf_r>:
 8003b08:	898b      	ldrh	r3, [r1, #12]
 8003b0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b0c:	079d      	lsls	r5, r3, #30
 8003b0e:	4606      	mov	r6, r0
 8003b10:	460c      	mov	r4, r1
 8003b12:	d507      	bpl.n	8003b24 <__smakebuf_r+0x1c>
 8003b14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b18:	6023      	str	r3, [r4, #0]
 8003b1a:	6123      	str	r3, [r4, #16]
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	6163      	str	r3, [r4, #20]
 8003b20:	b002      	add	sp, #8
 8003b22:	bd70      	pop	{r4, r5, r6, pc}
 8003b24:	466a      	mov	r2, sp
 8003b26:	ab01      	add	r3, sp, #4
 8003b28:	f7ff ffc8 	bl	8003abc <__swhatbuf_r>
 8003b2c:	9900      	ldr	r1, [sp, #0]
 8003b2e:	4605      	mov	r5, r0
 8003b30:	4630      	mov	r0, r6
 8003b32:	f7ff fc51 	bl	80033d8 <_malloc_r>
 8003b36:	b948      	cbnz	r0, 8003b4c <__smakebuf_r+0x44>
 8003b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b3c:	059a      	lsls	r2, r3, #22
 8003b3e:	d4ef      	bmi.n	8003b20 <__smakebuf_r+0x18>
 8003b40:	f023 0303 	bic.w	r3, r3, #3
 8003b44:	f043 0302 	orr.w	r3, r3, #2
 8003b48:	81a3      	strh	r3, [r4, #12]
 8003b4a:	e7e3      	b.n	8003b14 <__smakebuf_r+0xc>
 8003b4c:	4b0d      	ldr	r3, [pc, #52]	; (8003b84 <__smakebuf_r+0x7c>)
 8003b4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b50:	89a3      	ldrh	r3, [r4, #12]
 8003b52:	6020      	str	r0, [r4, #0]
 8003b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b58:	81a3      	strh	r3, [r4, #12]
 8003b5a:	9b00      	ldr	r3, [sp, #0]
 8003b5c:	6120      	str	r0, [r4, #16]
 8003b5e:	6163      	str	r3, [r4, #20]
 8003b60:	9b01      	ldr	r3, [sp, #4]
 8003b62:	b15b      	cbz	r3, 8003b7c <__smakebuf_r+0x74>
 8003b64:	4630      	mov	r0, r6
 8003b66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b6a:	f000 fb73 	bl	8004254 <_isatty_r>
 8003b6e:	b128      	cbz	r0, 8003b7c <__smakebuf_r+0x74>
 8003b70:	89a3      	ldrh	r3, [r4, #12]
 8003b72:	f023 0303 	bic.w	r3, r3, #3
 8003b76:	f043 0301 	orr.w	r3, r3, #1
 8003b7a:	81a3      	strh	r3, [r4, #12]
 8003b7c:	89a0      	ldrh	r0, [r4, #12]
 8003b7e:	4305      	orrs	r5, r0
 8003b80:	81a5      	strh	r5, [r4, #12]
 8003b82:	e7cd      	b.n	8003b20 <__smakebuf_r+0x18>
 8003b84:	08003195 	.word	0x08003195

08003b88 <__malloc_lock>:
 8003b88:	4801      	ldr	r0, [pc, #4]	; (8003b90 <__malloc_lock+0x8>)
 8003b8a:	f7ff bbfa 	b.w	8003382 <__retarget_lock_acquire_recursive>
 8003b8e:	bf00      	nop
 8003b90:	20001124 	.word	0x20001124

08003b94 <__malloc_unlock>:
 8003b94:	4801      	ldr	r0, [pc, #4]	; (8003b9c <__malloc_unlock+0x8>)
 8003b96:	f7ff bbf5 	b.w	8003384 <__retarget_lock_release_recursive>
 8003b9a:	bf00      	nop
 8003b9c:	20001124 	.word	0x20001124

08003ba0 <_free_r>:
 8003ba0:	b538      	push	{r3, r4, r5, lr}
 8003ba2:	4605      	mov	r5, r0
 8003ba4:	2900      	cmp	r1, #0
 8003ba6:	d040      	beq.n	8003c2a <_free_r+0x8a>
 8003ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bac:	1f0c      	subs	r4, r1, #4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	bfb8      	it	lt
 8003bb2:	18e4      	addlt	r4, r4, r3
 8003bb4:	f7ff ffe8 	bl	8003b88 <__malloc_lock>
 8003bb8:	4a1c      	ldr	r2, [pc, #112]	; (8003c2c <_free_r+0x8c>)
 8003bba:	6813      	ldr	r3, [r2, #0]
 8003bbc:	b933      	cbnz	r3, 8003bcc <_free_r+0x2c>
 8003bbe:	6063      	str	r3, [r4, #4]
 8003bc0:	6014      	str	r4, [r2, #0]
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bc8:	f7ff bfe4 	b.w	8003b94 <__malloc_unlock>
 8003bcc:	42a3      	cmp	r3, r4
 8003bce:	d908      	bls.n	8003be2 <_free_r+0x42>
 8003bd0:	6820      	ldr	r0, [r4, #0]
 8003bd2:	1821      	adds	r1, r4, r0
 8003bd4:	428b      	cmp	r3, r1
 8003bd6:	bf01      	itttt	eq
 8003bd8:	6819      	ldreq	r1, [r3, #0]
 8003bda:	685b      	ldreq	r3, [r3, #4]
 8003bdc:	1809      	addeq	r1, r1, r0
 8003bde:	6021      	streq	r1, [r4, #0]
 8003be0:	e7ed      	b.n	8003bbe <_free_r+0x1e>
 8003be2:	461a      	mov	r2, r3
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	b10b      	cbz	r3, 8003bec <_free_r+0x4c>
 8003be8:	42a3      	cmp	r3, r4
 8003bea:	d9fa      	bls.n	8003be2 <_free_r+0x42>
 8003bec:	6811      	ldr	r1, [r2, #0]
 8003bee:	1850      	adds	r0, r2, r1
 8003bf0:	42a0      	cmp	r0, r4
 8003bf2:	d10b      	bne.n	8003c0c <_free_r+0x6c>
 8003bf4:	6820      	ldr	r0, [r4, #0]
 8003bf6:	4401      	add	r1, r0
 8003bf8:	1850      	adds	r0, r2, r1
 8003bfa:	4283      	cmp	r3, r0
 8003bfc:	6011      	str	r1, [r2, #0]
 8003bfe:	d1e0      	bne.n	8003bc2 <_free_r+0x22>
 8003c00:	6818      	ldr	r0, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	4401      	add	r1, r0
 8003c06:	6011      	str	r1, [r2, #0]
 8003c08:	6053      	str	r3, [r2, #4]
 8003c0a:	e7da      	b.n	8003bc2 <_free_r+0x22>
 8003c0c:	d902      	bls.n	8003c14 <_free_r+0x74>
 8003c0e:	230c      	movs	r3, #12
 8003c10:	602b      	str	r3, [r5, #0]
 8003c12:	e7d6      	b.n	8003bc2 <_free_r+0x22>
 8003c14:	6820      	ldr	r0, [r4, #0]
 8003c16:	1821      	adds	r1, r4, r0
 8003c18:	428b      	cmp	r3, r1
 8003c1a:	bf01      	itttt	eq
 8003c1c:	6819      	ldreq	r1, [r3, #0]
 8003c1e:	685b      	ldreq	r3, [r3, #4]
 8003c20:	1809      	addeq	r1, r1, r0
 8003c22:	6021      	streq	r1, [r4, #0]
 8003c24:	6063      	str	r3, [r4, #4]
 8003c26:	6054      	str	r4, [r2, #4]
 8003c28:	e7cb      	b.n	8003bc2 <_free_r+0x22>
 8003c2a:	bd38      	pop	{r3, r4, r5, pc}
 8003c2c:	20001128 	.word	0x20001128

08003c30 <__sfputc_r>:
 8003c30:	6893      	ldr	r3, [r2, #8]
 8003c32:	b410      	push	{r4}
 8003c34:	3b01      	subs	r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	6093      	str	r3, [r2, #8]
 8003c3a:	da07      	bge.n	8003c4c <__sfputc_r+0x1c>
 8003c3c:	6994      	ldr	r4, [r2, #24]
 8003c3e:	42a3      	cmp	r3, r4
 8003c40:	db01      	blt.n	8003c46 <__sfputc_r+0x16>
 8003c42:	290a      	cmp	r1, #10
 8003c44:	d102      	bne.n	8003c4c <__sfputc_r+0x1c>
 8003c46:	bc10      	pop	{r4}
 8003c48:	f7ff bd86 	b.w	8003758 <__swbuf_r>
 8003c4c:	6813      	ldr	r3, [r2, #0]
 8003c4e:	1c58      	adds	r0, r3, #1
 8003c50:	6010      	str	r0, [r2, #0]
 8003c52:	7019      	strb	r1, [r3, #0]
 8003c54:	4608      	mov	r0, r1
 8003c56:	bc10      	pop	{r4}
 8003c58:	4770      	bx	lr

08003c5a <__sfputs_r>:
 8003c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5c:	4606      	mov	r6, r0
 8003c5e:	460f      	mov	r7, r1
 8003c60:	4614      	mov	r4, r2
 8003c62:	18d5      	adds	r5, r2, r3
 8003c64:	42ac      	cmp	r4, r5
 8003c66:	d101      	bne.n	8003c6c <__sfputs_r+0x12>
 8003c68:	2000      	movs	r0, #0
 8003c6a:	e007      	b.n	8003c7c <__sfputs_r+0x22>
 8003c6c:	463a      	mov	r2, r7
 8003c6e:	4630      	mov	r0, r6
 8003c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c74:	f7ff ffdc 	bl	8003c30 <__sfputc_r>
 8003c78:	1c43      	adds	r3, r0, #1
 8003c7a:	d1f3      	bne.n	8003c64 <__sfputs_r+0xa>
 8003c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c80 <_vfiprintf_r>:
 8003c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c84:	460d      	mov	r5, r1
 8003c86:	4614      	mov	r4, r2
 8003c88:	4698      	mov	r8, r3
 8003c8a:	4606      	mov	r6, r0
 8003c8c:	b09d      	sub	sp, #116	; 0x74
 8003c8e:	b118      	cbz	r0, 8003c98 <_vfiprintf_r+0x18>
 8003c90:	6983      	ldr	r3, [r0, #24]
 8003c92:	b90b      	cbnz	r3, 8003c98 <_vfiprintf_r+0x18>
 8003c94:	f7ff fab2 	bl	80031fc <__sinit>
 8003c98:	4b89      	ldr	r3, [pc, #548]	; (8003ec0 <_vfiprintf_r+0x240>)
 8003c9a:	429d      	cmp	r5, r3
 8003c9c:	d11b      	bne.n	8003cd6 <_vfiprintf_r+0x56>
 8003c9e:	6875      	ldr	r5, [r6, #4]
 8003ca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ca2:	07d9      	lsls	r1, r3, #31
 8003ca4:	d405      	bmi.n	8003cb2 <_vfiprintf_r+0x32>
 8003ca6:	89ab      	ldrh	r3, [r5, #12]
 8003ca8:	059a      	lsls	r2, r3, #22
 8003caa:	d402      	bmi.n	8003cb2 <_vfiprintf_r+0x32>
 8003cac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cae:	f7ff fb68 	bl	8003382 <__retarget_lock_acquire_recursive>
 8003cb2:	89ab      	ldrh	r3, [r5, #12]
 8003cb4:	071b      	lsls	r3, r3, #28
 8003cb6:	d501      	bpl.n	8003cbc <_vfiprintf_r+0x3c>
 8003cb8:	692b      	ldr	r3, [r5, #16]
 8003cba:	b9eb      	cbnz	r3, 8003cf8 <_vfiprintf_r+0x78>
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	4630      	mov	r0, r6
 8003cc0:	f7ff fdae 	bl	8003820 <__swsetup_r>
 8003cc4:	b1c0      	cbz	r0, 8003cf8 <_vfiprintf_r+0x78>
 8003cc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cc8:	07dc      	lsls	r4, r3, #31
 8003cca:	d50e      	bpl.n	8003cea <_vfiprintf_r+0x6a>
 8003ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd0:	b01d      	add	sp, #116	; 0x74
 8003cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cd6:	4b7b      	ldr	r3, [pc, #492]	; (8003ec4 <_vfiprintf_r+0x244>)
 8003cd8:	429d      	cmp	r5, r3
 8003cda:	d101      	bne.n	8003ce0 <_vfiprintf_r+0x60>
 8003cdc:	68b5      	ldr	r5, [r6, #8]
 8003cde:	e7df      	b.n	8003ca0 <_vfiprintf_r+0x20>
 8003ce0:	4b79      	ldr	r3, [pc, #484]	; (8003ec8 <_vfiprintf_r+0x248>)
 8003ce2:	429d      	cmp	r5, r3
 8003ce4:	bf08      	it	eq
 8003ce6:	68f5      	ldreq	r5, [r6, #12]
 8003ce8:	e7da      	b.n	8003ca0 <_vfiprintf_r+0x20>
 8003cea:	89ab      	ldrh	r3, [r5, #12]
 8003cec:	0598      	lsls	r0, r3, #22
 8003cee:	d4ed      	bmi.n	8003ccc <_vfiprintf_r+0x4c>
 8003cf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cf2:	f7ff fb47 	bl	8003384 <__retarget_lock_release_recursive>
 8003cf6:	e7e9      	b.n	8003ccc <_vfiprintf_r+0x4c>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8003cfc:	2320      	movs	r3, #32
 8003cfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d02:	2330      	movs	r3, #48	; 0x30
 8003d04:	f04f 0901 	mov.w	r9, #1
 8003d08:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d0c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003ecc <_vfiprintf_r+0x24c>
 8003d10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d14:	4623      	mov	r3, r4
 8003d16:	469a      	mov	sl, r3
 8003d18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d1c:	b10a      	cbz	r2, 8003d22 <_vfiprintf_r+0xa2>
 8003d1e:	2a25      	cmp	r2, #37	; 0x25
 8003d20:	d1f9      	bne.n	8003d16 <_vfiprintf_r+0x96>
 8003d22:	ebba 0b04 	subs.w	fp, sl, r4
 8003d26:	d00b      	beq.n	8003d40 <_vfiprintf_r+0xc0>
 8003d28:	465b      	mov	r3, fp
 8003d2a:	4622      	mov	r2, r4
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	4630      	mov	r0, r6
 8003d30:	f7ff ff93 	bl	8003c5a <__sfputs_r>
 8003d34:	3001      	adds	r0, #1
 8003d36:	f000 80aa 	beq.w	8003e8e <_vfiprintf_r+0x20e>
 8003d3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d3c:	445a      	add	r2, fp
 8003d3e:	9209      	str	r2, [sp, #36]	; 0x24
 8003d40:	f89a 3000 	ldrb.w	r3, [sl]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 80a2 	beq.w	8003e8e <_vfiprintf_r+0x20e>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d54:	f10a 0a01 	add.w	sl, sl, #1
 8003d58:	9304      	str	r3, [sp, #16]
 8003d5a:	9307      	str	r3, [sp, #28]
 8003d5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d60:	931a      	str	r3, [sp, #104]	; 0x68
 8003d62:	4654      	mov	r4, sl
 8003d64:	2205      	movs	r2, #5
 8003d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d6a:	4858      	ldr	r0, [pc, #352]	; (8003ecc <_vfiprintf_r+0x24c>)
 8003d6c:	f000 fa82 	bl	8004274 <memchr>
 8003d70:	9a04      	ldr	r2, [sp, #16]
 8003d72:	b9d8      	cbnz	r0, 8003dac <_vfiprintf_r+0x12c>
 8003d74:	06d1      	lsls	r1, r2, #27
 8003d76:	bf44      	itt	mi
 8003d78:	2320      	movmi	r3, #32
 8003d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d7e:	0713      	lsls	r3, r2, #28
 8003d80:	bf44      	itt	mi
 8003d82:	232b      	movmi	r3, #43	; 0x2b
 8003d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d88:	f89a 3000 	ldrb.w	r3, [sl]
 8003d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8003d8e:	d015      	beq.n	8003dbc <_vfiprintf_r+0x13c>
 8003d90:	4654      	mov	r4, sl
 8003d92:	2000      	movs	r0, #0
 8003d94:	f04f 0c0a 	mov.w	ip, #10
 8003d98:	9a07      	ldr	r2, [sp, #28]
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003da0:	3b30      	subs	r3, #48	; 0x30
 8003da2:	2b09      	cmp	r3, #9
 8003da4:	d94e      	bls.n	8003e44 <_vfiprintf_r+0x1c4>
 8003da6:	b1b0      	cbz	r0, 8003dd6 <_vfiprintf_r+0x156>
 8003da8:	9207      	str	r2, [sp, #28]
 8003daa:	e014      	b.n	8003dd6 <_vfiprintf_r+0x156>
 8003dac:	eba0 0308 	sub.w	r3, r0, r8
 8003db0:	fa09 f303 	lsl.w	r3, r9, r3
 8003db4:	4313      	orrs	r3, r2
 8003db6:	46a2      	mov	sl, r4
 8003db8:	9304      	str	r3, [sp, #16]
 8003dba:	e7d2      	b.n	8003d62 <_vfiprintf_r+0xe2>
 8003dbc:	9b03      	ldr	r3, [sp, #12]
 8003dbe:	1d19      	adds	r1, r3, #4
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	9103      	str	r1, [sp, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bfbb      	ittet	lt
 8003dc8:	425b      	neglt	r3, r3
 8003dca:	f042 0202 	orrlt.w	r2, r2, #2
 8003dce:	9307      	strge	r3, [sp, #28]
 8003dd0:	9307      	strlt	r3, [sp, #28]
 8003dd2:	bfb8      	it	lt
 8003dd4:	9204      	strlt	r2, [sp, #16]
 8003dd6:	7823      	ldrb	r3, [r4, #0]
 8003dd8:	2b2e      	cmp	r3, #46	; 0x2e
 8003dda:	d10c      	bne.n	8003df6 <_vfiprintf_r+0x176>
 8003ddc:	7863      	ldrb	r3, [r4, #1]
 8003dde:	2b2a      	cmp	r3, #42	; 0x2a
 8003de0:	d135      	bne.n	8003e4e <_vfiprintf_r+0x1ce>
 8003de2:	9b03      	ldr	r3, [sp, #12]
 8003de4:	3402      	adds	r4, #2
 8003de6:	1d1a      	adds	r2, r3, #4
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	9203      	str	r2, [sp, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	bfb8      	it	lt
 8003df0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003df4:	9305      	str	r3, [sp, #20]
 8003df6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003ed0 <_vfiprintf_r+0x250>
 8003dfa:	2203      	movs	r2, #3
 8003dfc:	4650      	mov	r0, sl
 8003dfe:	7821      	ldrb	r1, [r4, #0]
 8003e00:	f000 fa38 	bl	8004274 <memchr>
 8003e04:	b140      	cbz	r0, 8003e18 <_vfiprintf_r+0x198>
 8003e06:	2340      	movs	r3, #64	; 0x40
 8003e08:	eba0 000a 	sub.w	r0, r0, sl
 8003e0c:	fa03 f000 	lsl.w	r0, r3, r0
 8003e10:	9b04      	ldr	r3, [sp, #16]
 8003e12:	3401      	adds	r4, #1
 8003e14:	4303      	orrs	r3, r0
 8003e16:	9304      	str	r3, [sp, #16]
 8003e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e1c:	2206      	movs	r2, #6
 8003e1e:	482d      	ldr	r0, [pc, #180]	; (8003ed4 <_vfiprintf_r+0x254>)
 8003e20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e24:	f000 fa26 	bl	8004274 <memchr>
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	d03f      	beq.n	8003eac <_vfiprintf_r+0x22c>
 8003e2c:	4b2a      	ldr	r3, [pc, #168]	; (8003ed8 <_vfiprintf_r+0x258>)
 8003e2e:	bb1b      	cbnz	r3, 8003e78 <_vfiprintf_r+0x1f8>
 8003e30:	9b03      	ldr	r3, [sp, #12]
 8003e32:	3307      	adds	r3, #7
 8003e34:	f023 0307 	bic.w	r3, r3, #7
 8003e38:	3308      	adds	r3, #8
 8003e3a:	9303      	str	r3, [sp, #12]
 8003e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e3e:	443b      	add	r3, r7
 8003e40:	9309      	str	r3, [sp, #36]	; 0x24
 8003e42:	e767      	b.n	8003d14 <_vfiprintf_r+0x94>
 8003e44:	460c      	mov	r4, r1
 8003e46:	2001      	movs	r0, #1
 8003e48:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e4c:	e7a5      	b.n	8003d9a <_vfiprintf_r+0x11a>
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f04f 0c0a 	mov.w	ip, #10
 8003e54:	4619      	mov	r1, r3
 8003e56:	3401      	adds	r4, #1
 8003e58:	9305      	str	r3, [sp, #20]
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e60:	3a30      	subs	r2, #48	; 0x30
 8003e62:	2a09      	cmp	r2, #9
 8003e64:	d903      	bls.n	8003e6e <_vfiprintf_r+0x1ee>
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0c5      	beq.n	8003df6 <_vfiprintf_r+0x176>
 8003e6a:	9105      	str	r1, [sp, #20]
 8003e6c:	e7c3      	b.n	8003df6 <_vfiprintf_r+0x176>
 8003e6e:	4604      	mov	r4, r0
 8003e70:	2301      	movs	r3, #1
 8003e72:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e76:	e7f0      	b.n	8003e5a <_vfiprintf_r+0x1da>
 8003e78:	ab03      	add	r3, sp, #12
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	462a      	mov	r2, r5
 8003e7e:	4630      	mov	r0, r6
 8003e80:	4b16      	ldr	r3, [pc, #88]	; (8003edc <_vfiprintf_r+0x25c>)
 8003e82:	a904      	add	r1, sp, #16
 8003e84:	f3af 8000 	nop.w
 8003e88:	4607      	mov	r7, r0
 8003e8a:	1c78      	adds	r0, r7, #1
 8003e8c:	d1d6      	bne.n	8003e3c <_vfiprintf_r+0x1bc>
 8003e8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e90:	07d9      	lsls	r1, r3, #31
 8003e92:	d405      	bmi.n	8003ea0 <_vfiprintf_r+0x220>
 8003e94:	89ab      	ldrh	r3, [r5, #12]
 8003e96:	059a      	lsls	r2, r3, #22
 8003e98:	d402      	bmi.n	8003ea0 <_vfiprintf_r+0x220>
 8003e9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e9c:	f7ff fa72 	bl	8003384 <__retarget_lock_release_recursive>
 8003ea0:	89ab      	ldrh	r3, [r5, #12]
 8003ea2:	065b      	lsls	r3, r3, #25
 8003ea4:	f53f af12 	bmi.w	8003ccc <_vfiprintf_r+0x4c>
 8003ea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003eaa:	e711      	b.n	8003cd0 <_vfiprintf_r+0x50>
 8003eac:	ab03      	add	r3, sp, #12
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	462a      	mov	r2, r5
 8003eb2:	4630      	mov	r0, r6
 8003eb4:	4b09      	ldr	r3, [pc, #36]	; (8003edc <_vfiprintf_r+0x25c>)
 8003eb6:	a904      	add	r1, sp, #16
 8003eb8:	f000 f882 	bl	8003fc0 <_printf_i>
 8003ebc:	e7e4      	b.n	8003e88 <_vfiprintf_r+0x208>
 8003ebe:	bf00      	nop
 8003ec0:	0800435c 	.word	0x0800435c
 8003ec4:	0800437c 	.word	0x0800437c
 8003ec8:	0800433c 	.word	0x0800433c
 8003ecc:	080043a0 	.word	0x080043a0
 8003ed0:	080043a6 	.word	0x080043a6
 8003ed4:	080043aa 	.word	0x080043aa
 8003ed8:	00000000 	.word	0x00000000
 8003edc:	08003c5b 	.word	0x08003c5b

08003ee0 <_printf_common>:
 8003ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee4:	4616      	mov	r6, r2
 8003ee6:	4699      	mov	r9, r3
 8003ee8:	688a      	ldr	r2, [r1, #8]
 8003eea:	690b      	ldr	r3, [r1, #16]
 8003eec:	4607      	mov	r7, r0
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	bfb8      	it	lt
 8003ef2:	4613      	movlt	r3, r2
 8003ef4:	6033      	str	r3, [r6, #0]
 8003ef6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003efa:	460c      	mov	r4, r1
 8003efc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f00:	b10a      	cbz	r2, 8003f06 <_printf_common+0x26>
 8003f02:	3301      	adds	r3, #1
 8003f04:	6033      	str	r3, [r6, #0]
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	0699      	lsls	r1, r3, #26
 8003f0a:	bf42      	ittt	mi
 8003f0c:	6833      	ldrmi	r3, [r6, #0]
 8003f0e:	3302      	addmi	r3, #2
 8003f10:	6033      	strmi	r3, [r6, #0]
 8003f12:	6825      	ldr	r5, [r4, #0]
 8003f14:	f015 0506 	ands.w	r5, r5, #6
 8003f18:	d106      	bne.n	8003f28 <_printf_common+0x48>
 8003f1a:	f104 0a19 	add.w	sl, r4, #25
 8003f1e:	68e3      	ldr	r3, [r4, #12]
 8003f20:	6832      	ldr	r2, [r6, #0]
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	42ab      	cmp	r3, r5
 8003f26:	dc28      	bgt.n	8003f7a <_printf_common+0x9a>
 8003f28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f2c:	1e13      	subs	r3, r2, #0
 8003f2e:	6822      	ldr	r2, [r4, #0]
 8003f30:	bf18      	it	ne
 8003f32:	2301      	movne	r3, #1
 8003f34:	0692      	lsls	r2, r2, #26
 8003f36:	d42d      	bmi.n	8003f94 <_printf_common+0xb4>
 8003f38:	4649      	mov	r1, r9
 8003f3a:	4638      	mov	r0, r7
 8003f3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f40:	47c0      	blx	r8
 8003f42:	3001      	adds	r0, #1
 8003f44:	d020      	beq.n	8003f88 <_printf_common+0xa8>
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	68e5      	ldr	r5, [r4, #12]
 8003f4a:	f003 0306 	and.w	r3, r3, #6
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	bf18      	it	ne
 8003f52:	2500      	movne	r5, #0
 8003f54:	6832      	ldr	r2, [r6, #0]
 8003f56:	f04f 0600 	mov.w	r6, #0
 8003f5a:	68a3      	ldr	r3, [r4, #8]
 8003f5c:	bf08      	it	eq
 8003f5e:	1aad      	subeq	r5, r5, r2
 8003f60:	6922      	ldr	r2, [r4, #16]
 8003f62:	bf08      	it	eq
 8003f64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	bfc4      	itt	gt
 8003f6c:	1a9b      	subgt	r3, r3, r2
 8003f6e:	18ed      	addgt	r5, r5, r3
 8003f70:	341a      	adds	r4, #26
 8003f72:	42b5      	cmp	r5, r6
 8003f74:	d11a      	bne.n	8003fac <_printf_common+0xcc>
 8003f76:	2000      	movs	r0, #0
 8003f78:	e008      	b.n	8003f8c <_printf_common+0xac>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	4652      	mov	r2, sl
 8003f7e:	4649      	mov	r1, r9
 8003f80:	4638      	mov	r0, r7
 8003f82:	47c0      	blx	r8
 8003f84:	3001      	adds	r0, #1
 8003f86:	d103      	bne.n	8003f90 <_printf_common+0xb0>
 8003f88:	f04f 30ff 	mov.w	r0, #4294967295
 8003f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f90:	3501      	adds	r5, #1
 8003f92:	e7c4      	b.n	8003f1e <_printf_common+0x3e>
 8003f94:	2030      	movs	r0, #48	; 0x30
 8003f96:	18e1      	adds	r1, r4, r3
 8003f98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fa2:	4422      	add	r2, r4
 8003fa4:	3302      	adds	r3, #2
 8003fa6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003faa:	e7c5      	b.n	8003f38 <_printf_common+0x58>
 8003fac:	2301      	movs	r3, #1
 8003fae:	4622      	mov	r2, r4
 8003fb0:	4649      	mov	r1, r9
 8003fb2:	4638      	mov	r0, r7
 8003fb4:	47c0      	blx	r8
 8003fb6:	3001      	adds	r0, #1
 8003fb8:	d0e6      	beq.n	8003f88 <_printf_common+0xa8>
 8003fba:	3601      	adds	r6, #1
 8003fbc:	e7d9      	b.n	8003f72 <_printf_common+0x92>
	...

08003fc0 <_printf_i>:
 8003fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc4:	7e0f      	ldrb	r7, [r1, #24]
 8003fc6:	4691      	mov	r9, r2
 8003fc8:	2f78      	cmp	r7, #120	; 0x78
 8003fca:	4680      	mov	r8, r0
 8003fcc:	460c      	mov	r4, r1
 8003fce:	469a      	mov	sl, r3
 8003fd0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003fd6:	d807      	bhi.n	8003fe8 <_printf_i+0x28>
 8003fd8:	2f62      	cmp	r7, #98	; 0x62
 8003fda:	d80a      	bhi.n	8003ff2 <_printf_i+0x32>
 8003fdc:	2f00      	cmp	r7, #0
 8003fde:	f000 80d9 	beq.w	8004194 <_printf_i+0x1d4>
 8003fe2:	2f58      	cmp	r7, #88	; 0x58
 8003fe4:	f000 80a4 	beq.w	8004130 <_printf_i+0x170>
 8003fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ff0:	e03a      	b.n	8004068 <_printf_i+0xa8>
 8003ff2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ff6:	2b15      	cmp	r3, #21
 8003ff8:	d8f6      	bhi.n	8003fe8 <_printf_i+0x28>
 8003ffa:	a101      	add	r1, pc, #4	; (adr r1, 8004000 <_printf_i+0x40>)
 8003ffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004000:	08004059 	.word	0x08004059
 8004004:	0800406d 	.word	0x0800406d
 8004008:	08003fe9 	.word	0x08003fe9
 800400c:	08003fe9 	.word	0x08003fe9
 8004010:	08003fe9 	.word	0x08003fe9
 8004014:	08003fe9 	.word	0x08003fe9
 8004018:	0800406d 	.word	0x0800406d
 800401c:	08003fe9 	.word	0x08003fe9
 8004020:	08003fe9 	.word	0x08003fe9
 8004024:	08003fe9 	.word	0x08003fe9
 8004028:	08003fe9 	.word	0x08003fe9
 800402c:	0800417b 	.word	0x0800417b
 8004030:	0800409d 	.word	0x0800409d
 8004034:	0800415d 	.word	0x0800415d
 8004038:	08003fe9 	.word	0x08003fe9
 800403c:	08003fe9 	.word	0x08003fe9
 8004040:	0800419d 	.word	0x0800419d
 8004044:	08003fe9 	.word	0x08003fe9
 8004048:	0800409d 	.word	0x0800409d
 800404c:	08003fe9 	.word	0x08003fe9
 8004050:	08003fe9 	.word	0x08003fe9
 8004054:	08004165 	.word	0x08004165
 8004058:	682b      	ldr	r3, [r5, #0]
 800405a:	1d1a      	adds	r2, r3, #4
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	602a      	str	r2, [r5, #0]
 8004060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004064:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004068:	2301      	movs	r3, #1
 800406a:	e0a4      	b.n	80041b6 <_printf_i+0x1f6>
 800406c:	6820      	ldr	r0, [r4, #0]
 800406e:	6829      	ldr	r1, [r5, #0]
 8004070:	0606      	lsls	r6, r0, #24
 8004072:	f101 0304 	add.w	r3, r1, #4
 8004076:	d50a      	bpl.n	800408e <_printf_i+0xce>
 8004078:	680e      	ldr	r6, [r1, #0]
 800407a:	602b      	str	r3, [r5, #0]
 800407c:	2e00      	cmp	r6, #0
 800407e:	da03      	bge.n	8004088 <_printf_i+0xc8>
 8004080:	232d      	movs	r3, #45	; 0x2d
 8004082:	4276      	negs	r6, r6
 8004084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004088:	230a      	movs	r3, #10
 800408a:	485e      	ldr	r0, [pc, #376]	; (8004204 <_printf_i+0x244>)
 800408c:	e019      	b.n	80040c2 <_printf_i+0x102>
 800408e:	680e      	ldr	r6, [r1, #0]
 8004090:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004094:	602b      	str	r3, [r5, #0]
 8004096:	bf18      	it	ne
 8004098:	b236      	sxthne	r6, r6
 800409a:	e7ef      	b.n	800407c <_printf_i+0xbc>
 800409c:	682b      	ldr	r3, [r5, #0]
 800409e:	6820      	ldr	r0, [r4, #0]
 80040a0:	1d19      	adds	r1, r3, #4
 80040a2:	6029      	str	r1, [r5, #0]
 80040a4:	0601      	lsls	r1, r0, #24
 80040a6:	d501      	bpl.n	80040ac <_printf_i+0xec>
 80040a8:	681e      	ldr	r6, [r3, #0]
 80040aa:	e002      	b.n	80040b2 <_printf_i+0xf2>
 80040ac:	0646      	lsls	r6, r0, #25
 80040ae:	d5fb      	bpl.n	80040a8 <_printf_i+0xe8>
 80040b0:	881e      	ldrh	r6, [r3, #0]
 80040b2:	2f6f      	cmp	r7, #111	; 0x6f
 80040b4:	bf0c      	ite	eq
 80040b6:	2308      	moveq	r3, #8
 80040b8:	230a      	movne	r3, #10
 80040ba:	4852      	ldr	r0, [pc, #328]	; (8004204 <_printf_i+0x244>)
 80040bc:	2100      	movs	r1, #0
 80040be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040c2:	6865      	ldr	r5, [r4, #4]
 80040c4:	2d00      	cmp	r5, #0
 80040c6:	bfa8      	it	ge
 80040c8:	6821      	ldrge	r1, [r4, #0]
 80040ca:	60a5      	str	r5, [r4, #8]
 80040cc:	bfa4      	itt	ge
 80040ce:	f021 0104 	bicge.w	r1, r1, #4
 80040d2:	6021      	strge	r1, [r4, #0]
 80040d4:	b90e      	cbnz	r6, 80040da <_printf_i+0x11a>
 80040d6:	2d00      	cmp	r5, #0
 80040d8:	d04d      	beq.n	8004176 <_printf_i+0x1b6>
 80040da:	4615      	mov	r5, r2
 80040dc:	fbb6 f1f3 	udiv	r1, r6, r3
 80040e0:	fb03 6711 	mls	r7, r3, r1, r6
 80040e4:	5dc7      	ldrb	r7, [r0, r7]
 80040e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040ea:	4637      	mov	r7, r6
 80040ec:	42bb      	cmp	r3, r7
 80040ee:	460e      	mov	r6, r1
 80040f0:	d9f4      	bls.n	80040dc <_printf_i+0x11c>
 80040f2:	2b08      	cmp	r3, #8
 80040f4:	d10b      	bne.n	800410e <_printf_i+0x14e>
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	07de      	lsls	r6, r3, #31
 80040fa:	d508      	bpl.n	800410e <_printf_i+0x14e>
 80040fc:	6923      	ldr	r3, [r4, #16]
 80040fe:	6861      	ldr	r1, [r4, #4]
 8004100:	4299      	cmp	r1, r3
 8004102:	bfde      	ittt	le
 8004104:	2330      	movle	r3, #48	; 0x30
 8004106:	f805 3c01 	strble.w	r3, [r5, #-1]
 800410a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800410e:	1b52      	subs	r2, r2, r5
 8004110:	6122      	str	r2, [r4, #16]
 8004112:	464b      	mov	r3, r9
 8004114:	4621      	mov	r1, r4
 8004116:	4640      	mov	r0, r8
 8004118:	f8cd a000 	str.w	sl, [sp]
 800411c:	aa03      	add	r2, sp, #12
 800411e:	f7ff fedf 	bl	8003ee0 <_printf_common>
 8004122:	3001      	adds	r0, #1
 8004124:	d14c      	bne.n	80041c0 <_printf_i+0x200>
 8004126:	f04f 30ff 	mov.w	r0, #4294967295
 800412a:	b004      	add	sp, #16
 800412c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004130:	4834      	ldr	r0, [pc, #208]	; (8004204 <_printf_i+0x244>)
 8004132:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004136:	6829      	ldr	r1, [r5, #0]
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	f851 6b04 	ldr.w	r6, [r1], #4
 800413e:	6029      	str	r1, [r5, #0]
 8004140:	061d      	lsls	r5, r3, #24
 8004142:	d514      	bpl.n	800416e <_printf_i+0x1ae>
 8004144:	07df      	lsls	r7, r3, #31
 8004146:	bf44      	itt	mi
 8004148:	f043 0320 	orrmi.w	r3, r3, #32
 800414c:	6023      	strmi	r3, [r4, #0]
 800414e:	b91e      	cbnz	r6, 8004158 <_printf_i+0x198>
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	f023 0320 	bic.w	r3, r3, #32
 8004156:	6023      	str	r3, [r4, #0]
 8004158:	2310      	movs	r3, #16
 800415a:	e7af      	b.n	80040bc <_printf_i+0xfc>
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	f043 0320 	orr.w	r3, r3, #32
 8004162:	6023      	str	r3, [r4, #0]
 8004164:	2378      	movs	r3, #120	; 0x78
 8004166:	4828      	ldr	r0, [pc, #160]	; (8004208 <_printf_i+0x248>)
 8004168:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800416c:	e7e3      	b.n	8004136 <_printf_i+0x176>
 800416e:	0659      	lsls	r1, r3, #25
 8004170:	bf48      	it	mi
 8004172:	b2b6      	uxthmi	r6, r6
 8004174:	e7e6      	b.n	8004144 <_printf_i+0x184>
 8004176:	4615      	mov	r5, r2
 8004178:	e7bb      	b.n	80040f2 <_printf_i+0x132>
 800417a:	682b      	ldr	r3, [r5, #0]
 800417c:	6826      	ldr	r6, [r4, #0]
 800417e:	1d18      	adds	r0, r3, #4
 8004180:	6961      	ldr	r1, [r4, #20]
 8004182:	6028      	str	r0, [r5, #0]
 8004184:	0635      	lsls	r5, r6, #24
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	d501      	bpl.n	800418e <_printf_i+0x1ce>
 800418a:	6019      	str	r1, [r3, #0]
 800418c:	e002      	b.n	8004194 <_printf_i+0x1d4>
 800418e:	0670      	lsls	r0, r6, #25
 8004190:	d5fb      	bpl.n	800418a <_printf_i+0x1ca>
 8004192:	8019      	strh	r1, [r3, #0]
 8004194:	2300      	movs	r3, #0
 8004196:	4615      	mov	r5, r2
 8004198:	6123      	str	r3, [r4, #16]
 800419a:	e7ba      	b.n	8004112 <_printf_i+0x152>
 800419c:	682b      	ldr	r3, [r5, #0]
 800419e:	2100      	movs	r1, #0
 80041a0:	1d1a      	adds	r2, r3, #4
 80041a2:	602a      	str	r2, [r5, #0]
 80041a4:	681d      	ldr	r5, [r3, #0]
 80041a6:	6862      	ldr	r2, [r4, #4]
 80041a8:	4628      	mov	r0, r5
 80041aa:	f000 f863 	bl	8004274 <memchr>
 80041ae:	b108      	cbz	r0, 80041b4 <_printf_i+0x1f4>
 80041b0:	1b40      	subs	r0, r0, r5
 80041b2:	6060      	str	r0, [r4, #4]
 80041b4:	6863      	ldr	r3, [r4, #4]
 80041b6:	6123      	str	r3, [r4, #16]
 80041b8:	2300      	movs	r3, #0
 80041ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041be:	e7a8      	b.n	8004112 <_printf_i+0x152>
 80041c0:	462a      	mov	r2, r5
 80041c2:	4649      	mov	r1, r9
 80041c4:	4640      	mov	r0, r8
 80041c6:	6923      	ldr	r3, [r4, #16]
 80041c8:	47d0      	blx	sl
 80041ca:	3001      	adds	r0, #1
 80041cc:	d0ab      	beq.n	8004126 <_printf_i+0x166>
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	079b      	lsls	r3, r3, #30
 80041d2:	d413      	bmi.n	80041fc <_printf_i+0x23c>
 80041d4:	68e0      	ldr	r0, [r4, #12]
 80041d6:	9b03      	ldr	r3, [sp, #12]
 80041d8:	4298      	cmp	r0, r3
 80041da:	bfb8      	it	lt
 80041dc:	4618      	movlt	r0, r3
 80041de:	e7a4      	b.n	800412a <_printf_i+0x16a>
 80041e0:	2301      	movs	r3, #1
 80041e2:	4632      	mov	r2, r6
 80041e4:	4649      	mov	r1, r9
 80041e6:	4640      	mov	r0, r8
 80041e8:	47d0      	blx	sl
 80041ea:	3001      	adds	r0, #1
 80041ec:	d09b      	beq.n	8004126 <_printf_i+0x166>
 80041ee:	3501      	adds	r5, #1
 80041f0:	68e3      	ldr	r3, [r4, #12]
 80041f2:	9903      	ldr	r1, [sp, #12]
 80041f4:	1a5b      	subs	r3, r3, r1
 80041f6:	42ab      	cmp	r3, r5
 80041f8:	dcf2      	bgt.n	80041e0 <_printf_i+0x220>
 80041fa:	e7eb      	b.n	80041d4 <_printf_i+0x214>
 80041fc:	2500      	movs	r5, #0
 80041fe:	f104 0619 	add.w	r6, r4, #25
 8004202:	e7f5      	b.n	80041f0 <_printf_i+0x230>
 8004204:	080043b1 	.word	0x080043b1
 8004208:	080043c2 	.word	0x080043c2

0800420c <_read_r>:
 800420c:	b538      	push	{r3, r4, r5, lr}
 800420e:	4604      	mov	r4, r0
 8004210:	4608      	mov	r0, r1
 8004212:	4611      	mov	r1, r2
 8004214:	2200      	movs	r2, #0
 8004216:	4d05      	ldr	r5, [pc, #20]	; (800422c <_read_r+0x20>)
 8004218:	602a      	str	r2, [r5, #0]
 800421a:	461a      	mov	r2, r3
 800421c:	f7fc fa40 	bl	80006a0 <_read>
 8004220:	1c43      	adds	r3, r0, #1
 8004222:	d102      	bne.n	800422a <_read_r+0x1e>
 8004224:	682b      	ldr	r3, [r5, #0]
 8004226:	b103      	cbz	r3, 800422a <_read_r+0x1e>
 8004228:	6023      	str	r3, [r4, #0]
 800422a:	bd38      	pop	{r3, r4, r5, pc}
 800422c:	20001130 	.word	0x20001130

08004230 <_fstat_r>:
 8004230:	b538      	push	{r3, r4, r5, lr}
 8004232:	2300      	movs	r3, #0
 8004234:	4d06      	ldr	r5, [pc, #24]	; (8004250 <_fstat_r+0x20>)
 8004236:	4604      	mov	r4, r0
 8004238:	4608      	mov	r0, r1
 800423a:	4611      	mov	r1, r2
 800423c:	602b      	str	r3, [r5, #0]
 800423e:	f7fc fa73 	bl	8000728 <_fstat>
 8004242:	1c43      	adds	r3, r0, #1
 8004244:	d102      	bne.n	800424c <_fstat_r+0x1c>
 8004246:	682b      	ldr	r3, [r5, #0]
 8004248:	b103      	cbz	r3, 800424c <_fstat_r+0x1c>
 800424a:	6023      	str	r3, [r4, #0]
 800424c:	bd38      	pop	{r3, r4, r5, pc}
 800424e:	bf00      	nop
 8004250:	20001130 	.word	0x20001130

08004254 <_isatty_r>:
 8004254:	b538      	push	{r3, r4, r5, lr}
 8004256:	2300      	movs	r3, #0
 8004258:	4d05      	ldr	r5, [pc, #20]	; (8004270 <_isatty_r+0x1c>)
 800425a:	4604      	mov	r4, r0
 800425c:	4608      	mov	r0, r1
 800425e:	602b      	str	r3, [r5, #0]
 8004260:	f7fc fa71 	bl	8000746 <_isatty>
 8004264:	1c43      	adds	r3, r0, #1
 8004266:	d102      	bne.n	800426e <_isatty_r+0x1a>
 8004268:	682b      	ldr	r3, [r5, #0]
 800426a:	b103      	cbz	r3, 800426e <_isatty_r+0x1a>
 800426c:	6023      	str	r3, [r4, #0]
 800426e:	bd38      	pop	{r3, r4, r5, pc}
 8004270:	20001130 	.word	0x20001130

08004274 <memchr>:
 8004274:	4603      	mov	r3, r0
 8004276:	b510      	push	{r4, lr}
 8004278:	b2c9      	uxtb	r1, r1
 800427a:	4402      	add	r2, r0
 800427c:	4293      	cmp	r3, r2
 800427e:	4618      	mov	r0, r3
 8004280:	d101      	bne.n	8004286 <memchr+0x12>
 8004282:	2000      	movs	r0, #0
 8004284:	e003      	b.n	800428e <memchr+0x1a>
 8004286:	7804      	ldrb	r4, [r0, #0]
 8004288:	3301      	adds	r3, #1
 800428a:	428c      	cmp	r4, r1
 800428c:	d1f6      	bne.n	800427c <memchr+0x8>
 800428e:	bd10      	pop	{r4, pc}

08004290 <_init>:
 8004290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004292:	bf00      	nop
 8004294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004296:	bc08      	pop	{r3}
 8004298:	469e      	mov	lr, r3
 800429a:	4770      	bx	lr

0800429c <_fini>:
 800429c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429e:	bf00      	nop
 80042a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042a2:	bc08      	pop	{r3}
 80042a4:	469e      	mov	lr, r3
 80042a6:	4770      	bx	lr
